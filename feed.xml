<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/Content/RSS.xslt" type="text/xsl" media="screen"?>
<rss xmlns:dc="https://purl.org/dc/elements/1.1/" xmlns:atom="https://www.w3.org/2005/Atom" version="2.0">

    <channel>

        <title>Productive Rage</title>
        <link>https://www.productiverage.com/</link>
        <atom:link href="https://www.productiverage.com/feed" rel="self" type="application/rss+xml" />
        <description>Dan's techie ramblings</description>
        <language>en-gb</language>

        <lastBuildDate>Wed, 07 Apr 2021 22:21:00 GMT</lastBuildDate>
        <docs>https://blogs.law.harvard.edu/tech/rss</docs>

        <image>
            <title>Productive Rage</title>
            <url>https://www.productiverage.com/Content/Images/Grouch.jpg</url>
            <width>142</width>
            <height>142</height>
            <link>https://www.productiverage.com/</link>
        </image>

        <xhtml:meta xmlns:xhtml="https://www.w3.org/1999/xhtml" name="robots" content="noindex" />

            <item>
                <title>Automating &quot;suggested / related posts&quot; links for my blog posts</title>
                <link>https://www.productiverage.com/automating-suggested-related-posts-links-for-my-blog-posts</link>
                <guid>https://www.productiverage.com/automating-suggested-related-posts-links-for-my-blog-posts</guid>
                <description>&lt;h3&gt;TL;DR&lt;/h3&gt;&#xA;&lt;p&gt;Using the same open source .NET library as I did in my last post (&lt;a href=&quot;https://www.productiverage.com/language-detection-and-wordsinsentence-classification-in-c-sharp&quot;&gt;Language detection and words-in-sentence classification in C#&lt;/a&gt;), I use some of its other machine learning capabilities to automatically generate &amp;quot;you may also be interested in&amp;quot; links to similar posts for any given post on this blog.&lt;/p&gt;&#xA;&lt;h3&gt;The current &amp;quot;You may also be interested in&amp;quot; functionality&lt;/h3&gt;&#xA;&lt;p&gt;This site has always had a way for me to link related posts together - for example, if you scroll to the bottom of &amp;quot;&lt;a href=&quot;https://www.productiverage.com/learning-f-sharp-via-some-machine-learning-the-single-layer-percepton&quot;&gt;Learning F# via some Machine Learning: The Single Layer Perceptron&lt;/a&gt;&amp;quot; then it suggests a link to &amp;quot;&lt;a href=&quot;https://www.productiverage.com/face-or-no-face-finding-faces-in-photos-using-c-sharp-and-accordnet&quot;&gt;Face or no face (finding faces in photos using C# and Accord.NET)&lt;/a&gt;&amp;quot; on the basis that you might be super-excited into my fiddlings with computers being trained how to make decisions on their own. But there aren&#x27;t many of these links because they&#x27;re something that I have to maintain manually. Firstly, that means that I have to remember / consider every previous post and decide whether it might be worth linking to the new post that I&#x27;ve just finished writing and, secondly, I often just forget.&lt;/p&gt;&#xA;&lt;p&gt;There are models in the &lt;a href=&quot;https://github.com/curiosity-ai/catalyst&quot;&gt;Catalyst&lt;/a&gt; library* that make this possible and so I thought that I would see whether I could train it with my blog post data and then incorporate the suggestions into the final content.&lt;/p&gt;&#xA;&lt;p&gt;* &lt;em&gt;(Again, see my &lt;a href=&quot;https://www.productiverage.com/language-detection-and-wordsinsentence-classification-in-c-sharp&quot;&gt;last post&lt;/a&gt; for more details on this library and a little blurb about my previous employers who are doing exciting things in the Enterprise Search space)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Specifically, I&#x27;ll be using the &lt;a href=&quot;https://en.wikipedia.org/wiki/FastText&quot;&gt;fastText&lt;/a&gt; model that was published by &lt;a href=&quot;https://github.com/facebookresearch/fastText&quot;&gt;Facebook&#x27;s AI Research lab&lt;/a&gt; in 2015 and then &lt;a href=&quot;https://github.com/curiosity-ai/catalyst/tree/master/Catalyst/src/Models/Embeddings/FastText&quot;&gt;rewritten in C#&lt;/a&gt; as part of the Catalyst library.&lt;/p&gt;&#xA;&lt;h3&gt;Getting my blog post articles&lt;/h3&gt;&#xA;&lt;p&gt;When I first launched my blog (just over a decade ago), I initially hosted it somewhere as an ASP.NET MVC application. Largely because I wanted to try my hand at writing an MVC app from scratch and fiddling with various settings, I think.. and partly because it felt like the &amp;quot;natural&amp;quot; thing to do, seeing as I was employed as a .NET Developer at the time!&lt;/p&gt;&#xA;&lt;p&gt;To keep things simple, I had a single text file for each blog post and the filenames were of a particular format containing a unique post ID, date and time of publishing, whether it should appear in the &amp;quot;Highlights&amp;quot; column and any tags that should be associated with it. Like this:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;1,2011,3,14,20,14,2,0,Immutability.txt&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;That&#x27;s the very first post (it has ID 1), it was published on 2011-03-14 at 20:14:02 and it is not shown in the Highlights column (hence the final zero). It has a single tag of &amp;quot;Immutability&amp;quot;. Although it has a &amp;quot;.txt&amp;quot; extension, it&#x27;s actually markdown content, so &amp;quot;.md&amp;quot; would have been more logical (the reason why I chose &amp;quot;.txt&amp;quot; over &amp;quot;.md&amp;quot; will likely remain forever lost in the mists of time!)&lt;/p&gt;&#xA;&lt;p&gt;A couple of years later, I came across the project &lt;a href=&quot;https://neocities.org/&quot;&gt;neocities.org&lt;/a&gt; and thought that it was a cool idea and did some (perhaps slightly hacky) work to make things work as a static site (including pushing the search logic entirely to the client) as described in &lt;a href=&quot;https://www.productiverage.com/the-neocities-challenge-aka-the-full-text-indexer-goes-clientside&quot;&gt;The NeoCities Challenge!&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Some &lt;em&gt;more&lt;/em&gt; years later, GitHub Pages started supporting custom domains over HTTPS (in May 2018 according to &lt;a href=&quot;https://github.blog/2018-05-01-github-pages-custom-domains-https/&quot;&gt;this&lt;/a&gt;) and so, having already moved web hosts once due to wildly inconsistent performance from the first provider, I decided to use this to-static-site logic and start publishing via GitHub Pages.&lt;/p&gt;&#xA;&lt;p&gt;This is a long-winded way of saying that, although I publish my content these days as a static site, I write new content by running the original blog app locally and then turning it into static content later. Meaning that the original individual post files are available in the ASP.NET MVC Blog GitHub repo here:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/ProductiveRage/Blog/tree/master/Blog/App_Data/Posts&quot;&gt;github.com/ProductiveRage/Blog/tree/master/Blog/App_Data/Posts&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Therefore, if you were sufficiently curious and wanted to play along at home, you can also access the original markdown files for my blog posts and see if you can reproduce my results.&lt;/p&gt;&#xA;&lt;p&gt;Following shortly is some code to do just that. GitHub has an API that allows you to query folder contents and so we can get a list of blog post files without having to do anything arduous like clone the entire repo or trying to scrape the information from the site or even creating an authenticated API access application because GitHub allows us rate-limited non-authenticated access for free! Once we have the list of files, each will have a &amp;quot;download_url&amp;quot; that we can retrieve the raw content from.&lt;/p&gt;&#xA;&lt;p&gt;To get the list of blog post files, you would call:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&quot;https://api.github.com/repos/ProductiveRage/Blog/contents/Blog/App_Data/Posts?ref=master&quot;&gt;api.github.com/repos/ProductiveRage/Blog/contents/Blog/App_Data/Posts?ref=master&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;.. and get results that look like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;[&#xA;  {&#xA;    &amp;quot;name&amp;quot;: &amp;quot;1,2011,3,14,20,14,2,0,Immutability.txt&amp;quot;,&#xA;    &amp;quot;path&amp;quot;: &amp;quot;Blog/App_Data/Posts/1,2011,3,14,20,14,2,0,Immutability.txt&amp;quot;,&#xA;    &amp;quot;sha&amp;quot;: &amp;quot;b243ea15c891f73550485af27fa06dd1ccb8bf45&amp;quot;,&#xA;    &amp;quot;size&amp;quot;: 18965,&#xA;    &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/repos/ProductiveRage/Blog/contents/Blog/App_Data/Posts/1,2011,3,14,20,14,2,0,Immutability.txt?ref=master&amp;quot;,&#xA;    &amp;quot;html_url&amp;quot;: &amp;quot;https://github.com/ProductiveRage/Blog/blob/master/Blog/App_Data/Posts/1,2011,3,14,20,14,2,0,Immutability.txt&amp;quot;,&#xA;    &amp;quot;git_url&amp;quot;: &amp;quot;https://api.github.com/repos/ProductiveRage/Blog/git/blobs/b243ea15c891f73550485af27fa06dd1ccb8bf45&amp;quot;,&#xA;    &amp;quot;download_url&amp;quot;: &amp;quot;https://raw.githubusercontent.com/ProductiveRage/Blog/master/Blog/App_Data/Posts/1%2C2011%2C3%2C14%2C20%2C14%2C2%2C0%2CImmutability.txt&amp;quot;,&#xA;    &amp;quot;type&amp;quot;: &amp;quot;file&amp;quot;,&#xA;    &amp;quot;_links&amp;quot;: {&#xA;      &amp;quot;self&amp;quot;: &amp;quot;https://api.github.com/repos/ProductiveRage/Blog/contents/Blog/App_Data/Posts/1,2011,3,14,20,14,2,0,Immutability.txt?ref=master&amp;quot;,&#xA;      &amp;quot;git&amp;quot;: &amp;quot;https://api.github.com/repos/ProductiveRage/Blog/git/blobs/b243ea15c891f73550485af27fa06dd1ccb8bf45&amp;quot;,&#xA;      &amp;quot;html&amp;quot;: &amp;quot;https://github.com/ProductiveRage/Blog/blob/master/Blog/App_Data/Posts/1,2011,3,14,20,14,2,0,Immutability.txt&amp;quot;&#xA;    }&#xA;  },&#xA;  {&#xA;    &amp;quot;name&amp;quot;: &amp;quot;10,2011,8,30,19,06,0,0,Mercurial.txt&amp;quot;,&#xA;    &amp;quot;path&amp;quot;: &amp;quot;Blog/App_Data/Posts/10,2011,8,30,19,06,0,0,Mercurial.txt&amp;quot;,&#xA;    &amp;quot;sha&amp;quot;: &amp;quot;ab6cf2fc360948212e29c64d9c886b3dbfe0d6fc&amp;quot;,&#xA;    &amp;quot;size&amp;quot;: 3600,&#xA;    &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/repos/ProductiveRage/Blog/contents/Blog/App_Data/Posts/10,2011,8,30,19,06,0,0,Mercurial.txt?ref=master&amp;quot;,&#xA;    &amp;quot;html_url&amp;quot;: &amp;quot;https://github.com/ProductiveRage/Blog/blob/master/Blog/App_Data/Posts/10,2011,8,30,19,06,0,0,Mercurial.txt&amp;quot;,&#xA;    &amp;quot;git_url&amp;quot;: &amp;quot;https://api.github.com/repos/ProductiveRage/Blog/git/blobs/ab6cf2fc360948212e29c64d9c886b3dbfe0d6fc&amp;quot;,&#xA;    &amp;quot;download_url&amp;quot;: &amp;quot;https://raw.githubusercontent.com/ProductiveRage/Blog/master/Blog/App_Data/Posts/10%2C2011%2C8%2C30%2C19%2C06%2C0%2C0%2CMercurial.txt&amp;quot;,&#xA;    &amp;quot;type&amp;quot;: &amp;quot;file&amp;quot;,&#xA;    &amp;quot;_links&amp;quot;: {&#xA;      &amp;quot;self&amp;quot;: &amp;quot;https://api.github.com/repos/ProductiveRage/Blog/contents/Blog/App_Data/Posts/10,2011,8,30,19,06,0,0,Mercurial.txt?ref=master&amp;quot;,&#xA;      &amp;quot;git&amp;quot;: &amp;quot;https://api.github.com/repos/ProductiveRage/Blog/git/blobs/ab6cf2fc360948212e29c64d9c886b3dbfe0d6fc&amp;quot;,&#xA;      &amp;quot;html&amp;quot;: &amp;quot;https://github.com/ProductiveRage/Blog/blob/master/Blog/App_Data/Posts/10,2011,8,30,19,06,0,0,Mercurial.txt&amp;quot;&#xA;    }&#xA;  },&#xA;  ..&#xA;  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;While the API is rate-limited, retrieving content via the &amp;quot;download_url&amp;quot; locations is not - so we can make a single API call for the list and then download all of the individual files that we want.&lt;/p&gt;&#xA;&lt;p&gt;Note that there are a couple of files in that folders that are NOT blog posts (such as the &amp;quot;RelatedPosts.txt&amp;quot; file, which is the way that I manually associate &amp;quot;You may also be interested in&amp;quot; post) and so each filename will have to be checked to ensure that it matches the format shown above.&lt;/p&gt;&#xA;&lt;p&gt;The title of the blog post is not in the file name, it is always the first line of the content in the file (to obtain it, we&#x27;ll need to process the file as markdown content, convert it to plain text and then look at that first line).&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static async Task&amp;lt;IEnumerable&amp;lt;BlogPost&amp;gt;&amp;gt; GetBlogPosts()&#xA;{&#xA;    // Note: The GitHub API is rate limited quite severely for non-authenticated apps, so we just&#xA;    // call it once for the list of files and then retrieve them all further down via the Download&#xA;    // URLs (which don&#x27;t count as API calls). Still, if you run this code repeatedly and start&#xA;    // getting 403 &amp;quot;rate limited&amp;quot; responses then you might have to hold off for a while.&#xA;    string namesAndUrlsJson;&#xA;    using (var client = new WebClient())&#xA;    {&#xA;        // The API refuses requests without a User Agent, so set one before calling (see&#xA;        // https://docs.github.com/en/rest/overview/resources-in-the-rest-api#user-agent-required)&#xA;        client.Headers.Add(HttpRequestHeader.UserAgent, &amp;quot;ProductiveRage Blog Post Example&amp;quot;);&#xA;        namesAndUrlsJson = await client.DownloadStringTaskAsync(new Uri(&#xA;            &amp;quot;https://api.github.com/repos/ProductiveRage/Blog/contents/Blog/App_Data/Posts?ref=master&amp;quot;&#xA;        ));&#xA;    }&#xA;&#xA;    // Deserialise the response into an array of entries that have Name and Download_Url properties&#xA;    var namesAndUrls = JsonConvert.DeserializeAnonymousType(&#xA;        namesAndUrlsJson,&#xA;        new[] { new { Name = &amp;quot;&amp;quot;, Download_Url = (Uri)null } }&#xA;    );&#xA;&#xA;    return await Task.WhenAll(namesAndUrls&#xA;        .Select(entry =&amp;gt;&#xA;        {&#xA;            var fileNameSegments = Path.GetFileNameWithoutExtension(entry.Name).Split(&amp;quot;,&amp;quot;);&#xA;            if (fileNameSegments.Length &amp;lt; 8)&#xA;                return default;&#xA;            if (!int.TryParse(fileNameSegments[0], out var id))&#xA;                return default;&#xA;            var dateContent = string.Join(&amp;quot;,&amp;quot;, fileNameSegments.Skip(1).Take(6));&#xA;            if (!DateTime.TryParseExact(dateContent, &amp;quot;yyyy,M,d,H,m,s&amp;quot;, default, default, out var date))&#xA;                return default;&#xA;            return (PostID: id, PublishedAt: date, entry.Download_Url);&#xA;        })&#xA;        .Where(entry =&amp;gt; entry != default)&#xA;        .Select(async entry =&amp;gt;&#xA;        {&#xA;            // Read the file content as markdown and parse into plain text (the first line of which&#xA;            // will be the title of the post)&#xA;            string markdown;&#xA;            using (var client = new WebClient())&#xA;            {&#xA;                markdown = await client.DownloadStringTaskAsync(entry.Download_Url);&#xA;            }&#xA;            var plainText = Markdown.ToPlainText(markdown);&#xA;            var title = plainText.Replace(&amp;quot;\r\n&amp;quot;, &amp;quot;\n&amp;quot;).Replace(&#x27;\r&#x27;, &#x27;\n&#x27;).Split(&#x27;\n&#x27;).First();&#xA;            return new BlogPost(entry.PostID, title, plainText, entry.PublishedAt);&#xA;        })&#xA;    );&#xA;}&#xA;&#xA;private sealed class BlogPost&#xA;{&#xA;    public BlogPost(int id, string title, string plainTextContent, DateTime publishedAt)&#xA;    {&#xA;        ID = id;&#xA;        Title = !string.IsNullOrWhiteSpace(title)&#xA;            ? title&#xA;            : throw new ArgumentException(&amp;quot;may not be null, blank or whitespace-only&amp;quot;);&#xA;        PlainTextContent = !string.IsNullOrWhiteSpace(plainTextContent)&#xA;            ? plainTextContent&#xA;            : throw new ArgumentException(&amp;quot;may not be null, blank or whitespace-only&amp;quot;);&#xA;        PublishedAt = publishedAt;&#xA;    }&#xA;&#xA;    public int ID{ get; }&#xA;    public string Title { get; }&#xA;    public string PlainTextContent { get; }&#xA;    public DateTime PublishedAt { get; }&#xA;}    &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;em&gt;(Note: I use the &lt;a href=&quot;https://github.com/xoofx/markdig&quot;&gt;Markdig&lt;/a&gt; library to process markdown)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3&gt;Training a FastText model&lt;/h3&gt;&#xA;&lt;p&gt;This raw blog post content needs to transformed into Catalyst &amp;quot;documents&amp;quot;, then tokenised (split into individual sentences and words), then fed into a FastText model trainer.&lt;/p&gt;&#xA;&lt;p&gt;Before getting to the code, I want to discuss a couple of oddities coming up. Firstly, Catalyst documents are required to train the FastText model and each document instance must be uniquely identified by a &lt;strong&gt;UID128&lt;/strong&gt; value, which is fine because we can generate them from the Title text of each blog post using the &amp;quot;Hash128()&amp;quot; extension method in Catalyst. However, (as we&#x27;ll see a bit further down), when you ask for vectors* from the FastText model for the processed documents, each vector comes with a &amp;quot;Token&amp;quot; string that is the ID of the source document - so that has to be parsed &lt;em&gt;back&lt;/em&gt; into a &lt;strong&gt;UID128&lt;/strong&gt;. I&#x27;m not quite sure why the &amp;quot;Token&amp;quot; value isn&#x27;t also a &lt;strong&gt;UID128&lt;/strong&gt; but it&#x27;s no massive deal.&lt;/p&gt;&#xA;&lt;p&gt;* &lt;em&gt;(Vectors are just 1D arrays of floating point values - the FastText algorithm does magic to produce vectors that represent the text of the documents such that the distance between them can be compared; the length of these arrays is determined by the &amp;quot;Dimensions&amp;quot; option shown below and shorter distances between vectors suggest more similar content)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Next, there are the FastText settings that I&#x27;ve used. The &lt;a href=&quot;https://github.com/curiosity-ai/catalyst&quot;&gt;Catalyst README&lt;/a&gt; has some code near the bottom for training a FastText embedding model but I didn&#x27;t have much luck with the default options. Firstly, when I used the &amp;quot;FastText.ModelType.CBow&amp;quot; option then I didn&#x27;t get any vectors generated and so I tried changing it to &amp;quot;FastText.ModelType.PVDM&amp;quot; and things started looked promising. Then I fiddled with some of the other settings. Some of which I have a rough idea what they mean and some, erm.. not so much.&lt;/p&gt;&#xA;&lt;p&gt;The settings that I ended up using are these:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var fastText = new FastText(language, version: 0, tag: &amp;quot;&amp;quot;);&#xA;fastText.Data.Type = FastText.ModelType.PVDM;&#xA;fastText.Data.Loss = FastText.LossType.NegativeSampling;&#xA;fastText.Data.IgnoreCase = true;&#xA;fastText.Data.Epoch = 50;&#xA;fastText.Data.Dimensions = 512;&#xA;fastText.Data.MinimumCount = 1;&#xA;fastText.Data.ContextWindow = 10;&#xA;fastText.Data.NegativeSamplingCount = 20;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;I already mentioned changing the Data.Type / ModelType and the LossType (&amp;quot;NegativeSampling&amp;quot;) is the value shown in the README. Then I felt like an obvious one to change was IgnoreCase, since that defaults to false and I think that I want it to be true - I don&#x27;t care about the casing in any words when it&#x27;s parsing my posts&#x27; content.&lt;/p&gt;&#xA;&lt;p&gt;Now the others.. well, this library is built to work with systems with 10s or 100s of 1,000s of documents and that is a LOT more data than I have (currently around 120 blog posts) and so I made a few tweaks based on that. The &amp;quot;Epoch&amp;quot; count is the number of iterations that the training process will go through when constructing its model - by default, this is only 5 but I have limited data (meaning there&#x27;s less for it to learn from but also that it&#x27;s faster to complete each iteration) and so I bumped that up to 50. Then &amp;quot;Dimensions&amp;quot; is the size of the vectors generated - again, I figured that with limited data I would want a higher value and so I picked 512 (a nice round number if you&#x27;re geeky enough) over the default 200. The &amp;quot;MinimumCount&amp;quot;, I believe, relates to how often a word may appear and it defaults to 5 so I pulled it down to 1. The &amp;quot;ContextWindow&amp;quot; is (again, I &lt;em&gt;think&lt;/em&gt;) how far to either side of any word that the process will look at in order to determine context - the larger the value, the more expensive the calculation; I bumped this from the default 5 up to 10. Then there&#x27;s the &amp;quot;NegativeSamplingCount&amp;quot; value.. I have to just put my hands up and say that I have no idea what that actually does, only that I seemed to be getting better results with a value of 20 than I was with the default of 10.&lt;/p&gt;&#xA;&lt;p&gt;With machine learning, there is almost always going to be some value to tweaking options (the &amp;quot;hyperparameters&amp;quot;, if we&#x27;re being all fancy) like this when building a model. Depending upon the model and the library, the defaults can be good for the general case but my tiny data set is not really what this library was intended for. Of course, machine learning &lt;em&gt;experts&lt;/em&gt; have more idea &lt;em&gt;what&lt;/em&gt; they&#x27;re tweaking and (sometimes, at least) hopefully what results they&#x27;ll get.. but I&#x27;m happy enough with where I&#x27;ve ended up with these.&lt;/p&gt;&#xA;&lt;p&gt;This talk about what those machine learning experts do brings me on to the final thing that I wanted to talk about before showing the code; a little pre-processing / data-massaging. The better the data is that goes in, generally the better the results that come out will be. So another less glamorous part of the life of a Data Scientist is cleaning up data for training models.&lt;/p&gt;&#xA;&lt;p&gt;In my case, that only extended to noticing that a few terms didn&#x27;t seem to be getting recognised as essentially being the same thing and so I wanted to give it a little hand - for example, a fair number of my posts are about my &amp;quot;Full Text Indexer&amp;quot; project and so it probably makes sense to replace any instances of that string with a single concatenated word &amp;quot;FullTextIndexer&amp;quot;. And I have a range of posts about React but I didn&#x27;t want it to get confused with the verb &amp;quot;react&amp;quot; and so I replaced any &amp;quot;React&amp;quot; occurrence with &amp;quot;ReactJS&amp;quot; (now, this probably means that some &amp;quot;React&amp;quot; verb occurrences were incorrectly changed but I made the replacements of this word in a case-sensitive manner and felt like I would have likely used it as the noun more often than a verb with a captial letter due to the nature of my posts).&lt;/p&gt;&#xA;&lt;p&gt;So I have a method to tidy up the plain text content a little:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static string NormaliseSomeCommonTerms(string text) =&amp;gt; text&#xA;    .Replace(&amp;quot;.NET&amp;quot;, &amp;quot;NET&amp;quot;, StringComparison.OrdinalIgnoreCase)&#xA;    .Replace(&amp;quot;Full Text Indexer&amp;quot;, &amp;quot;FullTextIndexer&amp;quot;, StringComparison.OrdinalIgnoreCase)&#xA;    .Replace(&amp;quot;Bridge.net&amp;quot;, &amp;quot;BridgeNET&amp;quot;, StringComparison.OrdinalIgnoreCase)&#xA;    .Replace(&amp;quot;React&amp;quot;, &amp;quot;ReactJS&amp;quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Now let&#x27;s get training!&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Console.WriteLine(&amp;quot;Reading posts from GitHub repo..&amp;quot;);&#xA;var posts = await GetBlogPosts();&#xA;&#xA;Console.WriteLine(&amp;quot;Parsing documents..&amp;quot;);&#xA;Storage.Current = new OnlineRepositoryStorage(new DiskStorage(&amp;quot;catalyst-models&amp;quot;));&#xA;var language = Language.English;&#xA;var pipeline = Pipeline.For(language);&#xA;var postsWithDocuments = posts&#xA;    .Select(post =&amp;gt;&#xA;    {&#xA;        var document = new Document(NormaliseSomeCommonTerms(post.PlainTextContent), language)&#xA;        {&#xA;            UID = post.Title.Hash128()&#xA;        };&#xA;        pipeline.ProcessSingle(document);&#xA;        return (Post: post, Document: document);&#xA;    })&#xA;    .ToArray(); // Call ToArray to force evaluation of the document processing now&#xA;&#xA;Console.WriteLine(&amp;quot;Training FastText model..&amp;quot;);&#xA;var fastText = new FastText(language, version: 0, tag: &amp;quot;&amp;quot;);&#xA;fastText.Data.Type = FastText.ModelType.PVDM;&#xA;fastText.Data.Loss = FastText.LossType.NegativeSampling;&#xA;fastText.Data.IgnoreCase = true;&#xA;fastText.Data.Epoch = 50;&#xA;fastText.Data.Dimensions = 512;&#xA;fastText.Data.MinimumCount = 1;&#xA;fastText.Data.ContextWindow = 10;&#xA;fastText.Data.NegativeSamplingCount = 20;&#xA;fastText.Train(&#xA;    postsWithDocuments.Select(postsWithDocument =&amp;gt; postsWithDocument.Document),&#xA;    trainingStatus: update =&amp;gt; Console.WriteLine($&amp;quot; Progress: {update.Progress}, Epoch: {update.Epoch}&amp;quot;)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3&gt;Identifying similar documents using the model&lt;/h3&gt;&#xA;&lt;p&gt;Now that a model has been built that can represent all of my blog posts as vectors, we need to go through those post / vector combinations and identify others that are similar to it.&lt;/p&gt;&#xA;&lt;p&gt;This will be achieved by using the &lt;a href=&quot;https://github.com/curiosity-ai/hnsw-sharp&quot;&gt;HNSW.NET&lt;/a&gt; NuGet package that enables K-Nearest Neighbour (k-NN) searches over &amp;quot;high-dimensional space&amp;quot;*.&lt;/p&gt;&#xA;&lt;p&gt;* &lt;em&gt;(This just means that the vectors are relatively large; 512 in this case - two dimensions would be a point on a flat plane, three dimensions would be a physical point in space, anything with more dimensions that that is in &amp;quot;higher-dimensional space&amp;quot;.. though that&#x27;s not to say that any more than three dimensions is definitely a bad fit for a regular k-NN search but 512 dimensions IS going to be a bad fit and the HNSW approach will be much more efficient)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;There are useful examples on the &lt;a href=&quot;https://github.com/curiosity-ai/hnsw-sharp#how-to-build-a-graph&quot;&gt;README&lt;/a&gt; about &amp;quot;&lt;strong&gt;How to build a graph?&lt;/strong&gt;&amp;quot; and &amp;quot;&lt;strong&gt;How to run k-NN search?&lt;/strong&gt;&amp;quot; and tweaking those for the data that I have so far leads to this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Console.WriteLine(&amp;quot;Building recommendations..&amp;quot;);&#xA;&#xA;// Combine the blog post data with the FastText-generated vectors&#xA;var results = fastText&#xA;    .GetDocumentVectors()&#xA;    .Select(result =&amp;gt;&#xA;    {&#xA;        // Each document vector instance will include a &amp;quot;token&amp;quot; string that may be mapped back to the&#xA;        // UID of the document for each blog post. If there were a large number of posts to deal with&#xA;        // then a dictionary to match UIDs to blog posts would be sensible for performance but I only&#xA;        // have a 100&#x2B; and so a LINQ &amp;quot;First&amp;quot; scan over the list will suffice.&#xA;        var uid = UID128.Parse(result.Token);&#xA;        var postForResult = postsWithDocuments.First(&#xA;            postWithDocument =&amp;gt; postWithDocument.Document.UID == uid&#xA;        );&#xA;        return (UID: uid, result.Vector, postForResult.Post);&#xA;    })&#xA;    .ToArray(); // ToArray since we enumerate multiple times below&#xA;&#xA;// Construct a graph to search over, as described at&#xA;// https://github.com/curiosity-ai/hnsw-sharp#how-to-build-a-graph&#xA;var graph = new SmallWorld&amp;lt;(UID128 UID, float[] Vector, BlogPost Post), float&amp;gt;(&#xA;    distance: (to, from) =&amp;gt; CosineDistance.NonOptimized(from.Vector, to.Vector),&#xA;    DefaultRandomGenerator.Instance,&#xA;    new() { M = 15, LevelLambda = 1 / Math.Log(15) }&#xA;);&#xA;graph.AddItems(results);&#xA;&#xA;// For every post, use the &amp;quot;KNNSearch&amp;quot; method on the graph to find the three most similar posts&#xA;const int maximumNumberOfResultsToReturn = 3;&#xA;var postsWithSimilarResults = results&#xA;    .Select(result =&amp;gt;&#xA;    {&#xA;        // Request one result too many from the KNNSearch call because it&#x27;s expected that the original&#xA;        // post will come back as the best match and we&#x27;ll want to exclude that&#xA;        var similarResults = graph&#xA;            .KNNSearch(result, maximumNumberOfResultsToReturn &#x2B; 1)&#xA;            .Where(similarResult =&amp;gt; similarResult.Item.UID != result.UID)&#xA;            .Take(maximumNumberOfResultsToReturn); // Just in case the original post wasn&#x27;t included&#xA;&#xA;        return new&#xA;        {&#xA;            result.Post,&#xA;            Similar = similarResults&#xA;                .Select(similarResult =&amp;gt; new&#xA;                {&#xA;                    similarResult.Id,&#xA;                    similarResult.Item.Post,&#xA;                    similarResult.Distance&#xA;                })&#xA;                .ToArray()&#xA;        };&#xA;    })&#xA;    .OrderBy(result =&amp;gt; result.Post.Title, StringComparer.OrdinalIgnoreCase)&#xA;    .ToArray();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;And with that, there is a list of every post from my blog and a list of the three blog posts most similar to it!&lt;/p&gt;&#xA;&lt;p&gt;Well, &amp;quot;most similar&amp;quot; according to the model that we trained and the hyperparameters that we used to do so. As with many machine learning algorithms, it will have started from a random state and tweaked and tweaked until it&#x27;s time for it to stop (based upon the &amp;quot;Epoch&amp;quot; value in this FastText case) and so the results each time may be a little different.&lt;/p&gt;&#xA;&lt;p&gt;However, if we inspect the results like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;foreach (var postWithSimilarResults in postsWithSimilarResults)&#xA;{&#xA;    Console.WriteLine();&#xA;    Console.WriteLine(postWithSimilarResults.Post.Title);&#xA;    foreach (var similarResult in postWithSimilarResults.Similar.OrderBy(other =&amp;gt; other.Distance))&#xA;        Console.WriteLine($&amp;quot;{similarResult.Distance:0.000} {similarResult.Post.Title}&amp;quot;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. then there are some good results to be found! Like these:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Learning F# via some Machine Learning: The Single Layer Perceptron&lt;/strong&gt;&lt;br&gt;&#xA;0.229 How are barcodes read?? (Library-less image processing in C#)&lt;br&gt;&#xA;0.236 Writing F# to implement &#x27;The Single Layer Perceptron&#x27;&lt;br&gt;&#xA;0.299 Face or no face (finding faces in photos using C# and AccordNET)&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Translating VBScript into C#&lt;/strong&gt;&lt;br&gt;&#xA;0.257 VBScript is DIM&lt;br&gt;&#xA;0.371 If you can keep your head when all about you are losing theirs and blaming it on VBScript&lt;br&gt;&#xA;0.384 Using Roslyn to identify unused and undeclared variables in VBScript WSC components&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Writing ReactJS components in TypeScript&lt;/strong&gt;&lt;br&gt;&#xA;0.376 TypeScript classes for (ReactJS) Flux actions&lt;br&gt;&#xA;0.378 ReactJS and Flux with DuoCode&lt;br&gt;&#xA;0.410 ReactJS (and Flux) with BridgeNET&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;However, there are also some &lt;em&gt;less&lt;/em&gt; good ones - like these:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;A static type system is a wonderful message to the present and future&lt;/strong&gt;&lt;br&gt;&#xA;0.271 STA ApartmentState with ASP.Net MVC&lt;br&gt;&#xA;0.291 CSS Minification Regular Expressions&lt;br&gt;&#xA;0.303 Publishing RSS&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Simple TypeScript type definitions for AMD modules&lt;/strong&gt;&lt;br&gt;&#xA;0.162 STA ApartmentState with ASP.Net MVC&lt;br&gt;&#xA;0.189 WCF with JSON (and nullable types)&lt;br&gt;&#xA;0.191 The joys of AutoMapper&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Supporting IDispatch through the COMInteraction wrapper&lt;/strong&gt;&lt;br&gt;&#xA;0.394 A static type system is a wonderful message to the present and future&lt;br&gt;&#xA;0.411 TypeScript State Machines&lt;br&gt;&#xA;0.414 Simple TypeScript type definitions for AMD modules&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3&gt;Improving the results&lt;/h3&gt;&#xA;&lt;p&gt;I&#x27;d like to get this good enough that I can include auto-generated recommendations on my blog and I don&#x27;t feel like the consistency in quality is there yet. If they were all like the good examples then I&#x27;d be ploughing ahead right now with enabling it! But there are mediocre examples as well as those poorer ones above.&lt;/p&gt;&#xA;&lt;p&gt;It&#x27;s quite possible that I could get closer by experimenting with the hyperparameters more but that does tend to get tedious when you have to analyse the output of each run manually - looking through all the 120-ish post titles and deciding whether the supposed best matches are good or not. It would be lovely if I could concoct some sort of metric of &amp;quot;goodness&amp;quot; and then have the computer try lots of variations of parameters but one of the downsides of having relatively little data is that that is difficult*.&lt;/p&gt;&#xA;&lt;p&gt;* &lt;em&gt;(On the flip side, if I had &lt;strong&gt;1,000s&lt;/strong&gt; of blog posts as source data then the difficult part would be manually labelling enough of them as &amp;quot;quite similar&amp;quot; in numbers sufficient for the computer to know if it&#x27;s done better or done worse with each experiment)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Fortunately, I have another trick up my sleeve - but I&#x27;m going to leave that for next time! This post is already more than long enough, I think. The plan is to combine results from &lt;em&gt;another&lt;/em&gt; model in the Catalyst with the FastText results and see if I can encourage things to look a bit neater.&lt;/p&gt;&#xA;</description>
                <pubDate>Wed, 07 Apr 2021 22:21:00 GMT</pubDate>
            </item>
            <item>
                <title>Language detection and words-in-sentence classification in C#</title>
                <link>https://www.productiverage.com/language-detection-and-wordsinsentence-classification-in-c-sharp</link>
                <guid>https://www.productiverage.com/language-detection-and-wordsinsentence-classification-in-c-sharp</guid>
                <description>&lt;h3&gt;TL;(BG)DR&lt;/h3&gt;&#xA;&lt;p&gt;Using an open source .NET library, it&#x27;s easy to determine what language a sentence / paragraph / document is written in and to then classify the words in each sentence into verbs, nouns, etc..&lt;/p&gt;&#xA;&lt;h3&gt;What library?&lt;/h3&gt;&#xA;&lt;p&gt;I recently parted ways on very good terms with my last employers (and friends!) at &lt;a href=&quot;https://curiosity.ai/&quot;&gt;Curiosity AI&lt;/a&gt; but that doesn&#x27;t mean that I&#x27;m not still excited by their technology, some really useful aspects of which they have released as open source*.&lt;/p&gt;&#xA;&lt;p&gt;* &lt;em&gt;(For the full service, ask yourself if your team or your company have ever struggled to find some information that you know exists somewhere but that might be in one of your network drives containing 10s of 1,000s of files &lt;strong&gt;or&lt;/strong&gt; in your emails &lt;strong&gt;or&lt;/strong&gt; in Sharepoint &lt;strong&gt;or&lt;/strong&gt; GDrive somewhere - with Curiosity, you can set up a system that will index all that data so that it&#x27;s searchable in one place, as well as learning synonyms and abbreviations in case you can&#x27;t conjure up the precise terms to search for. It can even find similar documents for those case where have one document to hand and just know that there&#x27;s another related to it but are struggling to find it - plus it has an ingrained permissions model so that your team could all index their emails and GDrive files and be secure in the knowledge that only they and people that they&#x27;ve shared the files with can see them; they don&#x27;t get pulled in in such a way that your private, intimate, confidential emails are now visible to everyone!)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;I have a little time off between jobs and so I wanted to write a little bit about some of the open-sourced projects that they released that I think are cool.&lt;/p&gt;&#xA;&lt;p&gt;This first one is a really simple example but I think that it demonstrates how easily you can access capabilities that are pretty impressive.&lt;/p&gt;&#xA;&lt;p&gt;This is my cat Cass:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&quot;https://www.productiverage.com/Content/Images/Posts/Cass.jpg&quot; alt=&quot;Cute little girl&quot;&gt;&lt;/p&gt;&#xA;&lt;p&gt;She looks so cute that you&#x27;d think butter wouldn&#x27;t melt. But, of my three cats, she is the prime suspect for the pigeon carcus that was recently dragged through the cat flap one night, up a flight of stairs and deposited outside my home office - and, perhaps not coincidentally, a mere six feet away from where she&#x27;d recently made herself a cosy bed in a duvet cover that I&#x27;d left out to remind myself to wash.&lt;/p&gt;&#xA;&lt;p&gt;I think that it&#x27;s a fair conclusion to draw that:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;My cat Cass is a lovely fluffy little pigeon-killer!&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Now you and I can easily see that that is a sentence written in English. But if you wanted a computer to work it out, how would you go about it?&lt;/p&gt;&#xA;&lt;p&gt;Well, one way would be to install the &lt;a href=&quot;https://github.com/curiosity-ai/catalyst&quot;&gt;Catalyst&lt;/a&gt; &lt;a href=&quot;https://www.nuget.org/packages/Catalyst&quot;&gt;NuGet package&lt;/a&gt; and write the following code:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.IO;&#xA;using System.Threading.Tasks;&#xA;using Catalyst;&#xA;using Catalyst.Models;&#xA;using Mosaik.Core;&#xA;using Version = Mosaik.Core.Version;&#xA;&#xA;namespace CatalystExamples&#xA;{&#xA;    internal static class Program&#xA;    {&#xA;        private static async Task Main()&#xA;        {&#xA;            const string text = &amp;quot;My cat Cass is a lovely fluffy little pigeon-killer!&amp;quot;;&#xA;&#xA;            Console.WriteLine(&amp;quot;Downloading/reading language detection models..&amp;quot;);&#xA;            const string modelFolderName = &amp;quot;catalyst-models&amp;quot;;&#xA;            if (!new DirectoryInfo(modelFolderName).Exists)&#xA;                Console.WriteLine(&amp;quot;- Downloading for the first time, so this may take a little while&amp;quot;);&#xA;            &#xA;            Storage.Current = new OnlineRepositoryStorage(new DiskStorage(modelFolderName));&#xA;            var languageDetector = await FastTextLanguageDetector.FromStoreAsync(&#xA;                Language.Any,&#xA;                Version.Latest,&#xA;                &amp;quot;&amp;quot;&#xA;            );&#xA;            Console.WriteLine();&#xA;&#xA;            var doc = new Document(text);&#xA;            languageDetector.Process(doc);&#xA;&#xA;            Console.WriteLine(text);&#xA;            Console.WriteLine($&amp;quot;Detected language: {doc.Language}&amp;quot;);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Running this code will print the following to the console:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Downloading/reading language detection models..&#xA;- Downloading for the first time, so this may take a little while&#xA;&#xA;My cat Cass is a lovely fluffy little pigeon-killer!&#xA;Detected language: English&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Just to prove that it doesn&#x27;t &lt;em&gt;only&lt;/em&gt; detect English, I ran the sentence through Google Translate to get a German version (unfortunately, the languages I&#x27;m fluent in are only English and a few computer languages and so Google Translate was very much needed!) - thus changing the &amp;quot;text&amp;quot; definition to:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const string text = &amp;quot;Meine Katze Cass ist eine sch&#xF6;ne flauschige kleine Taubenm&#xF6;rderin!&amp;quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Running the altered program results in the following console output:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Downloading/reading language detection models..&#xA;&#xA;Meine Katze Cass ist eine wundersch&#xF6;ne, flauschige kleine Taubenm&#xF6;rderin!&#xA;Detected language: German&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Great success!&lt;/p&gt;&#xA;&lt;p&gt;The next thing that we can do is analyse the grammatical constructs of the sentence. I&#x27;m going to return to the English version for this because it will be easier for me to be confident that the word classifications are correct.&lt;/p&gt;&#xA;&lt;p&gt;Add the following code immediately after the Console.WriteLine calls in the Main method from earlier:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Console.WriteLine();&#xA;Console.WriteLine($&amp;quot;Downloading/reading part-of-speech model for {doc.Language}..&amp;quot;);&#xA;var pipeline = await Pipeline.ForAsync(doc.Language);&#xA;pipeline.ProcessSingle(doc);&#xA;foreach (var sentence in doc)&#xA;{&#xA;    foreach (var token in sentence)&#xA;        Console.WriteLine($&amp;quot;{token.Value}{new string(&#x27; &#x27;, 20 - token.Value.Length)}{token.POS}&amp;quot;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The program will now write the following to the console:&lt;/p&gt;&#xA;&lt;p&gt;Downloading/reading language detection models..&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;My cat Cass is a lovely fluffy little pigeon-killer!&#xA;Detected language: English&#xA;&#xA;Downloading/reading part-of-speech model for English..&#xA;My                  PRON&#xA;cat                 NOUN&#xA;Cass                PROPN&#xA;is                  AUX&#xA;a                   DET&#xA;lovely              ADJ&#xA;fluffy              ADJ&#xA;little              ADJ&#xA;pigeon-killer       NOUN&#xA;!                   PUNCT&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The &amp;quot;Part of Speech&amp;quot; (PoS) categories shown above are (as quoted from &lt;a href=&quot;https://universaldependencies.org/u/pos/all.html&quot;&gt;universaldependencies.org/u/pos/all.html&lt;/a&gt;) -&lt;/p&gt;&#xA;&lt;table&gt;&#xA;&lt;thead&gt;&#xA;&lt;tr&gt;&#xA;&lt;th&gt;Word(s)&lt;/th&gt;&#xA;&lt;th&gt;Code&lt;/th&gt;&#xA;&lt;th&gt;Name&lt;/th&gt;&#xA;&lt;th&gt;Description&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/thead&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;My&lt;/td&gt;&#xA;&lt;td&gt;PRON&lt;/td&gt;&#xA;&lt;td&gt;Pronoun&lt;/td&gt;&#xA;&lt;td&gt;words that substitute for nouns or noun phrases, whose meaning is recoverable from the linguistic or extralinguistic context&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;cat, pigeon-killer&lt;/td&gt;&#xA;&lt;td&gt;NOUN&lt;/td&gt;&#xA;&lt;td&gt;Noun&lt;/td&gt;&#xA;&lt;td&gt;a part of speech typically denoting a person, place, thing, animal or idea&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Cass&lt;/td&gt;&#xA;&lt;td&gt;PNOUN&lt;/td&gt;&#xA;&lt;td&gt;Proper Noun&lt;/td&gt;&#xA;&lt;td&gt;a noun (or nominal content word) that is the name (or part of the name) of a specific individual, place, or object&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;is&lt;/td&gt;&#xA;&lt;td&gt;AUX&lt;/td&gt;&#xA;&lt;td&gt;Auxiullary Verb&lt;/td&gt;&#xA;&lt;td&gt;a function word that accompanies the lexical verb of a verb phrase and expresses grammatical distinctions not carried by the lexical verb, such as person, number, tense, mood, aspect, voice or evidentiality&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;a&lt;/td&gt;&#xA;&lt;td&gt;DET&lt;/td&gt;&#xA;&lt;td&gt;Determiner&lt;/td&gt;&#xA;&lt;td&gt;words that modify nouns or noun phrases and express the reference of the noun phrase in context&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;lovely, fluffy, little&lt;/td&gt;&#xA;&lt;td&gt;ADJ&lt;/td&gt;&#xA;&lt;td&gt;Adjective&lt;/td&gt;&#xA;&lt;td&gt;words that typically modify nouns and specify their properties or attributes&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;!&lt;/td&gt;&#xA;&lt;td&gt;PUNCT&lt;/td&gt;&#xA;&lt;td&gt;Punctuation&lt;/td&gt;&#xA;&lt;td&gt;non-alphabetical characters and character groups used in many languages to delimit linguistic units in printed text&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;How easy was that?! There are a myriad of uses for this sort of analysis (one of the things that the full Curiosity system uses it for is identifying nouns throughout documents and creating tags that any documents sharing a given noun are linked via; so if you found one document about &amp;quot;Flux Capacitors&amp;quot; then you could easily identify all of the other documents / emails / memos that mentioned it - though that really is just the tip of the iceberg).&lt;/p&gt;&#xA;&lt;h3&gt;Very minor caveats&lt;/h3&gt;&#xA;&lt;p&gt;I have only a couple of warnings before signing off this post. I&#x27;ve seen the sentence detector get confused if it has very little data to work with (a tiny segment fragment, for example) or if there is a document that has different sections written in multiple languages - but I don&#x27;t think that either case is unreasonable, the library is very clever but it can&#x27;t perform magic!&lt;/p&gt;&#xA;&lt;h3&gt;Coming soon&lt;/h3&gt;&#xA;&lt;p&gt;I&#x27;ve got another post relating to their open-sourced libraries in the pipeline, hopefully I&#x27;ll get that out this week! Let&#x27;s just say that I&#x27;m hoping that my days of having to manually maintain the &amp;quot;you may also be interested&amp;quot; links between my posts will soon be behind me!&lt;/p&gt;&#xA;</description>
                <pubDate>Tue, 09 Mar 2021 19:52:00 GMT</pubDate>
            </item>
            <item>
                <title>Monitoring my garden&#x27;s limited sunlight time period with an Arduino (and some tupperware)</title>
                <link>https://www.productiverage.com/monitoring-my-gardens-limited-sunlight-time-period-with-an-arduino-and-some-tupperware</link>
                <guid>https://www.productiverage.com/monitoring-my-gardens-limited-sunlight-time-period-with-an-arduino-and-some-tupperware</guid>
                <description>&lt;p&gt;My house has a lovely little garden out front. The house and garden itself are elevated one storey above the street (and so my basement is really more of a bizarre ground floor because it has natural light windows but is full of dust and my life-accumulated rubbish is in one room of it while my covid-times &amp;quot;trying to stay fit, not fat&amp;quot; home gym is in the other) and there was no fence around it when I moved in. Meaning that that the &lt;em&gt;interesting characters&lt;/em&gt; that amble past (suffice to say that I went for a nicer house in a slightly on-the-cusp between classy and rougher neighbourhoods as opposed to a less nice house in a posh place) could see in and converse between sips on their 9am double-strength lager. Once fenced off, kitted out with a cute little table and chairs that my friendly neighbours found at a tip and with some lovely raised flower beds installed, it is a &lt;em&gt;delight&lt;/em&gt; in Summer.. only problem is that my house faces the wrong way and so only gets direct sunlight at certain hours of the day. And this time period varies greatly depending upon the time of year - in March, it might not get the light until almost 5pm whilst in July and August it&#x27;s getting warm and light and beautiful (well, on the days that English weather allows) more in time for a late lunch.&lt;/p&gt;&#xA;&lt;p&gt;The problem is that, even after four years here, I still don&#x27;t really have any idea when it&#x27;s going to be sunny there for a given time of year and I want to be able to plan opportunities around it - late evening drinks outside with friends, lunch time warm weather meals for myself, just any general chance top up my vitamin D!&lt;/p&gt;&#xA;&lt;img alt=&quot;Rare English sun in my garden (plus cats)&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/SunnyGardenAndCats.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;I guess that one way to sort this out would be to just keep an eye out on sunny days and take the opportunity whenever it strikes. A more organised plan would be to start a little diary and mark down every fortnight or so through the year when the sun hits the garden and when it leaves.&lt;/p&gt;&#xA;&lt;p&gt;But I work in technology, damnnit, and so I expect to be able to solve this using that electronics and magic! (Cue comments about everything looking like a nail when you&#x27;re holding a hammer).&lt;/p&gt;&#xA;&lt;p&gt;To be &lt;em&gt;really&lt;/em&gt; honest, maybe I&#x27;m describing this situation back to front. My friend gave me an &lt;a href=&quot;https://store.arduino.cc/arduino-uno-rev3&quot;&gt;Arduino UNO r3&lt;/a&gt; because he had a kit spare from the coding club that he runs for kids locally and I&#x27;d been looking for a use for it.. and this seemed like it!&lt;/p&gt;&#xA;&lt;h3&gt;What I needed&lt;/h3&gt;&#xA;&lt;p&gt;Being a total Arduino noob (and, since my Electronics GCSE was over 20 years ago now, I&#x27;m basically a total hardware noob.. you should have seen the trouble that I had trying to build a custom PC a few years ago; I swear it was easier when I was 14!) I wanted something nice and simple to begin with.&lt;/p&gt;&#xA;&lt;p&gt;So I had the starter kit, which included the Arduino board and some jumper cables, a prototyping breadboard and some common components (including, essentially, a photoresistor) and so I figured that all I&#x27;d then need is a way to record the light levels periodically, a power source and some sort of container for when it rains (again; England).&lt;/p&gt;&#xA;&lt;p&gt;I considered having some sort of fancy wifi server in it that would record the values somehow and let me either poll it from somewhere else or have it push those results to the cloud somewhere but eventually decided to go for what seemed like a simpler, more robust and (presumably) more power efficient mechanism of storing the light values throughout the day - using an SD card. Because I&#x27;d got the kit for free (on the agreement that I would try to do something useful with it), I was looking for something cheap to write to an SD card that I&#x27;d had lying around since.. well, I guess since whenever SD cards were useful. Could it have been a digital camera? The very concept seems absurd these days, with the quality of camera that even phones from three or four generations ago have.&lt;/p&gt;&#xA;&lt;p&gt;I came across something called a &amp;quot;&lt;strong&gt;Deek Robot SD/RTC datalogging shield&lt;/strong&gt;&amp;quot; that would not only write to an SD card but would also keep time due to a small battery mounted on it.&lt;/p&gt;&#xA;&lt;p&gt;These are cheap (mine was less than &#xA3;5 delivered, new from eBay) but documentation is somewhat.. spotty. There is a lot of documentation for the &amp;quot;Adafruit Assembled Data Logging shield&amp;quot; but they cost more like &#xA3;13&#x2B; and I was looking for the cheap option. Considering how much time I spent trying to make it work and find good information, it probably would have made more sense to buy a better supported shield than a knock-off from somewhere.. but I &lt;em&gt;did&lt;/em&gt; get it working eventually, so I&#x27;ll share all the code throughout this post!&lt;/p&gt;&#xA;&lt;img alt=&quot;The Arduino UNO r3 with a Deek Robot SD/RTC shield installed&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/ArduinoAndShield.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;&lt;em&gt;Note: I found a warning that when using this particular shield, &amp;quot;If you have a UNO with a USB type B connector this shield may NOT WORK because the male pins are NOT LONG ENOUGH&amp;quot; on a &lt;a href=&quot;https://forum.arduino.cc/index.php?topic=649395.0&quot;&gt;forum page&lt;/a&gt; - my UNO r3 does have the USB B connector but I&#x27;ve not had this problem.. though if you do encounter this problem then maybe some sort of pin extenders or raisers would fix it.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3&gt;Step 1: Writing to the SD card&lt;/h3&gt;&#xA;&lt;p&gt;After reading around, I settled on a library called &lt;a href=&quot;https://github.com/greiman/SdFat&quot;&gt;SdFat&lt;/a&gt; that should handle the disk access for me. I downloaded it from the Github repo and followed the &amp;quot;Importing a .zip Library&amp;quot; instructions on the &lt;a href=&quot;https://www.arduino.cc/en/guide/libraries&quot;&gt;Installing Additional Arduino Libraries&lt;/a&gt; page.&lt;/p&gt;&#xA;&lt;p&gt;This allowed me to stack the data logging shield on top of the UNO, put an SD card into the shield, connect the UNO to my PC via a USB lead and upload the following code -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;SdFat.h&amp;gt; // https://github.com/greiman/SdFat&#xA;&#xA;// chipSelect = 10 according to &amp;quot;Item description&amp;quot; section of&#xA;// https://www.play-zone.ch/de/dk-data-logging-shield-v1-0.html&#xA;#define SD_CHIP_SELECT 10&#xA;&#xA;void setup() {&#xA;  Serial.begin(9600);&#xA;&#xA;  // See &amp;quot;Note 1&amp;quot; further down about SPI_HALF_SPEED&#xA;  SdFat sd;&#xA;  if (!sd.begin(SD_CHIP_SELECT, SPI_HALF_SPEED)) {&#xA;    Serial.println(&amp;quot;ERROR: sd.begin() failed&amp;quot;);&#xA;  }&#xA;  else {&#xA;    SdFile file;&#xA;    if (!file.open(&amp;quot;TestData.txt&amp;quot;, O_WRITE | O_APPEND | O_CREAT)) {&#xA;      Serial.println(&amp;quot;ERROR: file.open() failed - unable to write&amp;quot;);&#xA;    }&#xA;    else {&#xA;      file.println(&amp;quot;Hi!&amp;quot;);&#xA;      file.close();&#xA;      Serial.println(&amp;quot;Successfully wrote to file!&amp;quot;);&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;void loop() { }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The Arduino IDE has an option to view the serial output (the messages written to &amp;quot;Serial.println&amp;quot;) by going to Tools / Serial Monitor. Ensure that the baud rate shown near the bottom right of the window is set to 9600 to match the setting in the code above.&lt;/p&gt;&#xA;&lt;p&gt;This happily showed&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Successfully wrote to file!&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;in the Serial Monitor&#x27;s output and when I yanked the card out and put it into my laptop to see if it had worked, it did indeed have a file on it called &amp;quot;TestData.txt&amp;quot; with a single line saying &amp;quot;Hi!&amp;quot; - an excellent start!&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Note 1: In the &amp;quot;sd.begin&amp;quot; call, I specify &lt;strong&gt;SPI_HALF_SPEED&lt;/strong&gt; primarily because that&#x27;s what most of the examples that I&#x27;ve found use - there is an option &lt;strong&gt;SPI_FULL_SPEED&lt;/strong&gt; but I read in &lt;a href=&quot;https://community.particle.io/t/has-anyone-had-success-hooking-up-an-sd-card-to-the-photon-and-writing-reading-data/24026/41&quot;&gt;an Arduino forum thread&lt;/a&gt; that: &amp;quot;You should be able to use &lt;strong&gt;SPI_FULL_SPEED&lt;/strong&gt; instead, but if that produces communication errors you can use SD_SCK_HZ(4 * MHZ) instead of &lt;strong&gt;SPI_HALF_SPEED&lt;/strong&gt;&amp;quot; and I&#x27;m not sure what might be the limiting factor with said communication errors; whether it&#x27;s the card or the shield or something else and I&#x27;m only going to be writing small amounts of data at relatively infrequent intervals and so I thought that I would err on the safe side and stick with &lt;strong&gt;SPI_HALF_SPEED&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Note 2: In a lot of code samples, in the &amp;quot;setup&amp;quot; method you will see code after the &amp;quot;Serial.begin(..)&amp;quot; call that looks like this:&lt;/em&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;while (!Serial) {&#xA;  // wait for serial port to connect - needed for native USB&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;em&gt;^ This is only needed for particular variants of the Arduino - the &amp;quot;Leonardo&amp;quot;, I believe - and is not required for the UNO and so I haven&#x27;t included it in my code.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Gotcha One:&lt;/strong&gt; Initially, I had formatted my SD card (branded as &amp;quot;Elgetec&amp;quot;, who I can&#x27;t remember ever hearing of other than on this card) on my Windows laptop - doing a full format, to make absolutely sure that it was as ready for action as possible. However, not only did that full format take a long time, I found that when I left my Arduino shield writing files over a period of a few hours then it would often get reported as being corrupted when I tried to read it. I&#x27;ve found that if the &lt;a href=&quot;https://github.com/greiman/SdFat/blob/master/examples/SdFormatter/SdFormatter.ino&quot;&gt;SdFormatter.ino&lt;/a&gt; (from the examples folder of the SdFat GitHub repo) is used then these corruption problems have stopped occurring (and the formatting is much faster!).&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Gotcha Two:&lt;/strong&gt; While I was fiddling around with writing to the SD card, particularly when connected to a battery instead of the USB port (where I could use the Serial Monitor to see what was happening), I tried setting the LED_BUILTIN to be on while writing and then go off again when the file was closed. This didn&#x27;t work. And it &lt;em&gt;can&#x27;t&lt;/em&gt; work, though it took me a lot of reading to find out why. It turns out that the SPI (the &lt;a href=&quot;https://www.arduino.cc/en/reference/SPI&quot;&gt;Serial Peripheral Library&lt;/a&gt;) connection from the Arduino to the Deek Robot shield will use IO pins 10, 11, 12 and 13 for its own communications. 13 happens to be the output used to set the LED_BUILTIN state and so you lose access to setting that built-in LED while this shield is connected. Specifically, &amp;quot;&lt;a href=&quot;https://forum.arduino.cc/index.php?topic=533606.msg3637549#msg3637549&quot;&gt;pin 13 is the SPI clock. Pin 13 is also the built-in led and hence you have a conflict&lt;/a&gt;&amp;quot;.&lt;/p&gt;&#xA;&lt;h3&gt;Step 2: Keeping time&lt;/h3&gt;&#xA;&lt;p&gt;Since I want to record light levels throughout the day, it&#x27;s important to know at what time the recording is being made. The shield that I&#x27;m using also includes an &amp;quot;RTC&amp;quot; (a real-time clock) and so I needed to work out how to set that once and then read from it each time I took a light level reading.&lt;/p&gt;&#xA;&lt;p&gt;The UNO board itself can do some basic form of time keeping, such as telling you how long it&#x27;s been since the board started / was last reset (via the &lt;a href=&quot;https://www.arduino.cc/reference/en/language/functions/time/millis/&quot;&gt;millis()&lt;/a&gt; function) but there are a few limitations with this. You can bake into the compiled code the time at which it was compiled and you &lt;em&gt;could&lt;/em&gt; then use that, in combination with &amp;quot;millis()&amp;quot;, to work out the current time but you will hit problems if power is temporarily lost or if the board is reset (because &amp;quot;millis()&amp;quot; will start from zero again and timing will start again from that baked-in &amp;quot;compiled at&amp;quot; time).&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Gotcha Three:&lt;/strong&gt; I didn&#x27;t realise when I was first fiddling with this that any time you connected the USB lead, it would reset the board and the program (the &amp;quot;sketch&amp;quot;, in Arduino-speak) would start all over again. (This will only make a difference if you&#x27;re using an external power source because otherwise the program would &lt;em&gt;stop&lt;/em&gt; whenever you disconnected the USB lead and there would be nothing running to reset when plugging the USB lead back in! I&#x27;ll be talking about external power supplies further down).&lt;/p&gt;&#xA;&lt;p&gt;So the next step was using the clock on the shield that I had bought, instead of relying on the clock on the Arduino board itself. To do this, I&#x27;d inserted a CR1220 battery and then tested with the following code:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;Wire.h&amp;gt;&#xA;#include &amp;lt;RTClib.h&amp;gt; // https://github.com/adafruit/RTClib&#xA;&#xA;RTC_DS1307 rtc;&#xA;&#xA;void setup() {&#xA;  // The clock won&#x27;t work with this (thanks https://arduino.stackexchange.com/a/44305!)&#xA;  Wire.begin();&#xA;&#xA;  bool rtcWasAlreadyConfigured;&#xA;  if (rtc.isrunning()) {&#xA;    rtcWasAlreadyConfigured = true;&#xA;  }&#xA;  else {&#xA;    rtc.adjust(DateTime(__DATE__, __TIME__));&#xA;    rtcWasAlreadyConfigured = false;&#xA;  }&#xA;&#xA;  Serial.begin(9600);&#xA;&#xA;  if (rtcWasAlreadyConfigured) {&#xA;    Serial.println(&amp;quot;setup: RTC is already running&amp;quot;);&#xA;  }&#xA;  else {&#xA;    Serial.println(&amp;quot;setup: RTC was not running, so it was set to the time of compilation&amp;quot;);&#xA;  }&#xA;}&#xA;&#xA;void loop() {&#xA;  DateTime now = rtc.now();&#xA;  Serial.print(&amp;quot;Year: &amp;quot;);&#xA;  Serial.print(now.year());&#xA;  Serial.print(&amp;quot; Month: &amp;quot;);&#xA;  Serial.print(now.month());&#xA;  Serial.print(&amp;quot; Day: &amp;quot;);&#xA;  Serial.print(now.day());&#xA;  Serial.print(&amp;quot; Hour: &amp;quot;);&#xA;  Serial.print(now.hour());&#xA;  Serial.print(&amp;quot; Minutes: &amp;quot;);&#xA;  Serial.print(now.minute());&#xA;  Serial.print(&amp;quot; Seconds: &amp;quot;);&#xA;  Serial.print(now.second());&#xA;  Serial.println();&#xA;&#xA;  delay(1000);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The first time you run this, you&#x27;ll see the first line say:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;setup: RTC was not running, so it was set to the time of compilation&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;.. and then you&#x27;ll see the date and time shown every second.&lt;/p&gt;&#xA;&lt;p&gt;If you remove the USB cable and then re-insert it then you&#x27;ll see the message:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;setup: RTC is already running&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;.. and then the date and time will continue to show every second &lt;em&gt;and it will be the correct date and time&lt;/em&gt; (it won&#x27;t have reset each time that the USB cable is connected and the &amp;quot;setup&amp;quot; function is run again).&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Gotcha Four:&lt;/strong&gt; When disconnecting and reconnecting the USB lead, sometimes (if not always) I need to close the Serial Monitor and then re-open it otherwise it won&#x27;t update and it will say that the COM port is busy if I try to upload a sketch to the board.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Gotcha Five:&lt;/strong&gt; I&#x27;ve seen a lot of examples use &amp;quot;RTC_Millis&amp;quot; instead of &amp;quot;RTC_DS1307&amp;quot; in timing code samples. This is &lt;em&gt;not&lt;/em&gt; what we want! That is a timer that is simulated by the board and it just uses the &amp;quot;millis()&amp;quot; function to track time which, as I explained earlier, is no good for persisting time across resets. We want to use &amp;quot;RTC_DS1307&amp;quot; because that uses the RTC on the shield, which &lt;em&gt;will&lt;/em&gt; maintain the time between power cycles due to the battery on the board.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Gotcha Six:&lt;/strong&gt; If you don&#x27;t include &amp;quot;Wire.h&amp;quot; and call &amp;quot;Wire.begin();&amp;quot; at the start of setup then the RTC won&#x27;t work properly and you will always get the same weird date displayed when you read it:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Year: 2165 Month: 165 Day: 165 Hour: 165 Minutes: 165 Seconds: 85&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3&gt;Step 3: An external power source&lt;/h3&gt;&#xA;&lt;p&gt;So far, the board has only been powered up when connected to the USB lead but this is not the only option. There are a few approaches that you can take; a regulated 5V input, the barrel-shaped power jack and the option of applying power to the vin and gnd pins on the board.&lt;/p&gt;&#xA;&lt;p&gt;The power jack makes most sense when you are connecting to some sort of wall wart but I want a &amp;quot;disconnected&amp;quot; power supply for outside. I did a bunch of reading on this and some people are just connecting a simple 9V battery to the vin/gnd pins but apparently that&#x27;s not very efficient - the amount of power stored in a standard MN1604 9V battery (the common kind that you might use in a smoke alarm) is comparatively low and the vin/gnd pins will be happy with something in the 6V-12V range and there is said to be more loss in regulating 9V to the internal 5V than there would be from a 6V supply.&lt;/p&gt;&#xA;&lt;p&gt;So I settled on a rechargable 6V sealed lead acid battery, which I believe is often used in big torches or in remote control cars. I got one for &#xA3;8 delivered from ebay that is stated to have 4.5Ah (which is a measure, essentially, of how much energy it stores) - for reference, a 9V battery will commonly have about 0.5Ah and so will run out much more quickly. Whatever battery you select, there are ways to eke out more life from them, which I&#x27;ll cover shortly.&lt;/p&gt;&#xA;&lt;p&gt;It&#x27;s completely safe to connect the battery to the vin/gnd ports at the same time as the USB lead is inserted, so you don&#x27;t have to worry about only providing power by the battery &lt;em&gt;or&lt;/em&gt; the USB lead and you can safely connect and disconnect the USB lead while the battery is connected as often as you like.&lt;/p&gt;&#xA;&lt;h3&gt;Step 4: Capturing light levels&lt;/h3&gt;&#xA;&lt;p&gt;The starter kit that I&#x27;ve got conveniently included an LDR (a &amp;quot;Light Dependent Resistor&amp;quot; aka a &amp;quot;photo-resistor&amp;quot;) and so I just had to work out how to connect that. I knew that the Arduino has a range of digital input/output pins and that it has some analog input pins but I had to remind myself of some basic electronics to put it all together.&lt;/p&gt;&#xA;&lt;p&gt;What you &lt;em&gt;can&#x27;t&lt;/em&gt; do is just put 5V into one pin of the LDR and connect the other end of the LDR straight into an analog pin. I&#x27;m going to try to make a stab at a simple explanation here and then refer you to someone who can explain it better!&lt;/p&gt;&#xA;&lt;p&gt;The analog pin will read a voltage value from between 0 and 5V and allow this to be read in code as a numeric value between 0 and 1023 (inclusive). When we talk about the 5V output pin, this only makes sense in the context of the ground of the board - so the concept of a 5V output with no gnd pin connection makes no sense, there is nothing for that 5V to be measured relative to. So what we need to do is use the varying resistance of the LDR and somehow translate that into a varying voltage to provide to an analog pin (I chose A0 in my build).&lt;/p&gt;&#xA;&lt;p&gt;The way to do this is with a &amp;quot;voltage divider&amp;quot;, which is essentially a circuit that looks a bit like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;gnd &amp;lt;--&amp;gt; resistor &amp;lt;--&amp;gt; connection-to-analog-input &amp;lt;--&amp;gt; LDR &amp;lt;--&amp;gt; 5V&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;If the resistance of the LDR happens to precisely match that resistance of the fixed resistor then precisely 2.5V will be delivered to the analog input. But if the LDR resistance is higher or lower than the fixed resistor&#x27;s value then a higher or lower voltage will be delivered to analog pin.&lt;/p&gt;&#xA;&lt;p&gt;There is a &lt;a href=&quot;https://learn.adafruit.com/photocells/using-a-photocell&quot;&gt;tutorial on learn.adafruit.com&lt;/a&gt; that does a much better job of explaining it! It also suggests what fixed resistor values that you might use for different environments (eg. are you more interested in granular light level readings at low light levels but don&#x27;t mind saturation at high levels or are you more interested in more granular readings at high levels and less granular at lower?) - at the moment, I&#x27;m still experimenting with a few different fixed resistor values to see which ones work for my particular climate.&lt;/p&gt;&#xA;&lt;p&gt;The shield that I&#x27;m using solder pads for mounting components onto but I wasn&#x27;t brave enough for that, so I&#x27;ve been using the pass-through pins and connecting them to the bread board that came with my starter kit.&lt;/p&gt;&#xA;&lt;p&gt;When it&#x27;s not connected to a power supply, it looks a bit like this:&lt;/p&gt;&#xA;&lt;img alt=&quot;The Arduino-plus-shield connected to an LDR on a breadboard&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/ArduinoWithBreadboardAlongside.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;The code to read the light level value looks like this (while running this code, try slowly moving your hand closer and further from covering the sensor to see the value change when it&#x27;s read each second) -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;void setup() {&#xA;  Serial.begin(9600);&#xA;}&#xA;&#xA;void loop() {&#xA;  Serial.print(&amp;quot;Light level reading: &amp;quot;);&#xA;  Serial.print(analogRead(0));&#xA;  Serial.println();&#xA;&#xA;  delay(1000);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;In an effort to start putting all of this together into a more robust package, I picked up a pack of self-adhesive felt pads from the supermarket and stuck them to appropriate points under the breadboard -&lt;/p&gt;&#xA;&lt;img alt=&quot;Felt pads to more easily align the breadboard on top of the Arduino and shield&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/ArduinoBreadboardFeltPads.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;img alt=&quot;Felt pads attached to the underside of the breadboard&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/ArduinoBreadboardWithFeltPadsAttached.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;.. and then I secured it all together with an elastic band:&lt;/p&gt;&#xA;&lt;img alt=&quot;Arduino plus shield plus breadboard secured in a tower&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/ArduinoTower.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;h3&gt;Step 5: Sleeping when not busy&lt;/h3&gt;&#xA;&lt;p&gt;In my ideal dream world, I would be able to leave my light level monitoring box outside for a few months. As I explained earlier, due to the direction that my garden faces, the hours at which the sun hits it fully varies by several hours depending upon the time of year. However, NO battery is going to last forever and even with this 4.5Ah battery that is at a 6V output (which is only a small jump down to regulate to 5V), the time that it can keep things running is limited.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Note: Recharging via a solar panel sounds interesting but it&#x27;s definitely a future iteration possibility at this point!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;There are, however, some things that can be done to eke out the duration of the battery by reducing the power usage of the board. There are ways to put the board into a &amp;quot;power down&amp;quot; state where it will do less - its timers will stop and its CPU can have a rest. There are tutorials out there about how to put it into this mode and have it only wake up on an &amp;quot;interrupt&amp;quot;, which can be an external circuit setting an input pin (maybe somehow using the RTC on the shield I&#x27;m using) &lt;em&gt;or&lt;/em&gt; using something called the &amp;quot;&lt;a href=&quot;https://create.arduino.cc/projecthub/rafitc/what-is-watchdog-timer-fffe20&quot;&gt;Watchdog Timer&lt;/a&gt;&amp;quot; that stays running on the Arduino even when it&#x27;s in power down mode.&lt;/p&gt;&#xA;&lt;p&gt;I read &lt;em&gt;a lot&lt;/em&gt; of posts and tutorials on this and I really struggled to get it to work. Until, finally, I came across this one: &lt;a href=&quot;https://circuitdigest.com/microcontroller-projects/arduino-sleep-modes-and-how-to-use-them-to-reduce-power-consumption&quot;&gt;Arduino Sleep Modes and How to use them to Save the Power&lt;/a&gt;. It explains in a clear table the difference between the different power-reduced modes (idle, power-save, power-down, etc..) &lt;em&gt;and&lt;/em&gt; it recommends a library called &amp;quot;&lt;a href=&quot;https://github.com/rocketscream/Low-Power&quot;&gt;Low-Power&lt;/a&gt;&amp;quot; that takes all of the hard work out of it.&lt;/p&gt;&#xA;&lt;p&gt;Whereas other tutorials talked about calling &amp;quot;sleep_enable()&amp;quot; and &amp;quot;set_sleep_mode(..)&amp;quot; functions and then using &amp;quot;attachInterrupt(..)&amp;quot; and adding some magic method to then undo all of those things, this library allows you to write a one-liner as follows:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This willl cause the board to go into its most power-saving mode for eight seconds (which is the longest that&#x27;s possible when relying upon its internal Watchdog Timer to wake it up).&lt;/p&gt;&#xA;&lt;p&gt;No muss, no fuss.&lt;/p&gt;&#xA;&lt;p&gt;I haven&#x27;t measured yet how long that my complete device can sit outside in its waterproof box on a single charge of a battery but I&#x27;m confident that it&#x27;s definitely measured in days, not hours - and that was &lt;em&gt;before&lt;/em&gt; introducing this &amp;quot;LowPower.powerDown(..)&amp;quot; call.&lt;/p&gt;&#xA;&lt;p&gt;Since I only want a reading every 30-60s, I call &amp;quot;LowPower.powerDown(..)&amp;quot; in a loop so that there are several 8s power down delays. While I haven&#x27;t confirmed this yet, I would be astonished if it didn&#x27;t last &lt;em&gt;at least&lt;/em&gt; a week out there on one charge. And if I have to bring it in some nights (when it&#x27;s dark and I don&#x27;t care about light measurements) to charge it, then that&#x27;s fine by me (though I&#x27;d like to be as infrequently as possible).&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Gotcha Seven:&lt;/strong&gt; When entering power-down mode, if you are connected to the USB port in order to use the Serial Monitor to watch what&#x27;s going on, ensure that you call &amp;quot;Serial.flush()&amp;quot; before entering power-down, otherwise the message might get buffered up and not fully sent through the serial connection before the board takes a nap.&lt;/p&gt;&#xA;&lt;h3&gt;Step 6: Preparing for the outdoors (in the British weather!)&lt;/h3&gt;&#xA;&lt;p&gt;I always associate the brand &amp;quot;&lt;a href=&quot;https://www.independent.co.uk/life-style/food-and-drink/how-tupperware-s-fate-was-sealed-a7899771.html&quot;&gt;Tupperware&lt;/a&gt;&amp;quot; as being a very British thing - it&#x27;s what we get packed lunches put into and what we get takeaway curries in. At least, I &lt;em&gt;think&lt;/em&gt; that it is - maybe it&#x27;s like &amp;quot;hoover&amp;quot;, where everyone uses the phrase &amp;quot;hoover&amp;quot; when they mean their generic vacuum cleaner. Regardless the origin, this seemed like the simplest way to make my device waterproof. The containers are not completely transparent but they shouldn&#x27;t make a significant impact on the light levels being recorded by the photo-resistor because they&#x27;re also far from opaque. And these containers are sealable, waterproof and come in all shapes and sizes!&lt;/p&gt;&#xA;&lt;p&gt;I took my elastic-band-wrapped &amp;quot;stack&amp;quot; of Arduino-plus-shield-plus-breadboard and connected it to the battery -&lt;/p&gt;&#xA;&lt;img alt=&quot;The Arduino &#x27;stack&#x27; connected to a battery&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/ArduinoStackWithBattery.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;.. and put in a plastic box. By turning the battery so that it was length-side-up, it was quite a snug fit and meant that the battery wouldn&#x27;t slide around inside the box. There wasn&#x27;t a lot of space for the stack to move around and so it seemed like quite a secure arrangement:&lt;/p&gt;&#xA;&lt;img alt=&quot;The Arduino &#x27;stack&#x27; and battery in its waterproof container&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/ArduinoInBox.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;h3&gt;Step 7: The final code&lt;/h3&gt;&#xA;&lt;p&gt;So far, each code sample has demonstrated &lt;em&gt;aspects&lt;/em&gt; of what I want to do but now it&#x27;s time to bring it all fully together.&lt;/p&gt;&#xA;&lt;p&gt;In trying to write the following code, I was reminded how much I&#x27;ve taken for granted in C# (and other higher level languages) with their string handling! I tried a little C and C&#x2B;&#x2B; &lt;em&gt;maaaaany&lt;/em&gt; years ago and so writing Arduino code was a bit of a throwback for me - at first, I was trying to make a char array for a filename and I set the length of the array to be the number of characters that were required for the filename.. silly me, I had forgotten that C strings need to be null-terminated and so you need an extra zero character at the end in order for things to work properly! Failing to do so would not result in a compile or run time error, it would just mean that the files weren&#x27;t written properly. Oh, how I&#x27;ve been spoilt! But, on the other hand, it also feels kinda good being this close to the &amp;quot;bare metal&amp;quot; :)&lt;/p&gt;&#xA;&lt;p&gt;The following sketch will record the light level about twice a minute to a file on the SD card where the filename is based upon the current date (as maintained by the RTC module and its CR1220 battery) -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;Wire.h&amp;gt;&#xA;#include &amp;lt;SdFat.h&amp;gt;    // https://github.com/greiman/SdFat&#xA;#include &amp;lt;RTClib.h&amp;gt;   // https://github.com/adafruit/RTClib&#xA;#include &amp;lt;LowPower.h&amp;gt; // https://github.com/rocketscream/Low-Power&#xA;&#xA;// chipSelect = 10 according to &amp;quot;Item description&amp;quot; section of&#xA;// https://www.play-zone.ch/de/dk-data-logging-shield-v1-0.html&#xA;#define SD_CHIP_SELECT 10&#xA;&#xA;RTC_DS1307 rtc;&#xA;&#xA;void setup() {&#xA;  // The clock won&#x27;t work with this (thanks https://arduino.stackexchange.com/a/44305!)&#xA;  Wire.begin();&#xA;&#xA;  bool rtcWasAlreadyConfigured;&#xA;  if (rtc.isrunning()) {&#xA;    rtcWasAlreadyConfigured = true;&#xA;  }&#xA;  else {&#xA;    rtc.adjust(DateTime(__DATE__, __TIME__));&#xA;    rtcWasAlreadyConfigured = false;&#xA;  }&#xA;&#xA;  Serial.begin(9600);&#xA;&#xA;  if (rtcWasAlreadyConfigured) {&#xA;    Serial.println(&amp;quot;setup: RTC is already running&amp;quot;);&#xA;  }&#xA;  else {&#xA;    Serial.println(&amp;quot;setup: RTC was not running, so it was set to the time of compilation&amp;quot;);&#xA;  }&#xA;}&#xA;&#xA;void loop() {&#xA;  // Character arrays need to be long enough to store the number of &amp;quot;real&amp;quot; characters plus the&#xA;  // null terminator&#xA;  char filename[13]; // yyyyMMdd.txt = 12 chars &#x2B; 1 null&#xA;  char timestamp[9]; // 00:00:00     =  8 chars &#x2B; 1 null&#xA;  DateTime now = rtc.now();&#xA;  snprintf(filename, sizeof(filename), &amp;quot;%04u%02u%02u.txt&amp;quot;, now.year(), now.month(), now.day());&#xA;  snprintf(timestamp, sizeof(timestamp), &amp;quot;%02u:%02u:%02u&amp;quot;, now.hour(), now.minute(), now.second());&#xA;&#xA;  int sensorValue = analogRead(0);&#xA;&#xA;  Serial.print(filename);&#xA;  Serial.print(&amp;quot; &amp;quot;);&#xA;  Serial.print(timestamp);&#xA;  Serial.print(&amp;quot; &amp;quot;);&#xA;  Serial.println(sensorValue);&#xA;&#xA;  SdFat sd;&#xA;  if (!sd.begin(SD_CHIP_SELECT, SPI_HALF_SPEED)) {&#xA;    Serial.println(&amp;quot;ERROR: sd.begin() failed&amp;quot;);&#xA;  }&#xA;  else {&#xA;    SdFile file;&#xA;    if (!file.open(filename, O_WRITE | O_APPEND | O_CREAT)) {&#xA;      Serial.println(&amp;quot;ERROR: file.open() failed - unable to write&amp;quot;);&#xA;    }&#xA;    else {&#xA;      file.print(timestamp);&#xA;      file.print(&amp;quot; Sensor value: &amp;quot;);&#xA;      file.println(sensorValue);&#xA;      file.close();&#xA;    }&#xA;  }&#xA;&#xA;  Serial.flush(); // Ensure we finish sending serial messages before going to sleep&#xA;&#xA;  // 4x 8s is close enough to a reading every 30s, which gives me plenty of data&#xA;  // - Using this instead of &amp;quot;delay&amp;quot; should mean that the battery will power the device for longer&#xA;  for (int i = 0; i &amp;lt; 3; i&#x2B;&#x2B;) {&#xA;    LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;At the moment, I&#x27;m bringing the box inside each night and then disconnecting the battery, pulling out the card and looking at the values recorded in the file to see if it&#x27;s clear when the sun was fully hitting the table that I had placed the box on.&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;ve only started doing this in the last couple of days and each day has been rather grey and so there haven&#x27;t been any sunny periods so that I can confirm that the readings clearly distinguish between &amp;quot;regular daylight&amp;quot; and &amp;quot;sun directly on the table&amp;quot;. Once I get some sun again, I&#x27;ll be able to get a better idea - and if I &lt;em&gt;can&#x27;t&lt;/em&gt; distinguish well enough then I&#x27;ll adjust the pull-down resistor that splits the voltage with the LDR and keep experimenting!&lt;/p&gt;&#xA;&lt;p&gt;When I&#x27;m happy with the configuration, &lt;em&gt;then&lt;/em&gt; I&#x27;ll start experimenting with leaving the box outside for longer to see how long this battery can last in conjunction with the &amp;quot;LowPower.powerDown(..)&amp;quot; calls. One obvious optimisation for my use case would be to continue keeping it in power-down mode between the hours of 10pm and 8am - partly because I know that it will definitely be dark after 10pm and partly because I am &lt;em&gt;not&lt;/em&gt; a morning person and so would not want to be outside before 8am, even if it &lt;em&gt;was&lt;/em&gt; streaming with light (which it wouldn&#x27;t be due to when my yard actually gets direct sunlight).&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Gotcha Eight:&lt;/strong&gt; The RTC has no awareness of daylight savings time and so I&#x27;ll need to take this into account when the clocks change in the UK. I&#x27;ll worry about this another day!&lt;/p&gt;&#xA;&lt;h3&gt;Step 8: Draw some graphs (one day)&lt;/h3&gt;&#xA;&lt;p&gt;As you can tell from the above, I&#x27;m still very much in the early phases of gathering data. But, at some point, I&#x27;m going to have to &lt;em&gt;use&lt;/em&gt; this data to predict when the yard will get sun for future dates - once I&#x27;ve got a few months of data for different times of year, hopefully I&#x27;ll be able to do so!&lt;/p&gt;&#xA;&lt;p&gt;I foresee a little bit of data-reading and Excel-graph-drawing in my future! There&#x27;s just something about seeing &lt;a href=&quot;https://www.productiverage.com/when-a-disk-cache-performs-better-than-an-inmemory-cache-befriending-the-net-gc&quot;&gt;results on a graph&lt;/a&gt; that make everything feel so much more real. As much as I&#x27;d like to be able to stare at 1000s of numbers and read them like the Matrix, seeing trends and curves plotted out just feels so much more satisfying and definitive. Maybe there will be a follow-up post with the results, though I feel that they would be much more personal and less useful to the general populace than even &lt;em&gt;my&lt;/em&gt; standard level of esoteric and niche blog posts! Maybe there are some graphs in my Twitter stream&#x27;s future!&lt;/p&gt;&#xA;&lt;p&gt;On the other hand.. if I learn any more power-saving techniques or have any follow-up information about how long these rechargeable torch-or-remote-control batteries last then maybe &lt;em&gt;that&lt;/em&gt; will be grounds for a follow-up!&lt;/p&gt;&#xA;&lt;p&gt;In the meantime, I hope you&#x27;ve enjoyed this little journey - and if you&#x27;ve tried to do anything similar with these cheap Deek Robot boards, then maybe the code samples here have been of use to you. I hope so! (Because, goodness knows, feeling like a beginner again and getting onto those new forums has been &lt;em&gt;quite&lt;/em&gt; an experience!)&lt;/p&gt;&#xA;</description>
                <pubDate>Sat, 22 Aug 2020 21:34:00 GMT</pubDate>
            </item>
            <item>
                <title>How are barcodes read?? (Library-less image processing in C#)</title>
                <link>https://www.productiverage.com/how-are-barcodes-read-libraryless-image-processing-in-c-sharp</link>
                <guid>https://www.productiverage.com/how-are-barcodes-read-libraryless-image-processing-in-c-sharp</guid>
                <description>&lt;p&gt;I&#x27;ve been using MyFitnessPal and it has the facility to load nutrition information by scanning the barcode on the product. I can guess how the retrieval works once the barcode number is obtained (a big database somewhere) but it struck me that I had no idea how the reading of the barcode &lt;em&gt;itself&lt;/em&gt; worked and.. well, I&#x27;m curious and enjoy the opportunity to learn something new to me by writing the code to do it. I do enjoy being able to look up (almost) anything on the internet to find out how it works!&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(For anyone who wants to either play along but not copy-paste the code themselves or for anyone who wants to jump to the end result, I&#x27;ve put the code - along with the example image I&#x27;ve used in this post - up on a &lt;a href=&quot;https://github.com/ProductiveRage/BarcodeReader&quot;&gt;GitHub repo&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3&gt;The plan of attack&lt;/h3&gt;&#xA;&lt;p&gt;There are two steps required here:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Read image and try to identify areas that look like barcodes&lt;/li&gt;&#xA;&lt;li&gt;Try to extract numbers from the looks-like-a-barcode regions&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;As with anything, these steps may be broken down into smaller tasks. The first step can be done like this:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Barcodes are black and white regions that have content that has steep &amp;quot;gradients&amp;quot; in image intensity horizontally (where there is a change from a black bar to a white space) and little change in intensity vertically (as each bar is a vertical line), so first we greyscale the image and then generate horizontal and vertical intensity gradients values for each point in the image and combine the values by subtracting vertical gradient from horizontal gradient&lt;/li&gt;&#xA;&lt;li&gt;These values are normalised so that they are all on the scale zero to one - this data could be portrayed as another greyscale image where the brightest parts are most likely to be within barcodes&lt;/li&gt;&#xA;&lt;li&gt;These values are then &amp;quot;spread out&amp;quot; or &amp;quot;blurred&amp;quot; and then a threshold value is applied where every value about it is changed into a 1 and every value below it a 0&lt;/li&gt;&#xA;&lt;li&gt;This &amp;quot;mask&amp;quot; (where every value is a 0 or 1) should have identified many of the pixels within the barcodes and we want to group these pixels into distinct objects&lt;/li&gt;&#xA;&lt;li&gt;There is a chance, though, that there could be gaps between bars that mean that a single barcode is spread across multiple masked-out objects and we need to try to piece them back together into one area (since the bars are tall and narrow, this may be done by considering a square area over every object and then combining objects whose squared areas overlap into one)&lt;/li&gt;&#xA;&lt;li&gt;This process will result in a list of areas that may be barcodes - any that are taller than they are wide are ignored (because barcode regions are always wider than they are tall)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The second step can be broken down into:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Take the maybe-barcode region of the image, greyscale it and then turn into a mask by setting any pixel with an intensity less than a particular threshold to zero and otherwise to one&lt;/li&gt;&#xA;&lt;li&gt;Take a horizontal slice across the image region - all of the pixels on the first row of the image - and change the zero-or-one raw data into a list of line lengths where a new line starts at any transition from zero-to-one or one-to-zero (so &amp;quot;01001000110&amp;quot; becomes &amp;quot;1,1,2,1,3,2,1&amp;quot; because there is 1x zero and then 1x one and then 2x zero and then 1x one, etc..)&lt;/li&gt;&#xA;&lt;li&gt;These line lengths should correspond to bar sizes (and space-between-bar sizes) if we&#x27;ve found a barcode - so run the values through the magic barcode bar-size-reading algorithm (see section 2.1 in &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2859730/&quot;&gt;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2859730/&lt;/a&gt;) and if we get a number (and the checksum is correct) then we&#x27;re done, hurrah!&lt;/li&gt;&#xA;&lt;li&gt;If we couldn&#x27;t get a number from this horizontal slice then move one pixel down and go back around&lt;/li&gt;&#xA;&lt;li&gt;If it was not possible to extract a number from any of the slices through the image region then it&#x27;s either not a barcode or it&#x27;s somehow so distorted in the image that we can&#x27;t read it&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;This approach is fairly resilient to changes in lighting and orientation because the barcode regions are still likely to have the highest horizontal intensity gradient whether the image is dark or light (and even if &lt;em&gt;part&lt;/em&gt; of the image is light and part of it is dark) and the barcode-reading algorithm works on ratios of bar/space-between-bar widths and these remain constant if the image is rotated.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(Some of the techniques are similar to things that I did in my &lt;a href=&quot;https://www.productiverage.com/face-or-no-face-finding-faces-in-photos-using-c-sharp-and-accordnet&quot;&gt;Face or no face (finding faces in photos using C# and Accord.NET)&lt;/a&gt; and so I&#x27;ll be using some of the same code shortly that I described then)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3&gt;Identifying maybe-barcode images&lt;/h3&gt;&#xA;&lt;p&gt;Let&#x27;s this image as an example to work with (peanut butter.. I &lt;em&gt;do&lt;/em&gt; love peanut butter) -&lt;/p&gt;&#xA;&lt;img alt=&quot;Delicious peanut butter&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;Before looking at any code, let&#x27;s visualise the process.&lt;/p&gt;&#xA;&lt;p&gt;We&#x27;re going to consider horizontal and vertical gradient intensity maps - at every point in the image we either look to the pixels to the left and to the right (for the horizontal gradient) or we look at the pixels above and below (for the vertical gradient) and the larger the change, the brighter the pixel in the gradient intensity map&lt;/p&gt;&#xA;&lt;img alt=&quot;Horizontal gradient intensity&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-HorizontalAndVerticalGradients.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;And when they&#x27;re combined by subtracting the vertical gradient at each point from the horizontal gradient, it looks lke this:&lt;/p&gt;&#xA;&lt;img alt=&quot;Combined gradient intensity&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-CombinedGradients.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;If this image is blurred then we get this:&lt;/p&gt;&#xA;&lt;img alt=&quot;Blurred combined gradient intensity&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-Blurred.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;.. and if we create a binary mask by saying &amp;quot;normalise the intensity values so that their range goes from zero (for the darkest pixel) to one (for the brightest) and then set any pixels that are in the bottom third in terms of intensity to 0 and set the rest to 1&amp;quot; then we get this:&lt;/p&gt;&#xA;&lt;img alt=&quot;Mask of possibly-part-of-a-barcode areas&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-Mask.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;If each distinct area (where an &amp;quot;area&amp;quot; means &amp;quot;a group of pixels that are connected&amp;quot;) is identified and squares overlaid and centered around the areas then we see this:&lt;/p&gt;&#xA;&lt;img alt=&quot;Mask of possibly-part-of-a-barcode areas, extended into squared areas&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-MaskSquares.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;.. and if the areas whose bounding squares overlap are combined and then cropped around the white pixels then we end up with this:&lt;/p&gt;&#xA;&lt;img alt=&quot;Combined possibly-a-barcode areas&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-MaskSquaresCombined.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;This has identified the area around the barcode and also two tiny other areas - when we come to trying to read barcode numbers out of these, the tiny regions will result in no value while the area around the genuine barcode content &lt;em&gt;should&lt;/em&gt; result in a number successfully being read. But I&#x27;m getting ahead of myself.. let&#x27;s look at the code required to perform the above transformations.&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;m going to start with a &lt;strong&gt;DataRectangle&lt;/strong&gt; for performing transformations -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public static class DataRectangle&#xA;{&#xA;    public static DataRectangle&amp;lt;T&amp;gt; For&amp;lt;T&amp;gt;(T[,] values) =&amp;gt; new DataRectangle&amp;lt;T&amp;gt;(values);&#xA;}&#xA;&#xA;public sealed class DataRectangle&amp;lt;T&amp;gt;&#xA;{&#xA;    private readonly T[,] _protectedValues;&#xA;    public DataRectangle(T[,] values) : this(values, isolationCopyMayBeBypassed: false) { }&#xA;    private DataRectangle(T[,] values, bool isolationCopyMayBeBypassed)&#xA;    {&#xA;        if ((values.GetLowerBound(0) != 0) || (values.GetLowerBound(1) != 0))&#xA;            throw new ArgumentException(&amp;quot;Both dimensions must have lower bound zero&amp;quot;);&#xA;        var arrayWidth = values.GetUpperBound(0) &#x2B; 1;&#xA;        var arrayHeight = values.GetUpperBound(1) &#x2B; 1;&#xA;        if ((arrayWidth == 0) || (arrayHeight == 0))&#xA;            throw new ArgumentException(&amp;quot;zero element arrays are not supported&amp;quot;);&#xA;&#xA;        Width = arrayWidth;&#xA;        Height = arrayHeight;&#xA;&#xA;        if (isolationCopyMayBeBypassed)&#xA;            _protectedValues = values;&#xA;        else&#xA;        {&#xA;            _protectedValues = new T[Width, Height];&#xA;            Array.Copy(values, _protectedValues, Width * Height);&#xA;        }&#xA;    }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// This will always be greater than zero&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    public int Width { get; }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// This will always be greater than zero&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    public int Height { get; }&#xA;&#xA;    public T this[int x, int y]&#xA;    {&#xA;        get&#xA;        {&#xA;            if ((x &amp;lt; 0) || (x &amp;gt;= Width))&#xA;                throw new ArgumentOutOfRangeException(nameof(x));&#xA;            if ((y &amp;lt; 0) || (y &amp;gt;= Height))&#xA;                throw new ArgumentOutOfRangeException(nameof(y));&#xA;            return _protectedValues[x, y];&#xA;        }&#xA;    }&#xA;&#xA;    public IEnumerable&amp;lt;Tuple&amp;lt;Point, T&amp;gt;&amp;gt; Enumerate(Func&amp;lt;Point, T, bool&amp;gt;? optionalFilter = null)&#xA;    {&#xA;        for (var x = 0; x &amp;lt; Width; x&#x2B;&#x2B;)&#xA;        {&#xA;            for (var y = 0; y &amp;lt; Height; y&#x2B;&#x2B;)&#xA;            {&#xA;                var value = _protectedValues[x, y];&#xA;                var point = new Point(x, y);&#xA;                if (optionalFilter?.Invoke(point, value) ?? true)&#xA;                    yield return Tuple.Create(point, value);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public DataRectangle&amp;lt;TResult&amp;gt; Transform&amp;lt;TResult&amp;gt;(Func&amp;lt;T, TResult&amp;gt; transformer)&#xA;    {&#xA;        return Transform((value, coordinates) =&amp;gt; transformer(value));&#xA;    }&#xA;&#xA;    public DataRectangle&amp;lt;TResult&amp;gt; Transform&amp;lt;TResult&amp;gt;(Func&amp;lt;T, Point, TResult&amp;gt; transformer)&#xA;    {&#xA;        var transformed = new TResult[Width, Height];&#xA;        for (var x = 0; x &amp;lt; Width; x&#x2B;&#x2B;)&#xA;        {&#xA;            for (var y = 0; y &amp;lt; Height; y&#x2B;&#x2B;)&#xA;                transformed[x, y] = transformer(_protectedValues[x, y], new Point(x, y));&#xA;        }&#xA;        return new DataRectangle&amp;lt;TResult&amp;gt;(transformed, isolationCopyMayBeBypassed: true);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;And then I&#x27;m going to add a way to load image data into this structure -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public static class BitmapExtensions&#xA;{&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// This will return values in the range 0-255 (inclusive)&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    // Based on http://stackoverflow.com/a/4748383/3813189&#xA;    public static DataRectangle&amp;lt;double&amp;gt; GetGreyscale(this Bitmap image)&#xA;    {&#xA;        var values = new double[image.Width, image.Height];&#xA;        var data = image.LockBits(&#xA;            new Rectangle(0, 0, image.Width, image.Height),&#xA;            ImageLockMode.ReadOnly,&#xA;            PixelFormat.Format24bppRgb&#xA;        );&#xA;        try&#xA;        {&#xA;            var pixelData = new Byte[data.Stride];&#xA;            for (var lineIndex = 0; lineIndex &amp;lt; data.Height; lineIndex&#x2B;&#x2B;)&#xA;            {&#xA;                Marshal.Copy(&#xA;                    source: data.Scan0 &#x2B; (lineIndex * data.Stride),&#xA;                    destination: pixelData,&#xA;                    startIndex: 0,&#xA;                    length: data.Stride&#xA;                );&#xA;                for (var pixelOffset = 0; pixelOffset &amp;lt; data.Width; pixelOffset&#x2B;&#x2B;)&#xA;                {&#xA;                    // Note: PixelFormat.Format24bppRgb means the data is stored in memory as BGR&#xA;                    const int PixelWidth = 3;&#xA;                    var r = pixelData[pixelOffset * PixelWidth &#x2B; 2];&#xA;                    var g = pixelData[pixelOffset * PixelWidth &#x2B; 1];&#xA;                    var b = pixelData[pixelOffset * PixelWidth];&#xA;                    values[pixelOffset, lineIndex] = (0.2989 * r) &#x2B; (0.5870 * g) &#x2B; (0.1140 * b);&#xA;                }&#xA;            }&#xA;        }&#xA;        finally&#xA;        {&#xA;            image.UnlockBits(data);&#xA;        }&#xA;        return DataRectangle.For(values);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;With these classes, we can load an image and calculate the combined horizontal-gradient-minus-vertical-gradient value like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static IEnumerable&amp;lt;Rectangle&amp;gt; GetPossibleBarcodeAreasForBitmap(Bitmap image)&#xA;{&#xA;    var greyScaleImageData = image.GetGreyscale();&#xA;    var combinedGradients = greyScaleImageData.Transform((intensity, pos) =&amp;gt;&#xA;    {&#xA;        // Consider gradients to be zero at the edges of the image because there aren&#x27;t pixels&#xA;        // both left/right or above/below and so it&#x27;s not possible to calculate a real value&#xA;        var horizontalChange = (pos.X == 0) || (pos.X == greyScaleImageData.Width - 1)&#xA;            ? 0&#xA;            : greyScaleImageData[pos.X &#x2B; 1, pos.Y] - greyScaleImageData[pos.X - 1, pos.Y];&#xA;        var verticalChange = (pos.Y == 0) || (pos.Y == greyScaleImageData.Height - 1)&#xA;            ? 0&#xA;            : greyScaleImageData[pos.X, pos.Y &#x2B; 1] - greyScaleImageData[pos.X, pos.Y - 1];&#xA;        return Math.Max(0, Math.Abs(horizontalChange) - Math.Abs(verticalChange));&#xA;    });&#xA;&#xA;    // .. more will go here soon&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Before jumping straight into the image analysis, though, it&#x27;s worth resizing the source image if it&#x27;s large. Since this stage of the processing is looking for areas that look approximately like barcodes, we don&#x27;t require a lot of granularity - I&#x27;m envisaging (as with the MyFitnessPal use case) source images where the barcode takes up a significant space in the image and is roughly aligned with the view port* and so resizing the image such that the largest side is 300px should work well. If you wanted to scan an image where there were many barcodes to process (or even where there was only one but it was very small) then you might want to allow larger inputs than this - the more data that there is, though, the more work that must be done and the slower that the processing will be!&lt;/p&gt;&#xA;&lt;p&gt;* &lt;em&gt;(The barcode has to be roughly aligned with the viewport because the approaching of looking for areas with large horizontal variance in intensity with minor vertical variance would not work - as we&#x27;ll see later, though, there is considerable margin for error in this approach and perfect alignment is not required)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;A naive approach to this would be force the image so that its largest side is 300px, regardless of what it was originally. However, this is unnecessary if the largest side is already less than 300px (scaling it up will actually give us more work to do) and if the largest side is not much more than 300px then it&#x27;s probably not worth doing either - scaling it down may make any barcodes areas fuzzy and risk reducing the effectiveness of the processing while not actually reducing the required work. So I&#x27;m going to say that if the largest side of the image is 450px or larger than resize it so that its largest side is 300px and do nothing otherwise. To achieve that, we need a method like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static DataRectangle&amp;lt;double&amp;gt; GetGreyscaleData(&#xA;    Bitmap image,&#xA;    int resizeIfLargestSideGreaterThan,&#xA;    int resizeTo)&#xA;{&#xA;    var largestSide = Math.Max(image.Width, image.Height);&#xA;    if (largestSide &amp;lt;= resizeIfLargestSideGreaterThan)&#xA;        return image.GetGreyscale();&#xA;&#xA;    int width, height;&#xA;    if (image.Width &amp;gt; image.Height)&#xA;    {&#xA;        width = resizeTo;&#xA;        height = (int)(((double)image.Height / image.Width) * width);&#xA;    }&#xA;    else&#xA;    {&#xA;        height = resizeTo;&#xA;        width = (int)(((double)image.Width / image.Height) * height);&#xA;    }&#xA;    using var resizedImage = new Bitmap(image, width, height);&#xA;    return resizedImage.GetGreyscale();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The next steps are to &amp;quot;normalise&amp;quot; the combined intensity variance values so that they fit the range zero-to-one, to &amp;quot;blur&amp;quot; this data and to then create a binary mask where the brighter pixels get set to one and the darker pixels get set to zero. In other words, to extend the code earlier (that calculated the intensity variance values) like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static IEnumerable&amp;lt;Rectangle&amp;gt; GetPossibleBarcodeAreasForBitmap(Bitmap image)&#xA;{&#xA;    var greyScaleImageData = GetGreyscaleData(&#xA;        image,&#xA;        resizeIfLargestSideGreaterThan: 450,&#xA;        resizeTo: 300&#xA;    );&#xA;    var combinedGradients = greyScaleImageData.Transform((intensity, pos) =&amp;gt;&#xA;    {&#xA;        // Consider gradients to be zero at the edges of the image because there aren&#x27;t pixels&#xA;        // both left/right or above/below and so it&#x27;s not possible to calculate a real value&#xA;        var horizontalChange = (pos.X == 0) || (pos.X == greyScaleImageData.Width - 1)&#xA;            ? 0&#xA;            : greyScaleImageData[pos.X &#x2B; 1, pos.Y] - greyScaleImageData[pos.X - 1, pos.Y];&#xA;        var verticalChange = (pos.Y == 0) || (pos.Y == greyScaleImageData.Height - 1)&#xA;            ? 0&#xA;            : greyScaleImageData[pos.X, pos.Y &#x2B; 1] - greyScaleImageData[pos.X, pos.Y - 1];&#xA;        return Math.Max(0, Math.Abs(horizontalChange) - Math.Abs(verticalChange));&#xA;    });&#xA;&#xA;    const int maxRadiusForGradientBlurring = 2;&#xA;    const double thresholdForMaskingGradients = 1d / 3;&#xA;&#xA;    var mask = Blur(Normalise(combinedGradients), maxRadiusForGradientBlurring)&#xA;        .Transform(value =&amp;gt; (value &amp;gt;= thresholdForMaskingGradients));&#xA;&#xA;    // .. more will go here soon&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;To do that we, need a &amp;quot;Normalise&amp;quot; method - which is simple:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static DataRectangle&amp;lt;double&amp;gt; Normalise(DataRectangle&amp;lt;double&amp;gt; values)&#xA;{&#xA;    var max = values.Enumerate().Max(pointAndValue =&amp;gt; pointAndValue.Item2);&#xA;    return (max == 0)&#xA;        ? values&#xA;        : values.Transform(value =&amp;gt; (value / max));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and a &amp;quot;Blur&amp;quot; method - which is a little less simple but hopefully still easy enough to follow &lt;em&gt;(for every point, look at the points around it and take an average of all of them; it just looks for a square area, which is fine for small &amp;quot;maxRadius&amp;quot; values but which might be better implemented as a circular area if large &amp;quot;maxRadius&amp;quot; values might be needed, which they aren&#x27;t in this code):&lt;/em&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static DataRectangle&amp;lt;double&amp;gt; Blur(DataRectangle&amp;lt;double&amp;gt; values, int maxRadius)&#xA;{&#xA;    return values.Transform((value, point) =&amp;gt;&#xA;    {&#xA;        var valuesInArea = new List&amp;lt;double&amp;gt;();&#xA;        for (var x = -maxRadius; x &amp;lt;= maxRadius; x&#x2B;&#x2B;)&#xA;        {&#xA;            for (var y = -maxRadius; y &amp;lt;= maxRadius; y&#x2B;&#x2B;)&#xA;            {&#xA;                var newPoint = new Point(point.X &#x2B; x, point.Y &#x2B; y);&#xA;                if ((newPoint.X &amp;lt; 0) || (newPoint.Y &amp;lt; 0)&#xA;                || (newPoint.X &amp;gt;= values.Width) || (newPoint.Y &amp;gt;= values.Height))&#xA;                    continue;&#xA;                valuesInArea.Add(values[newPoint.X, newPoint.Y]);&#xA;            }&#xA;        }&#xA;        return valuesInArea.Average();&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This gets us to this point:&lt;/p&gt;&#xA;&lt;img alt=&quot;Mask of possibly-part-of-a-barcode areas&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-Mask.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;.. which feels like good progress!&lt;/p&gt;&#xA;&lt;p&gt;Now we need to try to identify distinct &amp;quot;islands&amp;quot; of pixels where each &amp;quot;island&amp;quot; or &amp;quot;object&amp;quot; is a set of points that are within a single connected area. A straightforward way to do that is to look at every point in the mask that is set to 1 and either:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Perform a pixel-style &amp;quot;flood fill&amp;quot; starting at this point in order to find other points in an object&lt;/li&gt;&#xA;&lt;li&gt;If this pixel has already been included in such a fill operation, do nothing (because it&#x27;s already been accounted for)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;This was made easier for me by reading the article &lt;a href=&quot;https://simpledevcode.wordpress.com/2015/12/29/flood-fill-algorithm-using-c-net/&quot;&gt;Flood Fill algorithm (using C#.Net)&lt;/a&gt;..&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static IEnumerable&amp;lt;IEnumerable&amp;lt;Point&amp;gt;&amp;gt; GetDistinctObjects(DataRectangle&amp;lt;bool&amp;gt; mask)&#xA;{&#xA;    // Flood fill areas in the looks-like-bar-code mask to create distinct areas&#xA;    var allPoints = new HashSet&amp;lt;Point&amp;gt;(&#xA;        mask.Enumerate(optionalFilter: (point, isMasked) =&amp;gt; isMasked).Select(point =&amp;gt; point.Item1)&#xA;    );&#xA;    while (allPoints.Any())&#xA;    {&#xA;        var currentPoint = allPoints.First();&#xA;        var pointsInObject = GetPointsInObject(currentPoint).ToArray();&#xA;        foreach (var point in pointsInObject)&#xA;            allPoints.Remove(point);&#xA;        yield return pointsInObject;&#xA;    }&#xA;&#xA;    // Inspired by code at&#xA;    // https://simpledevcode.wordpress.com/2015/12/29/flood-fill-algorithm-using-c-net/&#xA;    IEnumerable&amp;lt;Point&amp;gt; GetPointsInObject(Point startAt)&#xA;    {&#xA;        var pixels = new Stack&amp;lt;Point&amp;gt;();&#xA;        pixels.Push(startAt);&#xA;&#xA;        var valueAtOriginPoint = mask[startAt.X, startAt.Y];&#xA;        var filledPixels = new HashSet&amp;lt;Point&amp;gt;();&#xA;        while (pixels.Count &amp;gt; 0)&#xA;        {&#xA;            var currentPoint = pixels.Pop();&#xA;            if ((currentPoint.X &amp;lt; 0) || (currentPoint.X &amp;gt;= mask.Width)&#xA;            || (currentPoint.Y &amp;lt; 0) || (currentPoint.Y &amp;gt;= mask.Height))&#xA;                continue;&#xA;&#xA;            if ((mask[currentPoint.X, currentPoint.Y] == valueAtOriginPoint)&#xA;            &amp;amp;&amp;amp; !filledPixels.Contains(currentPoint))&#xA;            {&#xA;                filledPixels.Add(new Point(currentPoint.X, currentPoint.Y));&#xA;                pixels.Push(new Point(currentPoint.X - 1, currentPoint.Y));&#xA;                pixels.Push(new Point(currentPoint.X &#x2B; 1, currentPoint.Y));&#xA;                pixels.Push(new Point(currentPoint.X, currentPoint.Y - 1));&#xA;                pixels.Push(new Point(currentPoint.X, currentPoint.Y &#x2B; 1));&#xA;            }&#xA;        }&#xA;        return filledPixels;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The problem is that, even with the blurring we performed, there will likely be some groups of distinct objects that are actually part of a single barcode. These areas need to be joined together. It&#x27;s quite possible for there to be relatively large gaps in the middle of barcodes (there is in the example that we&#x27;ve been looking at) and so we might not easily be able to just take the distinct objects that we&#x27;ve got and join together areas that seem &amp;quot;close enough&amp;quot;.&lt;/p&gt;&#xA;&lt;img alt=&quot;Areas that are possibly part of a barcode&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-MaskObjects.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;On the basis that individual bars in a barcode are tall compared to the largest possible width that any of them can be (which I&#x27;ll go into more detail about later on), it seems like a reasonable idea to take any areas that are taller than they are wide and expand their width until they become square. That would give us this:&lt;/p&gt;&#xA;&lt;img alt=&quot;Mask of possibly-part-of-a-barcode areas, extended into squared areas&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-MaskSquares.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;We&#x27;d then work out which of these &amp;quot;squared off&amp;quot; rectangles overlap (if any) and replace overlapping rectangles with rectangles that cover their combined areas, which would look like this:&lt;/p&gt;&#xA;&lt;img alt=&quot;Overlapping squared-off areas that have been combined&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-MaskSquaresCombinedPreTrimmed.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;The only problem with this is that the combined rectangles extend too far to the left and right of the areas, so we need to trim them down. The will be fairly straightforward because we have the information about what distinct objects there are and each object is just a list of points - so we work out which objects have points within each of the combined bounding areas and then we work out which out of all of the objects for each combined area has the smallest &amp;quot;x&amp;quot; value and smallest &amp;quot;y&amp;quot; value and which have the largest values. That way, we can change the combined bounding areas to only cover actual barcode pixels. Which would leave us with this:&lt;/p&gt;&#xA;&lt;img alt=&quot;Combined possibly-a-barcode areas&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-MaskSquaresCombined.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;That might sound like a lot of complicated work but if we take a bit of a brute force* approach to it then it can be expressed like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static IEnumerable&amp;lt;Rectangle&amp;gt; GetOverlappingObjectBounds(&#xA;    IEnumerable&amp;lt;IEnumerable&amp;lt;Point&amp;gt;&amp;gt; objects)&#xA;{&#xA;    // Translate each &amp;quot;object&amp;quot; (a list of connected points) into a bounding box (squared off if&#xA;    // it was taller than it was wide)&#xA;    var squaredOffBoundedObjects = new HashSet&amp;lt;Rectangle&amp;gt;(&#xA;        objects.Select((points, index) =&amp;gt;&#xA;        {&#xA;            var bounds = Rectangle.FromLTRB(&#xA;                points.Min(p =&amp;gt; p.X),&#xA;                points.Min(p =&amp;gt; p.Y),&#xA;                points.Max(p =&amp;gt; p.X) &#x2B; 1,&#xA;                points.Max(p =&amp;gt; p.Y) &#x2B; 1&#xA;            );&#xA;            if (bounds.Height &amp;gt; bounds.Width)&#xA;                bounds.Inflate((bounds.Height - bounds.Width) / 2, 0);&#xA;            return bounds;&#xA;        })&#xA;    );&#xA;&#xA;    // Loop over the boundedObjects and reduce the collection by merging any two rectangles&#xA;    // that overlap and then starting again until there are no more bounds merges to perform&#xA;    while (true)&#xA;    {&#xA;        var combinedOverlappingAreas = false;&#xA;        foreach (var bounds in squaredOffBoundedObjects)&#xA;        {&#xA;            foreach (var otherBounds in squaredOffBoundedObjects)&#xA;            {&#xA;                if (otherBounds == bounds)&#xA;                    continue;&#xA;&#xA;                if (bounds.IntersectsWith(otherBounds))&#xA;                {&#xA;                    squaredOffBoundedObjects.Remove(bounds);&#xA;                    squaredOffBoundedObjects.Remove(otherBounds);&#xA;                    squaredOffBoundedObjects.Add(Rectangle.FromLTRB(&#xA;                        Math.Min(bounds.Left, otherBounds.Left),&#xA;                        Math.Min(bounds.Top, otherBounds.Top),&#xA;                        Math.Max(bounds.Right, otherBounds.Right),&#xA;                        Math.Max(bounds.Bottom, otherBounds.Bottom)&#xA;                    ));&#xA;                    combinedOverlappingAreas = true;&#xA;                    break;&#xA;                }&#xA;            }&#xA;            if (combinedOverlappingAreas)&#xA;                break;&#xA;        }&#xA;        if (!combinedOverlappingAreas)&#xA;            break;&#xA;    }&#xA;&#xA;    return squaredOffBoundedObjects.Select(bounds =&amp;gt;&#xA;    {&#xA;        var allPointsWithinBounds = objects&#xA;            .Where(points =&amp;gt; points.Any(point =&amp;gt; bounds.Contains(point)))&#xA;            .SelectMany(points =&amp;gt; points)&#xA;            .ToArray(); // Don&#x27;t re-evaluate in the four accesses below&#xA;        return Rectangle.FromLTRB(&#xA;            left: allPointsWithinBounds.Min(p =&amp;gt; p.X),&#xA;            right: allPointsWithinBounds.Max(p =&amp;gt; p.X) &#x2B; 1,&#xA;            top: allPointsWithinBounds.Min(p =&amp;gt; p.Y),&#xA;            bottom: allPointsWithinBounds.Max(p =&amp;gt; p.Y) &#x2B; 1&#xA;        );&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;* &lt;em&gt;(There are definitely more efficient ways that this could be done but since we&#x27;re only looking at 300px images then we&#x27;re not likely to end up with huge amounts of data to deal with)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;To complete the process, we need to do three more things:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Since barcodes are wider than they are tall, we can discard any regions that don&#x27;t fit this shape (of which there are two in the example image)&lt;/li&gt;&#xA;&lt;li&gt;The remaining regions are expanded a little across so that they more clearly surround the barcode region, rather than being butted right up to it (this will make the barcode reading process a little easier)&lt;/li&gt;&#xA;&lt;li&gt;As the regions that have been identified may well be on a resized version of the source image, they may need to scaled up so that they correctly apply to the source&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;To do that, we&#x27;ll start from this code that we saw earlier:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var mask = Blur(Normalise(combinedGradients), maxRadiusForGradientBlurring)&#xA;    .Transform(value =&amp;gt; (value &amp;gt;= thresholdForMaskingGradients));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and expand it like so (removing the &amp;quot;// .. more will go here soon&amp;quot; comment), using the methods above:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Determine how much the image was scaled down (if it had to be scaled down at all)&#xA;// by comparing the width of the potentially-scaled-down data to the source image&#xA;var reducedImageSideBy = (double)image.Width / greyScaleImageData.Width;&#xA;&#xA;var mask = Blur(Normalise(combinedGradients), maxRadiusForGradientBlurring)&#xA;    .Transform(value =&amp;gt; (value &amp;gt;= thresholdForMaskingGradients));&#xA;&#xA;return GetOverlappingObjectBounds(GetDistinctObjects(mask))&#xA;    .Where(boundedObject =&amp;gt; boundedObject.Width &amp;gt; boundedObject.Height)&#xA;    .Select(boundedObject =&amp;gt;&#xA;    {&#xA;        var expandedBounds = boundedObject;&#xA;        expandedBounds.Inflate(width: expandedBounds.Width / 10, height: 0);&#xA;        expandedBounds.Intersect(&#xA;            Rectangle.FromLTRB(0, 0, greyScaleImageData.Width, greyScaleImageData.Height)&#xA;        );&#xA;        return new Rectangle(&#xA;            x: (int)(expandedBounds.X * reducedImageSideBy),&#xA;            y: (int)(expandedBounds.Y * reducedImageSideBy),&#xA;            width: (int)(expandedBounds.Width * reducedImageSideBy),&#xA;            height: (int)(expandedBounds.Height * reducedImageSideBy)&#xA;        );&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The final result is that the barcode has been successfully located on the image - hurrah!&lt;/p&gt;&#xA;&lt;img alt=&quot;Barcode located!&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-Identified.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;With this information, we should be able to extract regions or &amp;quot;sub images&amp;quot; from the source image and attempt to decipher the barcode value in it (presuming that there IS a bar code in it and we haven&#x27;t got a false positive match).&lt;/p&gt;&#xA;&lt;p&gt;As we&#x27;ll see in a moment, the barcode doesn&#x27;t have to be perfectly lined up - some rotation is acceptable (depending upon the image, up to around 20 or 30 degrees should be fine). The MyFitnessPal app has a couple of fallbacks that I&#x27;ve noticed, such as being able to read barcodes that are upside down or even back to front (which can happen if a barcode is scanned from the wrong side of a transparent wrapper). While I won&#x27;t be writing code here for either of those approaches, I&#x27;m sure that you could envisage how it could be done - the source image data could be processed as described here and then, if no barcode is read, rotated 180 degrees and re-processed and reversed and re-processed, etc..&lt;/p&gt;&#xA;&lt;h3&gt;How to read a bar code&lt;/h3&gt;&#xA;&lt;p&gt;A barcode is comprised of both black and white bars - so it&#x27;s not just the black parts that are significant, it is the spaces between them as well.&lt;/p&gt;&#xA;&lt;p&gt;The format of a barcode is as follows:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Three single-width bars (a black one, a white one and another black one) that are used to gauge what is considered to be a &amp;quot;single width&amp;quot;&lt;/li&gt;&#xA;&lt;li&gt;Information for six numbers then appears, where each number is encoded by a sequence of four bars (white, black, white, black) - particular combinations of bar widths relate to particular digits (see below)&lt;/li&gt;&#xA;&lt;li&gt;Another guard section appears with five single width bars (white, black, white, black, white)&lt;/li&gt;&#xA;&lt;li&gt;Six more numbers appear (using the same bar-width-combinations encoding as before but the groups of four bars are now black, white, black, white)&lt;/li&gt;&#xA;&lt;li&gt;A final guard section of three single width bards (black, white, black)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The numbers are encoded using the following system:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt; Digit      Bar widths&#xA;&#xA;   0        3, 2, 1, 1&#xA;   1        2, 2, 2, 1&#xA;   2        2, 1, 2, 2&#xA;   3        1, 4, 1, 1&#xA;   4        1, 1, 3, 2&#xA;   5        1, 2, 3, 1&#xA;   6        1, 1, 1, 4&#xA;   7        1, 3, 1, 2&#xA;   8        1, 2, 1, 3&#xA;   9        3, 1, 1, 2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;em&gt;(Note that every combination of values totals 7 when they added up - this is very helpful later!)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;To see what that looks like in the real world, here&#x27;s a slice of that barcode from the jar of peanut butter with each section and each numberic value identified:&lt;/p&gt;&#xA;&lt;img alt=&quot;Barcode numbers interpreted&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-AnnotatedValues.png&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;&lt;em&gt;(I should point out that the article &lt;a href=&quot;https://habr.com/en/post/439768/&quot;&gt;How does a barcode work?&lt;/a&gt; was extremely helpful in the research I did for this post and I&#x27;m very grateful to the author for having written it in such an approachable manner!)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Any combination of bar widths that is not found in the table is considered to be invalid. On the one hand, you might think that this a potential loss; the format could support more combinations of bar widths to encode more values and then more data could be packed into the same space. There is an advantage, however, to having relatively few valid combinations of bar widths - it makes easier to tell whether the information being read appears to be correct. If a combination is encountered that seems incorrect then the read attempt should be aborted and retried. The format has existed for decades and it would make sense, bearing that in mind, to prioritise making it easier for the hardware to read rather prioritising trying to cram as much data in there as possible. There is &lt;em&gt;also&lt;/em&gt; a checksum included in the numerical data to try to catch any &amp;quot;misreads&amp;quot; but when working with low resolutions or hardware with little computing power, the easier that it is to bail out of a scan and to retry the better.&lt;/p&gt;&#xA;&lt;p&gt;The way to tackle the reading is to:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Convert the sub image to greyscale&lt;/li&gt;&#xA;&lt;li&gt;Create a binary mask so that the darker pixels become 0 and the lighter ones become 1&lt;/li&gt;&#xA;&lt;li&gt;Take a single line across the area&lt;/li&gt;&#xA;&lt;li&gt;Change the individual 1s and 0s into lengths of continuous &amp;quot;runs&amp;quot; of values&#xA;&lt;ul&gt;&#xA;&lt;li&gt;eg. 0001100 would become 3, 2, 2 because there are three 0s then two 1s and then two 0s&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;These runs of values will represent the different sized (black and white) bars that were encountered&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For a larger image, each run length will be longer than for a small image but that won&#x27;t matter because when we encounter runs of four bar length values that we think should be interpreted as a single digit, we&#x27;ll do some dividing to try to guess the average size of a single width bar&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Take these runs of values, skip through the expected guard regions and try to interpret each set of four bars that is thought to represent a digit of the bar code as that digit&lt;/li&gt;&#xA;&lt;li&gt;If successful then perform a checksum calculation on the output and return the value ass a success if it meets expectations&lt;/li&gt;&#xA;&lt;li&gt;If the line couldn&#x27;t be interpreted as a barcode or the checksum calculation fails then take the next line down and go back to step 4&lt;/li&gt;&#xA;&lt;li&gt;If there are no more lines to attempt then a barcode could not be identified in the image&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;This processing is fairly light computationally and so there is no need to resize the &amp;quot;may be a barcode&amp;quot; image region before attempting the work. In fact, it&#x27;s benefical to &lt;em&gt;not&lt;/em&gt; shrink it as shrinking it will likely make the barcode section fuzzier and that makes the above steps less likely to work - the ideal case for creating a binary mask is where there is no significant &amp;quot;seepage&amp;quot; of pixel intensity between the black bar areas and the white bar areas. That&#x27;s not to say that the images have to be crystal clear or perfectly aligned with the camera because the redundancy built into the format works in our favour here - if one line across the image can&#x27;t be read because it&#x27;s fuzzy then there&#x27;s a good chance that one of the other lines will be legible.&lt;/p&gt;&#xA;&lt;p&gt;60 length values is the precise number that we expect to find - there is expected to be some blank space before the barcode starts (1) and then a guard section of three single-width lines that we use to gauge bar width (3) and then six numbers that are encoded in four bars each (6x4=24) and then a guard section of five single-width lines (5) and then six numbers (6x4=24) and then a final guard region of three single-width bars, giving 1&#x2B;3&#x2B;24&#x2B;5&#x2B;24&#x2B;3=60.&lt;/p&gt;&#xA;&lt;p&gt;There will likely be another section of blank content after the barcode that we ignore&lt;/p&gt;&#xA;&lt;p&gt;If we don&#x27;t want to validate the final guard region then we can work with a barcode image where some of the end of cut off, so long as the data for the 12 digits is there; in this case, 57 lengths if the minimum number that we can accept&lt;/p&gt;&#xA;&lt;h3&gt;Reading the numeric value with code&lt;/h3&gt;&#xA;&lt;p&gt;I&#x27;m going to try to present the code in approximately the same order as the steps presented above. So, firstly we need to convert the sub image to greyscale and create a binary mark from it. Then we&#x27;ll go line by line down the image data and try to read a value. So we&#x27;ll take this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public static string? TryToReadBarcodeValue(Bitmap subImage)&#xA;{&#xA;    const double threshold = 0.5;&#xA;&#xA;     // Black lines are considered 1 and so we set to true if it&#x27;s a dark pixel (and 0 if light)&#xA;    var mask = subImage.GetGreyscale().Transform(intensity =&amp;gt; intensity &amp;lt; (256 * threshold));&#xA;    for (var y = 0; y &amp;lt; mask.Height; y&#x2B;&#x2B;)&#xA;    {&#xA;        var value = TryToReadBarcodeValueFromSingleLine(mask, y);&#xA;        if (value is object)&#xA;            return value;&#xA;    }&#xA;    return null;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and the read-each-slice-of-the-image code looks like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static string? TryToReadBarcodeValueFromSingleLine(&#xA;    DataRectangle&amp;lt;bool&amp;gt; barcodeDetails,&#xA;    int sliceY)&#xA;{&#xA;    if ((sliceY &amp;lt; 0) || (sliceY &amp;gt;= barcodeDetails.Height))&#xA;        throw new ArgumentOutOfRangeException(nameof(sliceY));&#xA;&#xA;    var lengths = GetBarLengthsFromBarcodeSlice(barcodeDetails, sliceY).ToArray();&#xA;    if (lengths.Length &amp;lt; 57)&#xA;    {&#xA;        // As explained, we&#x27;d like 60 bars (which would include the final guard region) but we&#xA;        // can still make an attempt with 57 (but no fewer)&#xA;        // - There will often be another section of blank content after the barcode that we ignore&#xA;        // - If we don&#x27;t want to validate the final guard region then we can work with a barcode&#xA;        //   image where some of the end is cut off, so long as the data for the 12 digits is&#xA;        //   there (this will be the case where there are only 57 lengths)&#xA;        return null;&#xA;    }&#xA;&#xA;    var offset = 0;&#xA;    var extractedNumericValues = new List&amp;lt;int&amp;gt;();&#xA;    for (var i = 0; i &amp;lt; 14; i&#x2B;&#x2B;)&#xA;    {&#xA;        if (i == 0)&#xA;        {&#xA;            // This should be the first guard region and it should be a pattern of three single-&#xA;            // width bars&#xA;            offset &#x2B;= 3;&#xA;        }&#xA;        else if (i == 7)&#xA;        {&#xA;            // This should be the guard region in the middle of the barcode and it should be a&#xA;            // pattern of five single-width bars&#xA;            offset &#x2B;= 5;&#xA;        }&#xA;        else&#xA;        {&#xA;            var value = TryToGetValueForLengths(&#xA;                lengths[offset],&#xA;                lengths[offset &#x2B; 1],&#xA;                lengths[offset &#x2B; 2],&#xA;                lengths[offset &#x2B; 3]&#xA;            );&#xA;            if (value is null)&#xA;                return null;&#xA;            extractedNumericValues.Add(value.Value);&#xA;            offset &#x2B;= 4;&#xA;        }&#xA;    }&#xA;&#xA;    // Calculate what the checksum should be based upon the first 11 numbers and ensure that&#xA;    // the 12th matches it&#xA;    if (extractedNumericValues.Last() != CalculateChecksum(extractedNumericValues.Take(11)))&#xA;        return null;&#xA;&#xA;    return string.Join(&amp;quot;&amp;quot;, extractedNumericValues);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;With the code below, we find the runs of continous 0 or 1 lengths that will represent bars are return that list (again, for larger images each run will be longer and for smaller images each run will be shorter but this will be taken care of later) -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static IEnumerable&amp;lt;int&amp;gt; GetBarLengthsFromBarcodeSlice(&#xA;    DataRectangle&amp;lt;bool&amp;gt; barcodeDetails,&#xA;    int sliceY)&#xA;{&#xA;    if ((sliceY &amp;lt; 0) || (sliceY &amp;gt;= barcodeDetails.Height))&#xA;        throw new ArgumentOutOfRangeException(nameof(sliceY));&#xA;&#xA;    // Take the horizontal slice of the data&#xA;    var values = new List&amp;lt;bool&amp;gt;();&#xA;    for (var x = 0; x &amp;lt; barcodeDetails.Width; x&#x2B;&#x2B;)&#xA;        values.Add(barcodeDetails[x, sliceY]);&#xA;&#xA;    // Split the slice into bars - we only care about how long each segment is when they&#xA;    // alternate, not whether they&#x27;re dark bars or light bars&#xA;    var segments = new List&amp;lt;Tuple&amp;lt;bool, int&amp;gt;&amp;gt;();&#xA;    foreach (var value in values)&#xA;    {&#xA;        if ((segments.Count == 0) || (segments[^1].Item1 != value))&#xA;            segments.Add(Tuple.Create(value, 1));&#xA;        else&#xA;            segments[^1] = Tuple.Create(value, segments[^1].Item2 &#x2B; 1);&#xA;    }&#xA;    if ((segments.Count &amp;gt; 0) &amp;amp;&amp;amp; !segments[0].Item1)&#xA;    {&#xA;        // Remove the white space before the first bar&#xA;        segments.RemoveAt(0);&#xA;    }&#xA;    return segments.Select(segment =&amp;gt; segment.Item2);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Now we need to implement the &amp;quot;TryToGetValueForLengths&amp;quot; method that &amp;quot;TryToReadBarcodeValueFromSingleLine&amp;quot; calls. This takes four bar lengths that are thought to represent a single digit in the bar code value (they are not part of a guard region or anything like that). It take those four bar lengths and guesses how many pixels across a single bar would be - which is made my simpler by the fact that all of the possible combinations of bar lengths in the lookup chart that we saw earlier add up to 7.&lt;/p&gt;&#xA;&lt;p&gt;There&#x27;s a little flexibility introduced here to try to account for a low quality image or if the threshold was a bit strong in the creation of the binary mask; we&#x27;ll take that calculated expected width of a single bar and tweak it up or down a little if apply that division to the bar lengths means that we made some of the bars too small that they disappeared or too large and it seemed like the total width would be more than seven single estimated-width bars. There&#x27;s only a &lt;em&gt;little&lt;/em&gt; flexibility here because if we fail then we can always try another line of the image! (Or maybe it will turn out that this sub image was a false positive match and there isn&#x27;t a bar code in it at all).&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static int? TryToGetValueForLengths(int l0, int l1, int l2, int l3)&#xA;{&#xA;    if (l0 &amp;lt;= 0)&#xA;        throw new ArgumentOutOfRangeException(nameof(l0));&#xA;    if (l1 &amp;lt;= 0)&#xA;        throw new ArgumentOutOfRangeException(nameof(l1));&#xA;    if (l2 &amp;lt;= 0)&#xA;        throw new ArgumentOutOfRangeException(nameof(l2));&#xA;    if (l3 &amp;lt;= 0)&#xA;        throw new ArgumentOutOfRangeException(nameof(l3));&#xA;&#xA;    // Take a guess at what the width of a single bar is based upon these four values&#xA;    // (the four bars that encode a number should add up to a width of seven)&#xA;    var raw = new[] { l0, l1, l2, l3 };&#xA;    var singleWidth = raw.Sum() / 7d;&#xA;    var adjustment = singleWidth / 10;&#xA;    var attemptedSingleWidths = new HashSet&amp;lt;double&amp;gt;();&#xA;    while (true)&#xA;    {&#xA;        var normalised = raw.Select(x =&amp;gt; Math.Max(1, (int)Math.Round(x / singleWidth))).ToArray();&#xA;        var sum = normalised.Sum();&#xA;        if (sum == 7)&#xA;            return TryToGetNumericValue(normalised[0], normalised[1], normalised[2], normalised[3]);&#xA;&#xA;        attemptedSingleWidths.Add(singleWidth);&#xA;        if (sum &amp;gt; 7)&#xA;            singleWidth &#x2B;= adjustment;&#xA;        else&#xA;            singleWidth -= adjustment;&#xA;        if (attemptedSingleWidths.Contains(singleWidth))&#xA;        {&#xA;            // If we&#x27;ve already tried this width-of-a-single-bar value then give up -&#xA;            // it doesn&#x27;t seem like we can make the input values make sense&#xA;            return null;&#xA;        }&#xA;    }&#xA;&#xA;    static int? TryToGetNumericValue(int i0, int i1, int i2, int i3)&#xA;    {&#xA;        var lookFor = string.Join(&amp;quot;&amp;quot;, new[] { i0, i1, i2, i3 });&#xA;        var lookup = new[]&#xA;        {&#xA;            // These values correspond to the lookup chart shown earlier&#xA;            &amp;quot;3211&amp;quot;, &amp;quot;2221&amp;quot;, &amp;quot;2122&amp;quot;, &amp;quot;1411&amp;quot;, &amp;quot;1132&amp;quot;, &amp;quot;1231&amp;quot;, &amp;quot;1114&amp;quot;, &amp;quot;1312&amp;quot;, &amp;quot;1213&amp;quot;, &amp;quot;3112&amp;quot;&#xA;        };&#xA;        for (var i = 0; i &amp;lt; lookup.Length; i&#x2B;&#x2B;)&#xA;        {&#xA;            if (lookFor == lookup[i])&#xA;                return i;&#xA;        }&#xA;        return null;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Finally we need the CalculateChecksum method (as noted in the code, there&#x27;s a great explanation of how to do this in &lt;a href=&quot;https://en.wikipedia.org/wiki/Check_digit#UPC&quot;&gt;wikipedia&lt;/a&gt;) -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static int CalculateChecksum(IEnumerable&amp;lt;int&amp;gt; values)&#xA;{&#xA;    if (values == null)&#xA;        throw new ArgumentNullException(nameof(values));&#xA;    if (values.Count() != 11)&#xA;        throw new ArgumentException(&amp;quot;Should be provided with precisely 11 values&amp;quot;);&#xA;&#xA;    // See https://en.wikipedia.org/wiki/Check_digit#UPC&#xA;    var checksumTotal = values&#xA;        .Select((value, index) =&amp;gt; (index % 2 == 0) ? (value * 3) : value)&#xA;        .Sum();&#xA;    var checksumModulo = checksumTotal % 10;&#xA;    if (checksumModulo != 0)&#xA;        checksumModulo = 10 - checksumModulo;&#xA;    return checksumModulo;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;With this code, we have executed all of the planned steps outlined before.&lt;/p&gt;&#xA;&lt;p&gt;It should be noted that, even with the small amount of flexibility in the &amp;quot;TryToGetValueForLengths&amp;quot; method, in the peanut butter bar code example it requires 15 calls to &amp;quot;GetBarLengthsFromBarcodeSlice&amp;quot; until a bar code is successfully matched! Presumably, this is because there is a little more distortion further up the bar code due to the curve of the jar.&lt;/p&gt;&#xA;&lt;p&gt;That&#x27;s not to say, however, that this approach to bar reading is particularly fussy. The redundancy and simplicity, not to mention the &lt;em&gt;size&lt;/em&gt; of the average bar code, means that there is plenty of opportunity to try reading a sub image in multiple slices until one of them does match. In fact, I mentioned earlier that the barcode doesn&#x27;t have to be perfectly at 90 degrees in order to be interpretable and that some rotation is acceptable. This hopefully makes some intuitive sense based upon the logic above and how it doesn&#x27;t matter how long each individual bar code line is because they are averaged out - if a bar code was rotated a little and then a read was attempted of it line by line then the ratios between each line should remain consistent and the same data should be readable.&lt;/p&gt;&#xA;&lt;p&gt;To illustrate, here&#x27;s a zoomed-in section of the middle of the peanut butter bar code in the orientation shown so far:&lt;/p&gt;&#xA;&lt;img alt=&quot;A strip of the peanut butter jar&#x27;s bar code&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-SingleStrip.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;If we then rotate it like this:&lt;/p&gt;&#xA;&lt;img alt=&quot;The peanut butter jar rotated slightly&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-Rotated.png&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;.. then the code above will still read the value correctly because a strip across the rotated bar code looks like this:&lt;/p&gt;&#xA;&lt;img alt=&quot;A strip of the peanut butter jar&#x27;s bar code from the rotated image&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-SingleStripFromRotated.png&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;Hopefully it&#x27;s clear enough that, for each given line, the ratios are essentially the same as for the non-rotated strip:&lt;/p&gt;&#xA;&lt;img alt=&quot;A strip of the peanut butter jar&#x27;s bar code&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/PeanutBarcode-SingleStrip.jpg&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&#xA;&lt;p&gt;To get a reading from an image that is rotated more than this requires a very clear source image and will still be limited by the first stage of processing - that tried to find sections where the horizontal image intensity changed with steep gradients but the vertical intensity did not. If the image is rotated too much then there will be more vertical image intensity differences encountered and it is less likely to identify it as a &amp;quot;maybe a bar code&amp;quot; region.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(Note: I experimented with rotated images that were produced by an online barcode generator and had more success - meaning that I could rotate them more than I could with real photographs - but that&#x27;s because those images are generated with stark black and white and the horizontal / vertical intensity gradients are maintained for longer when the image is rotated if they start with such a high level of clarity.. I&#x27;m more interested in reading values from real photographs and so I would suggest that only fairly moderate rotation will work - though it would still be plenty for an MyFitnessPal-type app that expects the User to hold the bar code in roughly the right orientation!)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3&gt;Tying it all together&lt;/h3&gt;&#xA;&lt;p&gt;We&#x27;ve looked at the separate steps involved in the whole reading process, all that is left is to combine them. The &amp;quot;GetPossibleBarcodeAreasForBitmap&amp;quot; and &amp;quot;TryToReadBarcodeValue&amp;quot; methods can be put together into a fully functioning program like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;static void Main()&#xA;{&#xA;    using var image = new Bitmap(&amp;quot;Source.jpg&amp;quot;);&#xA;&#xA;    var barcodeValues = new List&amp;lt;string&amp;gt;();&#xA;    foreach (var area in GetPossibleBarcodeAreasForBitmap(image))&#xA;    {&#xA;        using var areaBitmap = new Bitmap(area.Width, area.Height);&#xA;        using (var g = Graphics.FromImage(areaBitmap))&#xA;        {&#xA;            g.DrawImage(&#xA;                image,&#xA;                destRect: new Rectangle(0, 0, areaBitmap.Width, areaBitmap.Height),&#xA;                srcRect: area,&#xA;                srcUnit: GraphicsUnit.Pixel&#xA;            );&#xA;        }&#xA;        var valueFromBarcode = TryToReadBarcodeValue(areaBitmap);&#xA;        if (valueFromBarcode is object)&#xA;            barcodeValues.Add(valueFromBarcode);&#xA;    }&#xA;&#xA;    if (!barcodeValues.Any())&#xA;        Console.WriteLine(&amp;quot;Couldn&#x27;t read any bar codes from the source image :(&amp;quot;);&#xA;    else&#xA;    {&#xA;        Console.WriteLine(&amp;quot;Read the following bar code(s) from the image:&amp;quot;);&#xA;        foreach (var barcodeValue in barcodeValues)&#xA;            Console.WriteLine(&amp;quot;- &amp;quot; &#x2B; barcodeValue);&#xA;    }&#xA;&#xA;    Console.WriteLine();&#xA;    Console.WriteLine(&amp;quot;Press [Enter] to terminate..&amp;quot;);&#xA;    Console.ReadLine();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3&gt;Finito!&lt;/h3&gt;&#xA;&lt;p&gt;And with that, we&#x27;re finally done! I must admit that I started writing this post about three years ago and it&#x27;s been in my TODO list for a loooooong time now. But I&#x27;ve taken a week off work and been able to catch up with a few things and have finally been able to cross it off the list. And I&#x27;m quite relieved that I didn&#x27;t give up on it entirely because it was a fun little project and coming back to it now allowed me to tidy it up a bit with the newer C# 8 syntax and even enable the nullable reference types option on the project (I sure do hate unintentional nulls being allowed to sneak in!)&lt;/p&gt;&#xA;&lt;p&gt;A quick reminder if you want to see it in action or play about it yourself, the &lt;a href=&quot;https://github.com/ProductiveRage/BarcodeReader&quot;&gt;GitHub repo is here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Thanks to anyone that read this far!&lt;/p&gt;&#xA;</description>
                <pubDate>Fri, 07 Aug 2020 23:24:00 GMT</pubDate>
            </item>
            <item>
                <title>Removing ALL assembly names in Json.NET TypeNameHandling output</title>
                <link>https://www.productiverage.com/removing-all-assembly-names-in-jsonnet-typenamehandling-output</link>
                <guid>https://www.productiverage.com/removing-all-assembly-names-in-jsonnet-typenamehandling-output</guid>
                <description>&lt;p&gt;In some cases, it may be desirable to include type name information in &lt;a href=&quot;https://www.newtonsoft.com/json&quot;&gt;Json.NET&lt;/a&gt; output but for those type names to not include assembly names.&lt;/p&gt;&#xA;&lt;p&gt;In my case it&#x27;s because I have a &lt;a href=&quot;https://dev.to/rionmonster/sharing-is-caring-using-shared-projects-in-aspnet-e17&quot;&gt;Shared Project&lt;/a&gt; that contains classes that I want to appear in my .NET Core C# server code and in my &lt;a href=&quot;https://bridge.net/&quot;&gt;Bridge.NET&lt;/a&gt; client code and this results in the class names existing in assemblies with different names (but there are also other people with their own cases, such as &lt;a href=&quot;https://stackoverflow.com/questions/8039910/how-do-i-omit-the-assembly-name-from-the-type-name-while-serializing-and-deseria&quot;&gt;How do I omit the assembly name from the type name while serializing and deserializing in JSON.Net?&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Json.NET has support for customising how the type names are emitted and there is an answer in the Stack Overflow question that I linked just above that points to an &lt;a href=&quot;http://james.newtonking.com/archive/2011/11/19/json-net-4-0-release-4-bug-fixes&quot;&gt;article&lt;/a&gt; written by the Json.NET author illustrating how to do it. Essentially, you create a custom serialization binder that looks a bit like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public sealed class TypeNameAssemblyExcludingSerializationBinder : ISerializationBinder&#xA;{&#xA;    public static TypeNameAssemblyExcludingSerializationBinder Instance { get; }&#xA;        = new TypeNameAssemblyExcludingSerializationBinder();&#xA;&#xA;    private TypeNameAssemblyExcludingSerializationBinder() { }&#xA;&#xA;    public void BindToName(Type serializedType, out string assemblyName, out string typeName)&#xA;    {&#xA;        assemblyName = null;&#xA;        typeName = serializedType.FullName;&#xA;    }&#xA;&#xA;    public Type BindToType(string assemblyName, string typeName)&#xA;    {&#xA;        // Note: Some additional work may be required here if the assembly name has been removed&#xA;        // and you are not loading a type from the current assembly or one of the core libraries&#xA;        return Type.GetType(typeName);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Then you serialise your content something like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var json = JsonConvert.SerializeObject(&#xA;    new ExampleClass(123, &amp;quot;Test&amp;quot;),&#xA;    new JsonSerializerSettings&#xA;    {&#xA;        Formatting = Formatting.Indented,&#xA;        TypeNameHandling = TypeNameHandling.All,&#xA;        SerializationBinder = TypeNameAssemblyExcludingSerializationBinder.Instance&#xA;    }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;If the &lt;strong&gt;ExampleClass&lt;/strong&gt; looked like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public sealed class ExampleClass&#xA;{&#xA;    public ExampleClass(int key, string name)&#xA;    {&#xA;        Key = key;&#xA;        Name = name;&#xA;    }&#xA;    public int Key { get; }&#xA;    public string Name { get; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and was in a namespace called &amp;quot;Tester&amp;quot; then the resulting JSON would look like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &amp;quot;$type&amp;quot;: &amp;quot;Tester.ExampleClass&amp;quot;,&#xA;  &amp;quot;Key&amp;quot;: 123,&#xA;  &amp;quot;Name&amp;quot;: &amp;quot;Test&amp;quot;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;To make the difference clear, if the custom serialisation binder had not been used (and if the containing assembly was also called &amp;quot;Tester&amp;quot;) then the JSON would have looked like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &amp;quot;$type&amp;quot;: &amp;quot;Tester.ExampleClass, Tester&amp;quot;,&#xA;  &amp;quot;Key&amp;quot;: 123,&#xA;  &amp;quot;Name&amp;quot;: &amp;quot;Test&amp;quot;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;So.. problem solved!&lt;/p&gt;&#xA;&lt;p&gt;Yes?&lt;/p&gt;&#xA;&lt;p&gt;No.&lt;/p&gt;&#xA;&lt;h3&gt;ISerializationBinder is not applied to generic type parameters&lt;/h3&gt;&#xA;&lt;p&gt;While everything was hunkydory in the example above, there are cases where it isn&#x27;t. For example, if we wanted to serialise a &lt;em&gt;list&lt;/em&gt; of &lt;strong&gt;ExampleClass&lt;/strong&gt; instances then we&#x27;d have code like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var json = JsonConvert.SerializeObject(&#xA;    new List&amp;lt;ExampleClass&amp;gt; { new ExampleClass(123, &amp;quot;Test&amp;quot;) },&#xA;    new JsonSerializerSettings&#xA;    {&#xA;        Formatting = Formatting.Indented,&#xA;        TypeNameHandling = TypeNameHandling.All,&#xA;        SerializationBinder = TypeNameAssemblyExcludingSerializationBinder.Instance&#xA;    }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and the resulting JSON would look like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &amp;quot;$type&amp;quot;: &amp;quot;System.Collections.Generic.List`1[[Tester.ExampleClass, Tester]]&amp;quot;,&#xA;  &amp;quot;$values&amp;quot;: [&#xA;    {&#xA;      &amp;quot;$type&amp;quot;: &amp;quot;Tester.ExampleClass&amp;quot;,&#xA;      &amp;quot;Key&amp;quot;: 123,&#xA;      &amp;quot;Name&amp;quot;: &amp;quot;Test&amp;quot;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Without the custom serialisation binder, it would have looked like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &amp;quot;$type&amp;quot;: &amp;quot;System.Collections.Generic.List`1[[Tester.ExampleClass, Tester]], System.Private.CoreLib&amp;quot;,&#xA;  &amp;quot;$values&amp;quot;: [&#xA;    {&#xA;      &amp;quot;$type&amp;quot;: &amp;quot;Tester.ExampleClass, Tester&amp;quot;,&#xA;      &amp;quot;Key&amp;quot;: 123,&#xA;      &amp;quot;Name&amp;quot;: &amp;quot;Test&amp;quot;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and so we&#x27;ve successfully removed &lt;em&gt;some&lt;/em&gt; of the assembly names as there is no mention of &amp;quot;System.Private.CoreLib&amp;quot; in the List&#x27;s type and the $type string for the &lt;strong&gt;ExampleClass&lt;/strong&gt; instance no longer mentions the &amp;quot;Tester&amp;quot; assembly name but the generic type of the List &lt;em&gt;does&lt;/em&gt; mention the &amp;quot;Tester&amp;quot; assembly name and we were trying to prevent assembly names from appearing in the type data!&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;ve had a good Google around this and there doesn&#x27;t seem to be a definitive answer anywhere and I had a need for one, so I&#x27;ve put together a solution that does what I need. There is an answer to a similar(ish) stack overflow question &lt;a href=&quot;https://stackoverflow.com/a/19927484/3813189&quot;&gt;here&lt;/a&gt; but it ends with a disclaimer that the regex provided would need tweaking to support nested types and &lt;strong&gt;a)&lt;/strong&gt; I definitely wanted to support nested generic type parameters (eg. a Dictionary that maps string keys to List-of-int values) and &lt;strong&gt;b)&lt;/strong&gt; regexes and me are not the best of friends - hence my going about it my own way!&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public sealed class TypeNameAssemblyExcludingSerializationBinder : ISerializationBinder&#xA;{&#xA;    public static TypeNameAssemblyExcludingSerializationBinder Instance { get; }&#xA;        = new TypeNameAssemblyExcludingSerializationBinder();&#xA;    private TypeNameAssemblyExcludingSerializationBinder() { }&#xA;&#xA;    public void BindToName(Type serializedType, out string assemblyName, out string typeName)&#xA;    {&#xA;        // Note: Setting the assemblyName to null here will only remove it from the main type itself -&#xA;        // it won&#x27;t remove it from any types specified as generic type parameters (that&#x27;s what the&#xA;        // RemoveAssemblyNames method is needed for)&#xA;        assemblyName = null;&#xA;        typeName = RemoveAssemblyNames(serializedType.FullName);&#xA;    }&#xA;&#xA;    public Type BindToType(string assemblyName, string typeName)&#xA;    {&#xA;        // Note: Some additional work may be required here if the assembly name has been removed&#xA;        // and you are not loading a type from the current assembly or one of the core libraries&#xA;        return Type.GetType(typeName);&#xA;    }&#xA;&#xA;    private static string RemoveAssemblyNames(string typeName)&#xA;    {&#xA;        var index = 0;&#xA;        var content = new StringBuilder();&#xA;        RecusivelyRemoveAssemblyNames();&#xA;        return content.ToString();&#xA;&#xA;        void RecusivelyRemoveAssemblyNames()&#xA;        {&#xA;            // If we started inside a type name - eg.&#xA;            //&#xA;            //   &amp;quot;System.Int32, System.Private.CoreLib&amp;quot;&#xA;            //&#xA;            // .. then we want to look for the comma that separates the type name from the assembly&#xA;            // information and ignore that content. If we started inside nested generic type content&#xA;            // - eg.&#xA;            //&#xA;            //  &amp;quot;[System.Int32, System.Private.CoreLib], [System.String, System.Private.CoreLib]&amp;quot;&#xA;            //&#xA;            // .. then we do NOT want to start ignoring content after any commas encountered. So&#xA;            // it&#x27;s important to know here which case we&#x27;re in.&#xA;            var insideTypeName = typeName[index] != &#x27;[&#x27;;&#xA;&#xA;            var ignoreContent = false;&#xA;            while (index &amp;lt; typeName.Length)&#xA;            {&#xA;                var c = typeName[index];&#xA;                index&#x2B;&#x2B;;&#xA;&#xA;                if (insideTypeName &amp;amp;&amp;amp; (c == &#x27;,&#x27;))&#xA;                {&#xA;                    ignoreContent = true;&#xA;                    continue;&#xA;                }&#xA;&#xA;                if (!ignoreContent)&#xA;                    content.Append(c);&#xA;&#xA;                if (c == &#x27;[&#x27;)&#xA;                    RecusivelyRemoveAssemblyNames();&#xA;                else if (c == &#x27;]&#x27;)&#xA;                {&#xA;                    if (ignoreContent)&#xA;                    {&#xA;                        // If we encountered a comma that indicated that we were about to start&#xA;                        // an assembly name then we&#x27;ll have stopped adding content to the string&#xA;                        // builder but we don&#x27;t want to lose this closing brace, so explicitly&#xA;                        // add it in if that&#x27;s the case&#xA;                        content.Append(c);&#xA;                    }&#xA;                    break;&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3&gt;A note about resolving types from type names (without assemblies)&lt;/h3&gt;&#xA;&lt;p&gt;In .NET, the &amp;quot;Type.GetType&amp;quot; method will return null if it is given a type name that does not correspond to a type that exists in either the current assembly or in one of the core .NET libraries. In Bridge.NET, it doesn&#x27;t appear that they maintained that requirement and I believe that all types are available, even if an assembly name is not specified - but whether it is or isn&#x27;t, a similar approach could be used in both cases where you use reflection to look at all loaded assemblies and all of their available types and try to map assembly-name-less type names onto one of those. Getting into this would be completely out of the scope of this post and I&#x27;m hoping that you already have an idea in mind if you had got to the point where you wanted to remove all assembly names from your type metadata!&lt;/p&gt;&#xA;</description>
                <pubDate>Tue, 04 Aug 2020 17:25:00 GMT</pubDate>
            </item>
            <item>
                <title>Private / local C# analysers (without NuGet)</title>
                <link>https://www.productiverage.com/private-local-c-sharp-analysers-without-nuget</link>
                <guid>https://www.productiverage.com/private-local-c-sharp-analysers-without-nuget</guid>
                <description>&lt;p&gt;(&lt;strong&gt;Note:&lt;/strong&gt; The information here depends upon the &amp;quot;new&amp;quot; .csproj format being used.. but it&#x27;s not that new any more, so hopefully that&#x27;s not a limitation for too many people)&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;m a big fan of writing analysers to catch common mistakes at compile time rather than run time. For example, the &lt;a href=&quot;https://github.com/ProductiveRage/DanSerialiser&quot;&gt;DanSerialiser&lt;/a&gt;, &lt;a href=&quot;https://github.com/ProductiveRage/Bridge.Immutable&quot;&gt;Bridge.Immutable&lt;/a&gt; and &lt;a href=&quot;https://github.com/ProductiveRage/ProductiveRage.SealedClassVerification&quot;&gt;ProductiveRage.SealedClassVerification&lt;/a&gt; libraries that I&#x27;ve published all include some. The way that they&#x27;re traditionally distributed is as a NuGet package that installs the analyser into the desired project, which is great if you&#x27;re publishing a public package that you expect to be installed via nuget.org. But what if you wanted to create a non-public analyser for something that you were working on, can you do so &lt;em&gt;without&lt;/em&gt; creating a NuGet package? Yes.. but with some caveats.&lt;/p&gt;&#xA;&lt;p&gt;If you&#x27;re still interested then read on for the details!&lt;/p&gt;&#xA;&lt;p&gt;(For anyone who finds themselves in the &lt;strong&gt;&amp;quot;too lazy; didn&#x27;t read&amp;quot;&lt;/strong&gt; category, hopefully this gives you enough information as to whether to continue or not)&lt;/p&gt;&#xA;&lt;h3&gt;What I wish existed&lt;/h3&gt;&#xA;&lt;p&gt;Actually, before I talk about what I wish already existed (but which, unfortunately, does &lt;em&gt;not&lt;/em&gt; exist), I&#x27;ll get one option out of the way first; nuget.org is not the only place that NuGet packages can be published to. If you decided that you wanted to write an analyser for some conventions internal to your company then you could create a NuGet package and publish it on an &lt;em&gt;internal&lt;/em&gt; NuGet feed. It&#x27;s pretty easy and you have a range of options such as a private NuGet feed service within your network, a private hosted service (possible with MyGet, I believe) or you can even chuck all of your private NuGet .nupkg files into a folder (on your local computer or, I presume, on a network - though I&#x27;ve not tested that option) and then add that as a NuGet feed in Visual Studio. This &lt;em&gt;is&lt;/em&gt; straight forward but, still, occasionally I wish that it was possible to include an analyser project as part of a solution and have that analyser added to one of the other projects. Which brings me to..&lt;/p&gt;&#xA;&lt;p&gt;What I&#x27;ve really wanted, from time to time, is to be able to have one project (say, &amp;quot;MyLibrary&amp;quot;) in a solution and another project (say, &amp;quot;MyAnalyser&amp;quot;) where the second project is added an analyser reference to the first project.&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;d like it to be as simple as clicking on References on the &amp;quot;MyLibrary&amp;quot; project, then &amp;quot;Add an Analyzer&amp;quot; and then choosing the &amp;quot;MyAnalyser&amp;quot; project. This, however, is not currently possible.&lt;/p&gt;&#xA;&lt;p&gt;It seems that I&#x27;m not the only one that thinks that this would be nice, there is an issue on the &lt;a href=&quot;https://github.com/dotnet/roslyn/&quot;&gt;.NET Compiler Platform (&amp;quot;Roslyn&amp;quot;)&lt;/a&gt; repo relating to this: &lt;a href=&quot;https://github.com/dotnet/roslyn/issues/18093&quot;&gt;Adding Analyzers Via a Project Reference&lt;/a&gt;. The first reply is from a Senior Software Engineer at Microsoft who says:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;This would be one of the coolest features ever&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;.. which sounds like a great and promising start!&lt;/p&gt;&#xA;&lt;p&gt;However, the issue was raised in March 2017 and I don&#x27;t think that any progress has been made on it, so I don&#x27;t know when / if it will be tackled*.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(Having said that, just last month it was recategorised from &amp;quot;Backlog&amp;quot; to &amp;quot;IDE: InternalPriority&amp;quot; and even assigned Priority 1 - so maybe this &lt;strong&gt;will&lt;/strong&gt; change in the near future! We&#x27;ll have to wait and see)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3&gt;What &lt;em&gt;does&lt;/em&gt; exist&lt;/h3&gt;&#xA;&lt;p&gt;So the bad news is that there is no way in the UI to do what I want. But the good news is that there &lt;em&gt;is&lt;/em&gt; a way to move towards it with some manual .csproj editing.&lt;/p&gt;&#xA;&lt;p&gt;If I opened the MyLibrary.csproj from the example earlier then I could add the following section:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;ItemGroup&amp;gt;&#xA;  &amp;lt;ProjectReference Include=&amp;quot;..\MyAnalyser\MyAnalyser.csproj&amp;quot;&amp;gt;&#xA;    &amp;lt;ReferenceOutputAssembly&amp;gt;false&amp;lt;/ReferenceOutputAssembly&amp;gt;&#xA;    &amp;lt;OutputItemType&amp;gt;Analyzer&amp;lt;/OutputItemType&amp;gt;&#xA;  &amp;lt;/ProjectReference&amp;gt;&#xA;&amp;lt;/ItemGroup&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and the MyAnalyser would now be added to MyLibrary and it would check over the code that I&#x27;d written in MyLibrary project - reporting any resulting messages, warnings or error in the VS Error List. Hurrah!&lt;/p&gt;&#xA;&lt;p&gt;It seems like a pity that something seemingly so simple needs to be done by hand-editing the .csproj file instead of there being something in the VS GUI to do this but there are other features where you have to do the same. For example, if you want a project to target multiple frameworks when it&#x27;s built then you have to manually edit the .csproj file and rename the &amp;quot;targetframework&amp;quot; node to &amp;quot;targetframeworks&amp;quot; and then type in a semi-colon-delimited list of IDs of frameworks that you&#x27;re interested in - eg. from this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;TargetFramework&amp;gt;netcoreapp2.1&amp;lt;/TargetFramework&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. to this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;TargetFrameworks&amp;gt;netcoreapp2.1;net461&amp;lt;/TargetFrameworks&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;(It&#x27;s quite common to do this in &lt;a href=&quot;https://benchmarkdotnet.org/&quot;&gt;BenchmarkDotNet&lt;/a&gt; projects so that you can see how the results vary when your library is imported into different frameworks)&lt;/p&gt;&#xA;&lt;p&gt;The good news is that hand-editing the .csproj file is much easier with the file format that we have now than the old one! So having to do this is not the end of the world.&lt;/p&gt;&#xA;&lt;p&gt;It&#x27;s not &lt;em&gt;all&lt;/em&gt; rainbows and unicorns, though..&lt;/p&gt;&#xA;&lt;h3&gt;What are the downsides?&lt;/h3&gt;&#xA;&lt;p&gt;The biggest (and only, so far as I can tell) downside is that it seem like Visual Studio will somehow cache the analyser assembly after it loads it. This means that when you first open the solution, the analyser(s) in the MyAnalyser project will be run against the MyLibrary code and any messages, warnings and errors displayed.. &lt;em&gt;but&lt;/em&gt;, if you then change the MyAnalyser code and rebuild then those changes won&#x27;t affect the checks performed against MyLibrary.&lt;/p&gt;&#xA;&lt;p&gt;Even if you rebuild the entire solution (rebuilding MyAnalyser first and &lt;em&gt;then&lt;/em&gt; rebuilding MyLibrary, to try to force the new analyser assembly to be loaded).&lt;/p&gt;&#xA;&lt;p&gt;Even if you rebuild it and then unload the solution and then reload the solution and build &lt;em&gt;again&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;It seems like the only way to get it to reliably load the new analyser assembly is to close the Visual Studio instance entirely and start it again.&lt;/p&gt;&#xA;&lt;p&gt;A cryptic note in the &lt;a href=&quot;https://github.com/dotnet/roslyn/issues/18093&quot;&gt;GitHub issue&lt;/a&gt; that I referenced earlier made me wonder if changing the assembly version of the analyser project would help.. but it didn&#x27;t.&lt;/p&gt;&#xA;&lt;p&gt;Now, &lt;em&gt;hopefully,&lt;/em&gt; in real world usage this isn&#x27;t as bad as it sounds. The process of writing analysers lends itself very nicely to a test driven development style because you can set up a test suite where every test is of the format &amp;quot;for code snippet, will I get the analyser messages that I expect?&amp;quot; and you can build up a nice suite of tests for middle-of-the-road cases and edge cases and have them all run quickly. I actually find this to be the easiest way for me to debug things when I get myself into a situation where I don&#x27;t understand why the analyser code isn&#x27;t doing what I expect; I write a test with a snippet of code and then debug the test to step through the code. So you should be to get your analyser working nicely without having to test it against your &amp;quot;MyLibrary&amp;quot; code over and over.&lt;/p&gt;&#xA;&lt;p&gt;Of course, sometimes you&#x27;ll want to run it against your entire code base (otherwise, what was the point of writing it!) and then you &lt;em&gt;will&lt;/em&gt; have to close VS and restart it. And this is inconvenient and I wish that it wasn&#x27;t the case.&lt;/p&gt;&#xA;&lt;p&gt;I think, though, that you would be in the same situation if you decided to go down the NuGet distribution route (whether from a private or public feed) - in the past, I&#x27;ve found that if a new version of a NuGet package includes a new version of an analyser then Visual Studio won&#x27;t load the new version of the analyser without me restarting VS. Which is just as frustrating. Maybe this is part of what&#x27;s delaying the work on Microsoft&#x27;s side; they know that if they make adding analysers easier then they&#x27;ll have to fix the cached-analyser-doesn&#x27;t-get-updated problem at the same time.&lt;/p&gt;&#xA;&lt;h3&gt;To conclude&lt;/h3&gt;&#xA;&lt;p&gt;I&#x27;m going to keep my eye on that GitHub issue. It would be great to see some movement on it but I have no idea how much weight &amp;quot;IDE: InternalPriority&amp;quot; cases have, even if they are listed as Priority 1 within that category.. to be honest, I&#x27;m presuming that Priority 1 means &lt;strong&gt;top priority&lt;/strong&gt; but it&#x27;s just as feasible that it means &lt;em&gt;lowest&lt;/em&gt; priority. There&#x27;s a nice view of the &lt;a href=&quot;https://github.com/dotnet/roslyn/projects/35#card-16650341&quot;&gt;&amp;quot;IDE: Internal Priority&amp;quot; category in GitHub here&lt;/a&gt; in case you want to join in on the guessing game!&lt;/p&gt;&#xA;&lt;p&gt;At the end of the day, though, I still think that this is a powerful technology to have access to and I&#x27;d still rather have it with these caveats than not have it at all. I really believe that analysers provide a way to improve code quality and I encourage everyone to have a play around with them!&lt;/p&gt;&#xA;&lt;div class=&quot;Related&quot;&gt;&lt;h3&gt;You may also be interested in:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.productiverage.com/creating-a-c-sharp-roslyn-analyser-for-beginners-by-a-beginner&quot;&gt;Creating a C# (&amp;quot;Roslyn&amp;quot;) Analyser - For beginners by a beginner&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
                <pubDate>Wed, 10 Jul 2019 21:42:00 GMT</pubDate>
            </item>
            <item>
                <title>Type aliases in Bridge.NET (C#)</title>
                <link>https://www.productiverage.com/type-aliases-in-bridgenet-c-sharp</link>
                <guid>https://www.productiverage.com/type-aliases-in-bridgenet-c-sharp</guid>
                <description>&lt;p&gt;Back in 2016, I wrote &lt;a href=&quot;https://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-part-three&quot;&gt;Writing React apps using Bridge.NET - The Dan Way (Part Three)&lt;/a&gt; and I talked about trying to tighten up the representation of values in the type system. One of my pet peeves that I talked about was how &amp;quot;no value&amp;quot; is represented in reference types and, in particular, with strings.&lt;/p&gt;&#xA;&lt;p&gt;As a reminder, I was having a rant about how I hate the uncertainty of wondering &amp;quot;should I expect to get null passed in here / returned from here&amp;quot; and I decided to draw a hard line and say that &lt;strong&gt;no&lt;/strong&gt;, in &lt;em&gt;my&lt;/em&gt; code I would &lt;em&gt;never&lt;/em&gt; expect a reference type to have a null value - instead I would always use the &lt;strong&gt;Optional&amp;lt;T&amp;gt;&lt;/strong&gt; struct that I included in my NuGet package &lt;a href=&quot;https://github.com/ProductiveRage/Bridge.Immutable&quot;&gt;ProductiveRage.Immutable&lt;/a&gt;. This allows me to make it clear when a method may return a null value (because its return type would be something like &lt;strong&gt;Optional&amp;lt;PersonDetails&amp;gt;&lt;/strong&gt;) and it would allow me to make it clear when a method will and won&#x27;t accept null arguments (it &lt;em&gt;will&lt;/em&gt; if the parameter type is &lt;strong&gt;Optional&amp;lt;T&amp;gt;&lt;/strong&gt; and it &lt;em&gt;won&#x27;t&lt;/em&gt; if it&#x27;s &lt;em&gt;not&lt;/em&gt;).&lt;/p&gt;&#xA;&lt;p&gt;Strings, however, have &lt;em&gt;another&lt;/em&gt; &amp;quot;no value&amp;quot; state - when they are blank. If I want to have a method argument whose type indicates &amp;quot;this argument must be a string that is not null AND that is not blank&amp;quot; then we can&#x27;t communicate that. To address that, my blog post introduced &lt;em&gt;another&lt;/em&gt; type; the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public class NonBlankTrimmedString&#xA;{&#xA;    public NonBlankTrimmedString(string value)&#xA;    {&#xA;        if (string.IsNullOrWhiteSpace(value))&#xA;            throw new ArgumentException(&amp;quot;Null, blank or whitespace-only value specified&amp;quot;);&#xA;        Value = value.Trim();&#xA;    }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// This will never be null, blank or have any leading or trailing whitespace&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    public string Value { get; }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// It&#x27;s convenient to be able to pass a NonBlankTrimmedString instance as any argument&#xA;    /// that requires a string&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    public static implicit operator string(NonBlankTrimmedString value)&#xA;    {&#xA;        if (value == null)&#xA;            throw new ArgumentNullException(&amp;quot;value&amp;quot;);&#xA;        return value.Value;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This would allow me to have a method that clearly indicates that it needs a string &lt;em&gt;with a real value&lt;/em&gt; - eg.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;void DoSomething(NonBlankTrimmedString value);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and it could be combined with &lt;strong&gt;Optional&amp;lt;T&amp;gt;&lt;/strong&gt; to define a method whose type signature indicates that it will take a string with a real value OR it will accept a &amp;quot;no value&amp;quot; - eg.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;void DoSomething(Optional&amp;lt;NonBlankTrimmedString&amp;gt; value);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This method will &lt;em&gt;not&lt;/em&gt; accept a blank string because that&#x27;s just another state that is not necessary; either you give me a real (non-blank) value or you don&#x27;t. There is no half-way house of &amp;quot;non-null but still with no value&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;As another example, I might want to write a &lt;a href=&quot;https://github.com/ProductiveRage/Bridge.React&quot;&gt;Bridge.React&lt;/a&gt; component whose &lt;strong&gt;Props&lt;/strong&gt; type can optionally take an additional class name to render as part of the component - in which case, I might write the class a bit like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public sealed class Props&#xA;{&#xA;    public Props(&#xA;        /* .. other property values, */&#xA;        Optional&amp;lt;NonBlankTrimmedString&amp;gt; className = new Optional&amp;lt;NonBlankTrimmedString&amp;gt;())&#xA;    {&#xA;        // .. other properties set here&#xA;        ClassName = className;&#xA;    }&#xA;&#xA;    // .. other public properties exposed here&#xA;&#xA;    public Optional&amp;lt;NonBlankTrimmedString&amp;gt; ClassName { get; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This is all fine and dandy and, pretty much, it just works. If I want to expand this richer type system so that it&#x27;s used in API requests / responses as well then I can have &lt;strong&gt;Optional&amp;lt;T&amp;gt;&lt;/strong&gt; and &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; types defined in the .NET code that runs on the server as well as in my Bridge project. And if I want to avoid code duplication then I can define the types in a &lt;a href=&quot;https://dev.to/rionmonster/sharing-is-caring-using-shared-projects-in-aspnet-e17&quot;&gt;Shared Project&lt;/a&gt; that is referenced by both the Bridge project and the server API project.&lt;/p&gt;&#xA;&lt;p&gt;One downside to this approach, though, is that JSON payloads from API calls are going to be larger if I wrap all of my strings in &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; instances. And there will be more work for &lt;a href=&quot;https://github.com/bridgedotnet/Bridge.Newtonsoft.Json&quot;&gt;Bridge&#x27;s version of Newtonsoft Json.NET&lt;/a&gt; to do because it has to parse more data and it has to deserialise more instances of types; for every string, instead of just deserialising a value into a string, it needs to deserialise that string value &lt;em&gt;and then&lt;/em&gt; create an instance of a &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; to wrap it. If you have any API calls that return 100s or 1000s of strings then this can become a non-negligible cost.&lt;/p&gt;&#xA;&lt;p&gt;The full .NET version of Newtonsoft Json.NET has some flexibility with how types are serialised to/from JSON. For example, if I wanted to tell the serialiser that &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; instances should appear in the JSON as plain strings then I could do so using a &lt;strong&gt;JsonConverter&lt;/strong&gt; (there is sample code in the Newtonsoft website that demonstrates how to do it for the &lt;strong&gt;Version&lt;/strong&gt; type and the principle would be exactly the same for &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; - see &lt;a href=&quot;https://www.newtonsoft.com/json/help/html/CustomJsonConverterGeneric.htm&quot;&gt;Custom JsonConverter&amp;lt;T&amp;gt;&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;The Bridge version of the library has no support for custom JsonConverters, though, so we may appear to be a bit stuck.. if it weren&#x27;t for the fact that Bridge has some low-level tricks that we can use to our advantage.&lt;/p&gt;&#xA;&lt;p&gt;In order to allow C# code to be written that interacts with JavaScript libraries, Bridge has a few escape hatches for the type system that we can use in a careful manner. For example, I could rewrite the Bridge version of &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; to look like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public class NonBlankTrimmedString&#xA;{&#xA;    protected NonBlankTrimmedString() { }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// This will never be null, blank or have any leading or trailing whitespace&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    public extern string Value { [Template(&amp;quot;{this}&amp;quot;)] get; }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Create a NonBlankTrimmedString instance by explicitly casting a string&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    public static explicit operator NonBlankTrimmedString(string value)&#xA;    {&#xA;        if (value == null)&#xA;            return null;&#xA;        value = value.Trim();&#xA;        if (value == &amp;quot;&amp;quot;)&#xA;            throw new ArgumentException(&amp;quot;Can not cast from a blank or whitespace-only string&amp;quot;);&#xA;        return Script.Write&amp;lt;NonBlankTrimmedString&amp;gt;(&amp;quot;value&amp;quot;);&#xA;    }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// It&#x27;s convenient to be able to pass a NonBlankTrimmedString instance as any argument&#xA;    /// that requires a string&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    [Template(&amp;quot;{value}&amp;quot;)]&#xA;    public extern static implicit operator string(NonBlankTrimmedString value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This changes things up a bit. Now there is no public constructor and the only way to get a &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; instance from a plain string is to explicitly cast to it - eg.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var x = (NonBlankTrimmedString)&amp;quot;hi!&amp;quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;If the source string is blank or whitespace-only then attempting to cast it to a &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; will result in an exception being thrown.&lt;/p&gt;&#xA;&lt;p&gt;What&#x27;s interesting about this class is that it exists only to provide type information to the C# compiler - there will never be an instance of &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; alive runtime in JavaScript. The reason for this is that the explicit cast performs some validation but then, at runtime, returns the string instance directly back; it &lt;em&gt;doesn&#x27;t&lt;/em&gt; wrap it in an instance of a &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; class. Similarly, when the &amp;quot;Value&amp;quot; property is requested in C# code, this is translated into JS as a direct reference to &amp;quot;this&amp;quot; (which we know is a plain string). This is sounding complicated as I write this, so let me try to make it clear with an example!&lt;/p&gt;&#xA;&lt;p&gt;The following C# code:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Start with a plain string&#xA;var source = &amp;quot;Hi!&amp;quot;;&#xA;&#xA;// Create a NonBlankTrimmed by explicitly casting the string&#xA;var x = (NonBlankTrimmedString)source;&#xA;&#xA;// Write the value of the NonBlankTrimmedString to the console&#xA;Console.WriteLine(x.Value);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. is translated into this JS:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Start with a plain string&#xA;var source = &amp;quot;Hi!&amp;quot;;&#xA;&#xA;// Create a NonBlankTrimmed by explicitly casting the string&#xA;var x = Demo.NonBlankTrimmedString.op_Explicit(source);&#xA;&#xA;// Write the value of the NonBlankTrimmedString to the console&#xA;System.Console.WriteLine(x);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The reference &amp;quot;x&amp;quot; in the JS runtime is actually just a string (and so the C# &amp;quot;x.Value&amp;quot; is translated into simply &amp;quot;x&amp;quot;) and the explicit operator (the method call &amp;quot;Demo.NonBlankTrimmedString.op_Explicit&amp;quot;) performs some validation but then (if the validation passes) returns the string right back but claims (for the benefit of the C# compiler and type system) that it is now a &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This has a couple of benefits - now, plain string values that appear in JSON can be deserialised into &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; instances by Bridge (while the Bridge version of Json.NET doesn&#x27;t support type converters, it &lt;em&gt;does&lt;/em&gt; support deserialising types using implicit or explicit operators - so, here, it would see a string in the JSON and see that the target type was a &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; and it would use &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt;&#x27;s explicit operator to instantiate the target type), so the JSON returned from the server can be cleaner. &lt;em&gt;And&lt;/em&gt; it means that the JS runtime doesn&#x27;t have to actually create instances of &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; to wrap those strings up in, which makes the life of the garbage collector easier (again, may be important if you have API responses that need to return 1000s of &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt;).&lt;/p&gt;&#xA;&lt;p&gt;This is an interesting concept that I&#x27;m referring to as a &amp;quot;type alias&amp;quot; - a type that exists only for the compiler and that doesn&#x27;t affect the runtime. The phrase &amp;quot;type alias&amp;quot; exists in TypeScript and in F# (and in other languages, I&#x27;m sure) but I think that it means something slightly different there.. which may mean that I&#x27;ve chosen a confusing name for this C# / Bridge.NET concept! In TypeScript and F#, I don&#x27;t believe that they allow the level of compiler validation that I&#x27;m talking about - certainly in TypeScript, type aliases are more of a convenience that allow you say something like:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Vector = number[];&#xA;type Vectors = Vector[];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. so that you can then write a method signature that looks like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;function process(data: Vectors) {&#xA;    // ..&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. instead of:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;function process(data: number[][]) {&#xA;    // ..&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. but the two are identical. TypeScript &amp;quot;type aliases&amp;quot; make things more flexible, &lt;em&gt;not&lt;/em&gt; more constrained. To make that clearer, if you wrote:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type CustomerID = number;&#xA;&#xA;function process(id: CustomerID) {&#xA;    // ..&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. then you could still call:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;process(1); // Passing a plain number into a method whose signature specifies type CustomerID&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;In other words, the TypeScript alias means &amp;quot;anywhere that you see CustomerID, you can pass in a &#x27;number&#x27;&amp;quot;. This is the opposite of what I want, I want to be able to have methods that specify that they want a &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; and &lt;em&gt;not&lt;/em&gt; just any old string.&lt;/p&gt;&#xA;&lt;p&gt;I go into this in a little more detail in the section &amp;quot;Type aliases in other languages&amp;quot; at the end of this blog post. My point here was that maybe &amp;quot;type alias&amp;quot; is not the best phrase to use and maybe I&#x27;ll revisit this in the future.&lt;/p&gt;&#xA;&lt;p&gt;For now, though, let&#x27;s get back to the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; definition that I&#x27;ve proposed because it has some downsides, as well. As the type &lt;em&gt;only&lt;/em&gt; exists at compile time and &lt;em&gt;not&lt;/em&gt; at runtine, if I try to query the type of a &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; instance at runtime then it will report that it is a &amp;quot;System.String&amp;quot; - this is to be expected, since part of the benefit of this approach is that no additional instances are required other than the plain string itself - but if you were wanted to do some crazy reflection for some reason then it might catch you off guard.&lt;/p&gt;&#xA;&lt;p&gt;Another downside is that if I wanted to create specialised versions of &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; then I have to duplicate some code. For example, I might want to &lt;a href=&quot;https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-1/&quot;&gt;strongly type&lt;/a&gt; my entity IDs and define them as classes derived from &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt;. With the version of &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; from my 2016 blog post, this would be as simple as this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// If NonBlankTrimmedString is a regular class then creating derived types is easy as this&#xA;public class OrderID : NonBlankTrimmedString&#xA;{&#xA;    public OrderID(string value) : base(value) { }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. but with this &amp;quot;type alias&amp;quot; approach, it becomes more verbose -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// The explicit operator needs to be reimplemented for each derived type with the type alias&#xA;// alias approach shown earlier :(&#xA;public class ClassName : NonBlankTrimmedString&#xA;{&#xA;    protected ClassName() { }&#xA;&#xA;    public static explicit operator ClassName(string value)&#xA;    {&#xA;        if (value == null)&#xA;            return null;&#xA;        value = value.Trim();&#xA;        if (value == &amp;quot;&amp;quot;)&#xA;            throw new ArgumentException(&amp;quot;Can not cast from a blank or whitespace-only string&amp;quot;);&#xA;        return Script.Write&amp;lt;ClassName&amp;gt;(&amp;quot;value&amp;quot;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;However, we could make this a little simpler by changing the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; type definition to this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public class NonBlankTrimmedString&#xA;{&#xA;    protected NonBlankTrimmedString() { }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// This will never be null, blank or have any leading or trailing whitespace&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    public extern string Value { [Template(&amp;quot;{this}&amp;quot;)] get; }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Create a NonBlankTrimmedString instance by explicitly casting a string&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    public static explicit operator NonBlankTrimmedString(string value)&#xA;        =&amp;gt; Wrap&amp;lt;NonBlankTrimmedString&amp;gt;(value);&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// It&#x27;s convenient to be able to pass a NonBlankTrimmedString instance as any argument&#xA;    /// that requires a string&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    [Template(&amp;quot;{value}&amp;quot;)]&#xA;    public extern static implicit operator string(NonBlankTrimmedString value);&#xA;&#xA;    protected static T Wrap&amp;lt;T&amp;gt;(string value) where T : NonBlankTrimmedString&#xA;    {&#xA;        if (value == null)&#xA;            return null;&#xA;        value = value.Trim();&#xA;        if (value == &amp;quot;&amp;quot;)&#xA;            throw new ArgumentException(&amp;quot;Can not cast from a blank or whitespace-only string&amp;quot;);&#xA;        return Script.Write&amp;lt;T&amp;gt;(&amp;quot;value&amp;quot;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and then derived types would look like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public class OrderID : NonBlankTrimmedString&#xA;{&#xA;    protected OrderID() { }&#xA;    public static explicit operator OrderID(string value) =&amp;gt; Wrap&amp;lt;OrderID&amp;gt;(value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3&gt;(Sort-of-)immutability for &amp;quot;free&amp;quot; through type aliases&lt;/h3&gt;&#xA;&lt;p&gt;Another use case where this sort of approach seemed interesting was when I was writing some client-side code that received data in the form of arrays and then did some clever calculations and drew some pretty graphs. The API response data was 10s of 1000s of arrays, where each array was 100 floating point numbers. The calculation logic took those arrays and passed them through a bunch of methods to come up with the results but I got myself in a bit of a muddle when there were one or two places that had to manipulate a subset of the data and I realised that I was confusing myself as to whether the data should be altered in place or whether local copies of those parts of the data should be taken and then changed. To make the code easier to follow, I wanted those methods to take local copies to make the changes, rather than mutating them in-place and risking messing up calculations performed on the data later in the pipeline.&lt;/p&gt;&#xA;&lt;p&gt;What I really wanted was for those methods to have type signatures that would either take an immutable data type or a readonly data type. Immutable is the ideal because it means that not only can the receiving methods not change the data but &lt;em&gt;nothing&lt;/em&gt; can change the data. Having readonly types on the method signatures means that the methods can&#x27;t change the data but it&#x27;s still technically possible for the caller to change the data. To try to illustrate this, I&#x27;ll use the &lt;strong&gt;ReadOnlyCollection&amp;lt;T&amp;gt;&lt;/strong&gt; type from .NET in an example:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public static void Main()&#xA;{&#xA;    var items = new List&amp;lt;int&amp;gt; { 0, 1, 2, 3 };&#xA;    var readOnlyItems = items.AsReadOnly();&#xA;    DoSomething(&#xA;        readOnlyItems,&#xA;        halfwayPointCallback: () =&amp;gt; items.RemoveAt(0)&#xA;    );&#xA;}&#xA;&#xA;static void DoSomething(ReadOnlyCollection&amp;lt;int&amp;gt; readOnlyItems, Action halfwayPointCallback)&#xA;{&#xA;    Console.WriteLine(&amp;quot;Number of readonlyItems: &amp;quot; &#x2B; readOnlyItems.Count);&#xA;    halfwayPointCallback();&#xA;    Console.WriteLine(&amp;quot;Number of readonlyItems: &amp;quot; &#x2B; readOnlyItems.Count);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Here, the &amp;quot;Main&amp;quot; method declares a mutable list and then it create a readonly wrapper around it. The readonly wrapper is passed into the &amp;quot;DoSomething&amp;quot; method and this means &amp;quot;DoSomething&amp;quot; can &lt;em&gt;not&lt;/em&gt; directly alter that list. However, it&#x27;s still possible for the &amp;quot;Main&amp;quot; method to change the underlying list while &amp;quot;DoSomething&amp;quot; is running.&lt;/p&gt;&#xA;&lt;p&gt;In practice, this is not something that I find commonly happens. As such, while I would &lt;em&gt;prefer&lt;/em&gt; immutable structures at all times (because then &amp;quot;Main&amp;quot; &lt;em&gt;couldn&#x27;t&lt;/em&gt; change the contents of the list while &amp;quot;DoSomething&amp;quot; is working on it), being able to wrap the data in a readonly structure is still a significant improvement.&lt;/p&gt;&#xA;&lt;p&gt;So, some of the more obvious options available to me were:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Stick with using arrays and be careful not to write code that performs any alteration &amp;quot;in place&amp;quot; (&lt;strong&gt;I don&#x27;t like this situation - C#&#x27;s type system has great potential and I want it to help me and save me from myself where possible!&lt;/strong&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Pass the arrays into the methods as &lt;strong&gt;IEnumerable&amp;lt;float&amp;gt;&lt;/strong&gt; (&lt;strong&gt;this isn&#x27;t a terrible idea in general - it quite clearly communicates that the provided data should be considered read only - but the calculations that I was doing wanted to get the length of the array and to read particular indexed values from the array in unpredictable orders and this isn&#x27;t very efficient with enumerable types&lt;/strong&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Create an &amp;quot;immutable list&amp;quot; class that takes an array into the constructor, copies the data and then allows access to the copy only through tightly-controlled members; ie. Length and an indexed property (&lt;strong&gt;This is the most type-safe way but it felt expensive doing this for the 10s of 1000s of arrays that I had&lt;/strong&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Convert each array into a &lt;strong&gt;List&amp;lt;float&amp;gt;&lt;/strong&gt; and then call &amp;quot;.AsReadOnly()&amp;quot; on them (&lt;strong&gt;this is very little code but it also felt expensive with the amount of data that I had&lt;/strong&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Create a &amp;quot;ReadOnlyArray&amp;lt;T&amp;gt;&amp;quot; type that would be very similar in nature to the &lt;strong&gt;ReadOnlyCollection&amp;lt;T&amp;gt;&lt;/strong&gt; in that it would take an array into its constructor and then provide a read only interface for it, &lt;em&gt;without&lt;/em&gt; copying the array (&lt;strong&gt;This is a reasonable option and I might have gone this way were it not for liking the idea of option six&lt;/strong&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Create a &amp;quot;ReadOnlyArray&amp;lt;T&amp;gt;&amp;quot; type &lt;em&gt;alias&lt;/em&gt; that I could use to instruct the type system that the data should not be altered but without having to introduce &lt;em&gt;any&lt;/em&gt; new types or instances at runtime&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;I went with the last one because I was all excited about experimenting with &amp;quot;Bridge.NET type aliases&amp;quot; and I wanted to see how well they could work! (In reality, the fifth option was also a good one and some of the others would also be perfectly fine for smaller data sets.. to be honest, there is a chance that they wouldn&#x27;t have made &lt;em&gt;too&lt;/em&gt; much difference even with the data that I was looking at but, again, sometimes you need to make opportunity to experiment! :)&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public sealed class ReadOnlyArray&amp;lt;T&amp;gt; : IEnumerable&amp;lt;T&amp;gt;&#xA;{&#xA;    [Template(&amp;quot;{data}&amp;quot;)]&#xA;    public extern ReadOnlyArray(T[] data);&#xA;&#xA;    [External] // Required due to https://github.com/bridgedotnet/Bridge/issues/4015&#xA;    public extern T this[int index] { [Template(&amp;quot;{this}[{index}]&amp;quot;)] get; }&#xA;&#xA;    public extern int Length { [Template(&amp;quot;length&amp;quot;)] get; }&#xA;&#xA;    [External]&#xA;    public extern IEnumerator&amp;lt;T&amp;gt; GetEnumerator();&#xA;&#xA;    [External]&#xA;    extern IEnumerator IEnumerable.GetEnumerator();&#xA;&#xA;    [Template(&amp;quot;{value}&amp;quot;)]&#xA;    public extern static implicit operator ReadOnlyArray&amp;lt;T&amp;gt;(T[] value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The structure of this class is similar in some ways to that of the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt;. Unlike that class, there is no validation that is required - I &lt;em&gt;only&lt;/em&gt; want to provide access to an array in a limited manner and so it&#x27;s fine to expose a public constructor (as opposed to the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt;, where it&#x27;s important to check that the value is neither null nor blank nor whitespace-only and the [Template] attribute on the constructor doesn&#x27;t easily allow for any validation).&lt;/p&gt;&#xA;&lt;p&gt;Even though the constructor may be used on this class, there is still an operator to change an array into a &lt;strong&gt;ReadOnlyArray&lt;/strong&gt; so that the deserialisation process is able to read an array of items into a &lt;strong&gt;ReadOnlyArray&lt;/strong&gt; instance. I&#x27;ve chosen to use an implicit operator (rather than en explicit operator) here because there is no validation to perform - the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; has an explicit operator because that&lt;em&gt;does&lt;/em&gt; perform some validation and so it&#x27;s a casting action that could fail and so I want it to be explicit in code.&lt;/p&gt;&#xA;&lt;p&gt;As with the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt;, this type will exist only at compile time and the compiled JavaScript will always be operating directly against the original array. As far as the JS code is aware, there &lt;em&gt;is no&lt;/em&gt; wrapper class involved at all. The following C# -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var values = new[] { 1, 2, 3 };&#xA;Console.WriteLine(values.Length);&#xA;&#xA;var readOnlyValuesCtor = new ReadOnlyArray&amp;lt;int&amp;gt;(values);&#xA;Console.WriteLine(readOnlyValuesCtor.Length);&#xA;&#xA;ReadOnlyArray&amp;lt;int&amp;gt; readOnlyValuesCast = values;&#xA;Console.WriteLine(readOnlyValuesCast.Length);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. is translated into this JS:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var values = System.Array.init([1, 2, 3], System.Int32);&#xA;System.Console.WriteLine(values.length);&#xA;&#xA;var readOnlyValuesCtor = values;&#xA;System.Console.WriteLine(readOnlyValuesCtor.length);&#xA;&#xA;var readOnlyValuesCast = values;&#xA;System.Console.WriteLine(readOnlyValuesCast.length);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Whether the &lt;strong&gt;ReadOnlyArray&amp;lt;int&amp;gt;&lt;/strong&gt; is created by calling its constructor or by an implicit cast in the C# code, the JS is unaware of any change required of the reference and continues to operate on the original array. This is the &amp;quot;free&amp;quot; part of this approach - there is no runtime cost in terms of type conversions or additional references.&lt;/p&gt;&#xA;&lt;p&gt;The other members of the class need a little more explanation, though. The indexer &lt;em&gt;should&lt;/em&gt; be implemented just like the &amp;quot;Length&amp;quot; property, by having an extern property that has a getter with a [Template] attribute on it. However, there is a bug in the Bridge compiler that necessitate an additional [External] attribute be added to the property. Not the end of the world and I&#x27;m sure that the Bridge Team will fix it in a future version of the compiler.&lt;/p&gt;&#xA;&lt;p&gt;The &amp;quot;GetEnumerator&amp;quot; methods require a tiny bit more explanation. In order for the class to implement &lt;strong&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/strong&gt;, these methods must be present. But we don&#x27;t actually have to implement them ourselves. Whenever Bridge encouters a &amp;quot;foreach&amp;quot; in the source C# code, it translates it into JS that calls &amp;quot;GetEnumerator&amp;quot; and then steps through each value. For example, this C# code:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;foreach (var value in readOnlyValuesCtor)&#xA;    Console.WriteLine(value);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. becomes this JS:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;$t = Bridge.getEnumerator(readOnlyValuesCtor);&#xA;try {&#xA;    while ($t.moveNext()) {&#xA;        var value = $t.Current;&#xA;        System.Console.WriteLine(value);&#xA;    }&#xA;} finally {&#xA;    if (Bridge.is($t, System.IDisposable)) {&#xA;        $t.System$IDisposable$Dispose();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Because Bridge needs to support enumerating over arrays, the function &amp;quot;Bridge.getEnumerator&amp;quot; knows what to do if it is given an array reference. And since a &lt;strong&gt;ReadOnlyArray&lt;/strong&gt; &lt;em&gt;is&lt;/em&gt; an array reference at runtime, we don&#x27;t have to do anything special - we don&#x27;t have to provide a GetEnumerator implementation.&lt;/p&gt;&#xA;&lt;p&gt;And there we go! As I explained above, I originally encountered this problem when passing an array into a complicated calculation process but this type could &lt;em&gt;also&lt;/em&gt; be used for deserialising JSON into a richer type model, just like the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; earlier - again, without any overhead in doing so (no instances of wrapper types will be present runtime and there will be no additional references for the garbage collector to track).&lt;/p&gt;&#xA;&lt;h3&gt;&lt;em&gt;Only&lt;/em&gt; possible in Bridge.NET?&lt;/h3&gt;&#xA;&lt;p&gt;I was wracking my brains about whether it would be possible to do something similar with C# running in a .NET environment and I couldn&#x27;t think of anything. People sometimes think &lt;em&gt;&amp;quot;structs!&amp;quot;&lt;/em&gt; when trying to concoct ways to avoid adding references that the garbage collector needs to track but structs are only immune to this if they don&#x27;t contain any object references within their fields and properties (and there are other edge cases besides this but they&#x27;re not important right now).&lt;/p&gt;&#xA;&lt;p&gt;At the end of the day, this &amp;quot;type alias&amp;quot; concept might be a bit of a niche technique and it &lt;em&gt;might&lt;/em&gt; even be a case of me playing around, more than it being something that you might use in production.. but I thought that it was interesting nonetheless. And it has made me wish, again, that C# had support for something like this - I&#x27;ve written code before that defines all variety of strongly typed IDs (strings) and Keys (integers) to avoid passing the wrong type of value into the wrong place but it&#x27;s always felt cumbersome (it&#x27;s felt worth the effort but that didn&#x27;t stop wishing me that it was &lt;em&gt;less&lt;/em&gt; effort).&lt;/p&gt;&#xA;&lt;h3&gt;Type aliases in other languages&lt;/h3&gt;&#xA;&lt;p&gt;I&#x27;ve linked above to an article &lt;a href=&quot;https://andrewlock.net/using-strongly-typed-entity-ids-to-avoid-primitive-obsession-part-1/&quot;&gt;Using strongly-typed entity IDs to avoid primitive obsession&lt;/a&gt;, which is excellent and eloquently expresses some of my thoughts, but I thought that I&#x27;d add a summary in here as well (which also gives me an opportunity to go into more detail about the options in TypeScript and F#).&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;ll start with an anecdote to set the scene. In a company that I used to work at, we had systems that would retrieve and render different data for different language options. Sometimes data would vary only by language (&amp;quot;English&amp;quot;, &amp;quot;French&amp;quot;, etc..) but sometimes it would be more specific and vary by language &lt;em&gt;culture&lt;/em&gt; (eg. &amp;quot;English - United Kingdom&amp;quot;, &amp;quot;English - United States&amp;quot;, etc..). An older version of the system would pass around int values for the language or language culture keys. So there might be a method such as:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private string GetTranslatedName(int languageKey)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;A problem that occurred over and over again is that language keys and language culture keys would get mixed up in the code base - in other words, it was quite common for someone to accidentally pass a language key into a method where a language &lt;em&gt;culture&lt;/em&gt; key was expected (this situation was not helped by the fact that much of the developer testing was done in English and the language key and language culture key values in many of the databases were both 1 for English / English UK). Something that I was very keen to get into a new version of the system was to introduce &amp;quot;strongly typed keys&amp;quot; so that this sort of accident could no longer occur. The method&#x27;s signature would be changed to something like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private string GetTranslatedName(LanguageKey languageKey)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and we would not describe language or language culture keys as ints in the code base. They would always be either an instance of &lt;strong&gt;LanguageKey&lt;/strong&gt; or &lt;strong&gt;LanguageCultureKey&lt;/strong&gt; - this way, if you attempted to pass a key of the wrong type into a method then you would get a compile error.&lt;/p&gt;&#xA;&lt;p&gt;The downside is that each key type had to be defined as its own struct, with the following (quite verbose) structure:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public struct LanguageKey : IEquatable&amp;lt;LanguageKey&amp;gt;&#xA;{&#xA;    public LanguageKey(int value) =&amp;gt; Value = value;&#xA;&#xA;    public int Value { get; }&#xA;&#xA;    public bool Equals(LanguageKey other) =&amp;gt; Value.Equals(other.Value);&#xA;    public override bool Equals(object obj) =&amp;gt; (obj is LanguageKey key) &amp;amp;&amp;amp; (key.Value == Value);&#xA;    public override int GetHashCode() =&amp;gt; Value;&#xA;&#xA;    public static bool operator ==(LanguageKey x, LanguageKey y) =&amp;gt; x.Value == y.Value;&#xA;    public static bool operator !=(LanguageKey x, LanguageKey y) =&amp;gt; !(x == y);&#xA;&#xA;    public static explicit operator LanguageKey(int value) =&amp;gt; new LanguageKey(value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Really, though, that is the &lt;em&gt;only&lt;/em&gt; downside. As the strongly typed keys are structs without any reference properties or fields, there is no additional work for the garbage collector and there is no memory overhead vs tracking a simple int. But it &lt;em&gt;does&lt;/em&gt; still feel a little arduous to have to have these definitions in the code base, particularly when the equivalent F# code looks like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;[&amp;lt;Struct&amp;gt;] type LanguageKey = LanguageKey of int&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;It&#x27;s worth noting that this is not actually referred to as a &amp;quot;type alias&amp;quot; in F#; this is a &amp;quot;single case union type&amp;quot;. There &lt;em&gt;is&lt;/em&gt; a concept called a &amp;quot;type alias&amp;quot; in F# that looks like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type LanguageKey = int&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. but that code simply says &amp;quot;allow me to use the word &#x27;LanguageKey&#x27; anywhere in place of int&amp;quot; - eg. if I have the LanguageKey type alias specified as a method argument type in F# method, like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let getTranslatedName (language: LanguageKey) =&#xA;    // (Real work to retrieve translated name would go here but we&#x27;ll&#xA;    //  just return the string &amp;quot;Whatever&amp;quot; for the sake of this example)&#xA;    &amp;quot;Whatever&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. then the compiler would allow me to pass an int into that method -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// A LanguageKey type alias lets me pass any old int into the method - rubbish!&#xA;let name = getTranslatedName 123&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and that&#x27;s exactly what I wanted to avoid!&lt;/p&gt;&#xA;&lt;p&gt;On the other hand, if the type &lt;strong&gt;LanguageKey&lt;/strong&gt; was a &amp;quot;single case union type&amp;quot; then the code above would not compile:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// error FS0001: This expression was expected to have type &#x27;LanguageKey&#x27; but here has type &#x27;int&#x27;&#xA;let name = getTranslatedName 123&#xA;&#xA;// This DOES compile because the types match&#xA;let key = LanguageKey 123&#xA;let name = getTranslatedName 123&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and that&#x27;s exactly what I &lt;em&gt;did&lt;/em&gt; want!&lt;/p&gt;&#xA;&lt;p&gt;(TypeScript&#x27;s type aliases are like F#&#x27;s type aliases - they are more of a convenience and do not add the sort of type checking that I want)&lt;/p&gt;&#xA;&lt;p&gt;Things get a bit more awkward if we want to deal with reference types, such as strings, becase we could create a C# class similar to &lt;strong&gt;LanguageKey&lt;/strong&gt; (or we could create an F# single case union type) but that would introduce a new instance of a type that must be tracked by the garbage collector - every strongly typed ID involves &lt;em&gt;two&lt;/em&gt; references; the underlying string value and the strongly typed wrapper. Much of the time, that&#x27;s no problem - I&#x27;ve had the odd issue with the .NET GC in the past but, on the whole, it&#x27;s an amazing and reliable tool.. but because I &lt;em&gt;have&lt;/em&gt; had these problems before, it makes me more aware of the trade-off when I introduce wrappers like this.&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;m convinced that using strongly typed IDs is the right thing to do in 99% of cases because it improves code quality and can eradicate a class of real-world mistake. But the concept became even more interesting to me as it appeared possible to introduce a form of type alias into Bridge.NET code that enables those compile time checks but with zero runtime cost. Granted, the type erasure that occurs means that &lt;em&gt;runtime&lt;/em&gt; type checking is not possible (the Bridge code can not differentiate between a &lt;strong&gt;string&lt;/strong&gt; or a &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; or a type that is &lt;em&gt;derived&lt;/em&gt; from &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt;) but the main driver for me was to improve compile time checking and so that wasn&#x27;t a problem for me. Maybe it would be a problem in other scenarios, in which case these Bridge.NET &amp;quot;type aliases&amp;quot; might not be appropriate.&lt;/p&gt;&#xA;</description>
                <pubDate>Tue, 02 Jul 2019 21:59:00 GMT</pubDate>
            </item>
            <item>
                <title>I didn&#x27;t understand why people struggled with (.NET&#x27;s) async</title>
                <link>https://www.productiverage.com/i-didnt-understand-why-people-struggled-with-nets-async</link>
                <guid>https://www.productiverage.com/i-didnt-understand-why-people-struggled-with-nets-async</guid>
                <description>&lt;p&gt;Long story short (I know that some readers love a TL;DR), I have almost always worked with async/await in C# projects where it&#x27;s been async from top-to-bottom and so I&#x27;ve rarely tried to start integrating async code into a large project that is primarily &lt;em&gt;non&lt;/em&gt;-async. Due to this, I have never encountered any async problems.. so I&#x27;ve occasionally wondered &amp;quot;why would people be worried about getting deadlocks?&amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;Recently, this changed and I wanted to start integrating components that use async methods into a big project that doesn&#x27;t. And it didn&#x27;t take long until I got a hanging application!&lt;/p&gt;&#xA;&lt;p&gt;Before I get to my story (and my solution), let me quickly recap what all the fuss is about.&lt;/p&gt;&#xA;&lt;h3&gt;What is &amp;quot;async&amp;quot; and why is it good?&lt;/h3&gt;&#xA;&lt;p&gt;To put things into context, I&#x27;m talking about a web application - code that hosts a website and spend 99% of its day &amp;quot;read only&amp;quot; and just rendering pages for people.&lt;/p&gt;&#xA;&lt;p&gt;These do not tend to be computationally-intensive applications and if a page is slow to render then it&#x27;s probably because the code is waiting for something.. like a database call to complete or an external cache request or the loading of a file.&lt;/p&gt;&#xA;&lt;p&gt;Within IIS, when an ASP.NET application is hosted and is responding to requests, the simple model for synchronous code is that each request is allocated a thread to work on and it will keep hold of that thread for the duration of the request. A thread is an operating system construct and it occupies some resources - in other words, they&#x27;re not free and, given the the choice, we would like to need less of them rather than more of them. The threads in .NET are an abstraction over OS threads but to avoid getting too far off course, we&#x27;ll think of them as being equivalent because they&#x27;re close enough for the purposes of this post.&lt;/p&gt;&#xA;&lt;p&gt;This model is very easy to understand but it&#x27;s also easy to see how it could be quite wasteful. If the majority of our web server requests spend much of their time waiting for something external (database, other network I/O, local file system, etc..) then do we really need to tie up a thread for that time? Couldn&#x27;t we free it up for another request (that &lt;em&gt;isn&#x27;t&lt;/em&gt; waiting for something external) to use and then try to get it back when whatever we&#x27;re waiting on has finished doing its thing?&lt;/p&gt;&#xA;&lt;p&gt;This is essentially what async / await is trying to solve. It introduces a simple way for us to write code that can say &amp;quot;I&#x27;m doing something that will perform an asynchronous action now - I&#x27;m expecting to wait for a little bit and so you (the .NET hosting environment) can have my thread back for a little while&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(Before async / await, it was possible to do this but it was much more convoluted and you had to deal with code that might follow a tangled web of callbacks and you would have to manually pass around any references that you would want to access in those callbacks - it was possible to do but made for code that was harder to read and write and, thusly, was more likely to contain mistakes)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;When the .NET environment deals with &amp;quot;await&amp;quot;, the thread that the await call happened on will be free&#x27;d back up. Then, when the async work is completed, a thread will be given back to that request so that it can carry on doing its thing. You might be wondering &amp;quot;how does .NET &lt;em&gt;know&lt;/em&gt; when the work has completed? Surely that requires another thread to monitor whether the external resource has responded and, if so, aren&#x27;t we right back where we started because we&#x27;re blocking threads?&amp;quot; This is what I thought when I was first learning about async / await (and so I happen to think that it&#x27;s an entirely reasonable question!) but it&#x27;s not the case. The operating system and its drivers expose ways to say (and I&#x27;m grossly simplifying again because it&#x27;s only the gist that we need here, not the full nitty gritty) &amp;quot;start sending this network data and notify me when data starts coming back in response&amp;quot; (and similar mechanisms for other types of I/O). When that notification occurs, the .NET environment can provide a thread to the request that was awaiting and let it carry on.&lt;/p&gt;&#xA;&lt;p&gt;To try to illustrate this, imagine that the below image represents a web request. The blue parts are when computational work is being done on the thread and the white parts are when it&#x27;s waiting on an external resource (like a database) -&lt;/p&gt;&#xA;&lt;img alt=&quot;Illustration of a web request with delays for external data shown&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/Threads-SingleExample.png&quot; class=&quot;NoBorder FullWidth&quot;&gt;&#xA;&lt;p&gt;At a glance, it&#x27;s clear that there will be a lot of wasted time that a thread spends doing nothing (in a blocked state) if we&#x27;re using the old model of &amp;quot;one thread for the entirety of the request&amp;quot;. What might be slightly less easy to envisage, though, is &lt;em&gt;just how many&lt;/em&gt; unnecessary threads that we might be occupying at any given time if all requests are like this.&lt;/p&gt;&#xA;&lt;p&gt;To try to illustrate that, I&#x27;ve stacked eight identical web requests representations on top of each other, staggered slightly in time -&lt;/p&gt;&#xA;&lt;img alt=&quot;Illustration of a staggered concurrent web requests&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/Threads-Stacked.png&quot; class=&quot;NoBorder FullWidth&quot;&gt;&#xA;&lt;p&gt;Again, the blue represents time when each request is actively doing work and the white represents time when it&#x27;s waiting for something (grey before a request is time before that request arrived at the server and grey after a request is time after it completed).&lt;/p&gt;&#xA;&lt;p&gt;With the classic &amp;quot;one thread for the entirety of the request&amp;quot;, we would be using up to eight threads for much of this time; initially only one thread would be active and then the second request would arrive and a second thread would get tied up and then a third thread would be used when the third request arrived and the threads wouldn&#x27;t start getting free&#x27;d until the first request completed.&lt;/p&gt;&#xA;&lt;p&gt;On the other hand, if we could free up a request&#x27;s thread every time that it was waiting for an external resource then we would &lt;em&gt;never&lt;/em&gt; require eight threads at any one time for these eight requests because there is no point in time when all eight of the requests are actively doing work at the exact same time.&lt;/p&gt;&#xA;&lt;p&gt;Time for a graph!&lt;/p&gt;&#xA;&lt;img alt=&quot;Threads required for async vs non-async concurrent web requests&quot; src=&quot;https://www.productiverage.com/Content/Images/Posts/Threads-Graph.png&quot; class=&quot;NoBorder FullWidth&quot;&gt;&#xA;&lt;p&gt;The blue line shows the number of active requests. If we have one-thread-per-request then that blue line also shows how many threads would be required to handle those requests.&lt;/p&gt;&#xA;&lt;p&gt;The green line shows how many requests are actually doing work at any one time. If we are able to use the async / await model and only have web requests occupy threads while they&#x27;re actively doing work then this is how many threads would be required. It&#x27;s always less than the number of active requests and it&#x27;s less than &lt;em&gt;half&lt;/em&gt; for nearly all of the time in this example.&lt;/p&gt;&#xA;&lt;p&gt;The async / await model means that we need to use less threads and that&#x27;s less resources and that&#x27;s a good thing!&lt;/p&gt;&#xA;&lt;h3&gt;A lightning overview of thread distribution&lt;/h3&gt;&#xA;&lt;p&gt;There was a lot of talk above of how &amp;quot;each request is allocated a thread to work&amp;quot; and &amp;quot;a thread will be given back to that request&amp;quot; and it&#x27;s worth quickly reviewing how threads are created.&lt;/p&gt;&#xA;&lt;p&gt;A thread in C# &lt;em&gt;can&lt;/em&gt; be created using:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var thread = new Thread(nameOfMethodThatHasWorkToDoOnTheNewThread);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;However, threads are a relatively expensive resource to new up and then discard over and over again and so .NET offers a way to &amp;quot;pool&amp;quot; threads. What this boils down to is that the &lt;strong&gt;ThreadPool&lt;/strong&gt; framework class will maintain a list of threads and reuse them when someone needs one. This is used internally in many places within the .NET framework and it may be used like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ThreadPool.QueueUserWorkItem(nameOfMethodThatHasWorkToDoOnTheNewThread);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The &lt;strong&gt;ThreadPool&lt;/strong&gt; will keep track of how many threads would need to exist at any given time to service all &amp;quot;QueueUserWorkItem&amp;quot; requests and it will track this over time so it can try to keep its pool at the optimium size for the application - too many means a waste of resources but too few means that it will take longer before the work requested via &amp;quot;QueueUserWorkItem&amp;quot; calls can be executed (if there is no thread free when a &amp;quot;QueueUserWorkItem&amp;quot; is made then that work will still happen but it will be queued up until the &lt;strong&gt;ThreadPool&lt;/strong&gt; has a thread become free).&lt;/p&gt;&#xA;&lt;p&gt;It would make for a fairly simple mental model if async / await always used the &lt;strong&gt;ThreadPool&lt;/strong&gt; - if, when a request made an &amp;quot;await&amp;quot; call then it gave its current thread back to the &lt;strong&gt;ThreadPool&lt;/strong&gt; and then, when the async work was completed, the request could continue on a thread provided by the &lt;strong&gt;ThreadPool&lt;/strong&gt;. This would be straight forward and easy to understand and sometimes it &lt;em&gt;is&lt;/em&gt; the case - Console Applications and Windows Services will work like this with async / await, for example. We can picture it a bit like this:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;A Windows Service receives a request and is given Thread &amp;quot;A&amp;quot; from the &lt;strong&gt;ThreadPool&lt;/strong&gt; to start working on&lt;/li&gt;&#xA;&lt;li&gt;At some point, the request needs to perform an asynchronous action and so there is an &amp;quot;await&amp;quot; in the code - when this happens, Thread &amp;quot;A&amp;quot; is released back to the &lt;strong&gt;ThreadPool&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;When that async task has completed, the request can carry on - however, Thread &amp;quot;A&amp;quot; was given to a &lt;em&gt;different&lt;/em&gt; request while this request was waiting for the async work and so the &lt;strong&gt;ThreadPool&lt;/strong&gt; gives it Thread &amp;quot;B&amp;quot;&lt;/li&gt;&#xA;&lt;li&gt;The request does some more synchronous work on Thread &amp;quot;B&amp;quot; and finishes, so Thread &amp;quot;B&amp;quot; is released back to the &lt;strong&gt;ThreadPool&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Easy peasy.&lt;/p&gt;&#xA;&lt;h3&gt;Thread distribution troublemakers&lt;/h3&gt;&#xA;&lt;p&gt;However.. some project types get a bit possessive about their threads - when a request starts on one thread then it wants to be able to continue to use that thread forever. I suspect that this is most commonly known about WinForms projects where it was common to see code that looked like the following (that I have borrowed from a &lt;a href=&quot;https://stackoverflow.com/a/661686/3813189&quot;&gt;Stack Overflow answer&lt;/a&gt;):&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private void OnWorkerProgressChanged(object sender, ProgressChangedArgs e)&#xA;{&#xA;    // Cross thread - so you don&#x27;t get the cross-threading exception&#xA;    if (this.InvokeRequired)&#xA;    {&#xA;        this.BeginInvoke((MethodInvoker)delegate&#xA;        {&#xA;            OnWorkerProgressChanged(sender, e);&#xA;        });&#xA;        return;&#xA;    }&#xA;&#xA;    // Change control&#xA;    this.label1.Text = e.Progress;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;With WinForms, you must never block the main thread because then your whole application window will go into a &amp;quot;not responding&amp;quot; state. So, if you wanted to start a process that is unlikely to complete instantly - such as a file upload - then you might have a component that performs the work on a different thread and that has events for &amp;quot;progress changed&amp;quot; (so that it can report {x}% complete) and &amp;quot;upload completed&amp;quot;. When these events are raised, we&#x27;ll want to update the UI of the application but there is a problem: when these callbacks are executed, they will be run on the thread that the file upload is running on and not the main UI thread. The reason that this is a problem is that UI components may &lt;em&gt;only&lt;/em&gt; be updated by code that is running on the UI thread. The way around this is to check the &amp;quot;InvokeRequired&amp;quot; property on a UI component before trying to update any of the component&#x27;s properties. If &amp;quot;InvokeRequired&amp;quot; returns false then it meant that the current thread is the UI thread and that no funny business was required. However, if it returns true then it means that the current thread is &lt;em&gt;not&lt;/em&gt; the UI thread and that a special method &amp;quot;BeginInvoke&amp;quot; would have to be called, which was a way to say &amp;quot;please execute this code on the UI thread&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;Eventually, people got used to this and would ensure that they used &amp;quot;InvokeRequired&amp;quot; and  &amp;quot;BeginInvoke&amp;quot; when updating UI elements if they were dealing with code that might do some &amp;quot;background processing&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;When async / await were introduced, though, one of the aims was to make it easy and neat and tidy to write async code - basically, to be able to write code that &lt;em&gt;looked&lt;/em&gt; synchronous while still getting the benefits of being &lt;em&gt;asynchronous&lt;/em&gt;. That meant trying to avoid code that looked like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private async void btnUpload_Click(object sender, EventArgs e)&#xA;{&#xA;    var filename = await UploadContent();&#xA;&#xA;    // Why do I need to do this?! I haven&#x27;t (explicitly) fired&#xA;    // up any new threads or anything! :S&#xA;    if (this.InvokeRequired)&#xA;    {&#xA;        this.BeginInvoke((MethodInvoker)delegate&#xA;        {&#xA;            this.lblFilename.Text = filename;&#xA;        });&#xA;        return;&#xA;    }&#xA;    this.lblFilename.Text = filename;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Instead, it should just look like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private async void btnUpload_Click(object sender, EventArgs e)&#xA;{&#xA;    var filename = await UploadContent();&#xA;    this.lblFilename.Text = filename;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The problem with this is that some magic will be required somewhere. If the &lt;strong&gt;ThreadPool&lt;/strong&gt; is responsible for providing a thread to execute on after async work has completed, things are going to go wrong if it provides one thread to start the request on and a different thread to continue on after the async work has completed. It was fine for the Windows Service example request above to start on Thread &amp;quot;A&amp;quot; and then change to working on Thread &amp;quot;B&amp;quot; because Windows Services don&#x27;t have limitations on what threads can and can&#x27;t do, whereas WinForms UI components &lt;em&gt;do&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The &amp;quot;magic&amp;quot; involved is that .NET provides a way for threads to be assigned a special &amp;quot;Synchronization Context&amp;quot;. This is a mechanism that changes how async / await interacts with the &lt;strong&gt;ThreadPool&lt;/strong&gt; and makes it possible for WinForms applications to say &amp;quot;When I await an asynchronous task and that task completes, I want to carry on my work on the same thread&amp;quot;. This is why there is no need to check InvokeRequired / BeginInvoke when writing async event handlers for WinForms UI components.&lt;/p&gt;&#xA;&lt;p&gt;One downside to this is that it puts constraints on how the &lt;strong&gt;ThreadPool&lt;/strong&gt; can and can&#x27;t distribute threads and means that it&#x27;s not as free to optimise usage solely for efficiency and throughput. It also means that either the request&#x27;s thread must remain allocated to the request until the request completes (negating one of the benefits of await / async) &lt;em&gt;or&lt;/em&gt; the request may have to wait after an async call completes before the thread that it wants to continue on becomes free*.&lt;/p&gt;&#xA;&lt;p&gt;* &lt;em&gt;(I&#x27;m not actually sure which of these two options happens in real world use but it feels like the sort of thing that is an implementation detail of the framework and it would be best to not presume that it would be one or the other)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Update (Jan 2021):&lt;/strong&gt; &lt;a href=&quot;https://blog.stephencleary.com/&quot;&gt;Stephen Cleary&lt;/a&gt; pointed out in a comment that actually the situation is not quite as bad as indicated with the pre-Core ASP.NET as it has some tricks up its sleeve regarding its synchronization context - the context can actually change threads, allowing it to fully release its current thread when it is awaiting something. This means that the impact on the ThreadPool is not as bad. I have, however, still encountered deadlocks in pre-Core ASP.NET and so it makes the issue less likely but not impossible. We&#x27;re only talking about pre-Core ASP.NET here because ASP.NET on .NET Core doesn&#x27;t have a synchronization context to worry about - see the section &amp;quot;Approach Five&amp;quot; further down in this post.&lt;/p&gt;&#xA;&lt;p&gt;There is another downside, though, which is that it&#x27;s quite easy to get into bother if you try to call async code from a &lt;em&gt;non&lt;/em&gt;-async method - as I&#x27;m about to show you!&lt;/p&gt;&#xA;&lt;h3&gt;The classic deadlock (aka. &amp;quot;why has my application hung?&amp;quot;)&lt;/h3&gt;&#xA;&lt;p&gt;This problem has been encountered so many times that a lot of async&#x27;ers recognise it straight away and there are plenty of questions on Stack Overflow about it. There is also good advice that  is often repeated about how to prevent it. However, I think that it&#x27;s particularly nasty because the code might not look hideously wrong at a glance but it will be able to cause your application to hang when it&#x27;s run - not throw an exception (which at least makes it clear where something has gone wrong), but to just &lt;em&gt;hang&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public class HomeController&#xA;{&#xA;    public ActionResult Index()&#xA;    {&#xA;        return View(&#xA;            GetTitleAsync().Result&#xA;        );&#xA;    }&#xA;&#xA;    private async Task&amp;lt;string&amp;gt; GetTitleAsync()&#xA;    {&#xA;        // This Task.Delay call simulates an async call that might go off to the&#xA;        // database or other external service&#xA;        await Task.Delay(1000);&#xA;        return &amp;quot;Hello!&amp;quot;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;When I encountered this problem, I was much deeper down the stack but the concept was the same -&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;I was in code that was being called by an MVC action method and that method was not async&lt;/li&gt;&#xA;&lt;li&gt;I needed to call an async method&lt;/li&gt;&#xA;&lt;li&gt;I tried to access &amp;quot;.Result&amp;quot; on the task that I got back from the async method - this will block the current thread until the task completes&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;The key factor&lt;/strong&gt;: ASP.NET applications also have a special synchronization context, similar to the WinForms one in that it returns to the same thread after an async call completes&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If you ran the code above then something like the following chain of events would occur:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Thread &amp;quot;A&amp;quot; would be given to the request to run on and &amp;quot;Index&amp;quot; would be called&lt;/li&gt;&#xA;&lt;li&gt;Thread &amp;quot;A&amp;quot; would call &amp;quot;GetTitleAsync&amp;quot; and get a &lt;strong&gt;Task&amp;lt;string&amp;gt;&lt;/strong&gt; reference&lt;/li&gt;&#xA;&lt;li&gt;Thread &amp;quot;A&amp;quot; would then request the &amp;quot;.Result&amp;quot; property of that task and would block until the task completed&lt;/li&gt;&#xA;&lt;li&gt;The &amp;quot;Task.Delay&amp;quot; call would complete and .NET would try to continue the &amp;quot;GetTitleAsync&amp;quot; work&lt;/li&gt;&#xA;&lt;li&gt;The ASP.NET synchronization context would require that work continue on Thread &amp;quot;A&amp;quot; and so the work would be placed on a queue for Thread &amp;quot;A&amp;quot; to deal with when it gets a chance (the &amp;quot;work&amp;quot; in this case is simply the line that returns the string &amp;quot;Hello!&amp;quot; but that code has to be executed somewhere)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;And this is how we become stuck!&lt;/p&gt;&#xA;&lt;p&gt;Thread &amp;quot;A&amp;quot; is waiting for the &amp;quot;GetTitleAsync&amp;quot; work to complete but the &amp;quot;GetTitleAsync&amp;quot; work can not complete until Thread &amp;quot;A&amp;quot; gets involved (which it can&#x27;t because it&#x27;s in a blocked state).&lt;/p&gt;&#xA;&lt;p&gt;This is the problem and it seem oh-so-obvious if you know how async / await work and about the ASP.NET synchronization context and if you&#x27;re paying close attention when you&#x27;re writing this sort of code. But if you &lt;em&gt;don&#x27;t&lt;/em&gt; then you get a horrible runtime problem.&lt;/p&gt;&#xA;&lt;p&gt;So let&#x27;s look at solutions.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Approach one: Don&#x27;t mix async and non-async code&lt;/strong&gt;. This is good advice when starting new codes - begin with async and then it&#x27;s async all the way down, no blocking of threads while accessing &amp;quot;.Result&amp;quot; and so no problem! However, with a big project it&#x27;s not very helpful.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Approach two: Always use &amp;quot;.ConfigureAwait(false)&amp;quot;&lt;/strong&gt;. This is the oft-repeated good advice that I mentioned earlier. As a rule of thumb, many people recommend &lt;em&gt;always&lt;/em&gt; including &amp;quot;.ConfigureAwait(false)&amp;quot; when you use await, like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;await Task.Delay(1000).ConfigureAwait(false);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The &amp;quot;false&amp;quot; value is for the &amp;quot;continueOnCapturedContext&amp;quot; parameter and this parameter effectively overrides the synchronization context about what thread the work must continue on when the async work has completed.&lt;/p&gt;&#xA;&lt;p&gt;If we changed our code to this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public class HomeController&#xA;{&#xA;    public ActionResult Index()&#xA;    {&#xA;        return View(&#xA;            GetTitleAsync().Result&#xA;        );&#xA;    }&#xA;&#xA;    private async Task&amp;lt;string&amp;gt; GetTitleAsync()&#xA;    {&#xA;        // This Task.Delay call simulates an async call that might go off to the&#xA;        // database or other external service&#xA;        await Task.Delay(1000).ConfigureAwait(false);&#xA;        return &amp;quot;Hello!&amp;quot;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. then the chain of events goes more like this:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Thread &amp;quot;A&amp;quot; would be given to the request to run on and &amp;quot;Index&amp;quot; would be called&lt;/li&gt;&#xA;&lt;li&gt;Thread &amp;quot;A&amp;quot; would call &amp;quot;GetTitleAsync&amp;quot; and get a &lt;strong&gt;Task&amp;lt;string&amp;gt;&lt;/strong&gt; reference&lt;/li&gt;&#xA;&lt;li&gt;Thread &amp;quot;A&amp;quot; would then request the &amp;quot;.Result&amp;quot; property of that task and would block until the task completed&lt;/li&gt;&#xA;&lt;li&gt;The &amp;quot;Task.Delay&amp;quot; call would complete and .NET would try to continue the &amp;quot;GetTitleAsync&amp;quot; work&lt;/li&gt;&#xA;&lt;li&gt;Because we used &amp;quot;.ConfigureAwait(false)&amp;quot;, we are not restricted in terms of where can continue the &amp;quot;GetTitleAsync&amp;quot; work and so that will be done on Thread &amp;quot;B&amp;quot;&lt;/li&gt;&#xA;&lt;li&gt;The work for Thread &amp;quot;B&amp;quot; is simply to complete the &lt;strong&gt;Task&amp;lt;string&amp;gt;&lt;/strong&gt; by setting its result to &amp;quot;Hello!&amp;quot; (Thread &amp;quot;B&amp;quot; does this and then it is released back to the &lt;strong&gt;ThreadPool&lt;/strong&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Since the &lt;strong&gt;Task&amp;lt;string&amp;gt;&lt;/strong&gt; has completed, Thread &amp;quot;A&amp;quot; is no longer blocking on the &amp;quot;.Result&amp;quot; access and it can carry on with its work and return the &lt;strong&gt;ActionResult&lt;/strong&gt; from the method&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The good news here is that this solves the problem - there is no longer a deadlock that can occur!&lt;/p&gt;&#xA;&lt;p&gt;The bad news is that you must remember to add &amp;quot;.ConfigureAwait(false)&amp;quot; to your await calls. If you forget then there is a chance that your code will result in an application hang and you won&#x27;t find out until runtime. I don&#x27;t like this because one of the reasons that I enjoy C# as a strongly-typed language is that the compiler can catch so many mistakes and I &lt;em&gt;don&#x27;t&lt;/em&gt; have to wait until runtime to find problems much of the time. One way to make life easier on this front is to help the compiler help you by installing an analyser, such as the &lt;a href=&quot;https://www.nuget.org/packages/ConfigureAwaitChecker.Analyzer/&quot;&gt;ConfigureAwaitChecker.Analyzer&lt;/a&gt;. Installing this should result in you getting warnings in Visual Studio if you don&#x27;t include &amp;quot;.ConfigureAwait(false)&amp;quot; after any await.&lt;/p&gt;&#xA;&lt;p&gt;Another possible (and subjective) downside to this approach is that it makes the code &amp;quot;noisier&amp;quot; - if &amp;quot;.ConfigureAwait(false)&amp;quot; should be used almost every time you use &amp;quot;await&amp;quot; then shouldn&#x27;t it be the default behaviour and it be the case that you should have to include extra code if you &lt;em&gt;don&#x27;t&lt;/em&gt; want that behaviour? You may not agree with me but it feels like an extra burden that I&#x27;d rather live without.&lt;/p&gt;&#xA;&lt;p&gt;Instead, we could consider..&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Approach three: Disabling the synchronization context before calling async code&lt;/strong&gt;. The .NET environment allows the host to specify its own synchronization context but it also allows &lt;em&gt;any&lt;/em&gt; code to specify a particular context. We could use this to our advantage by doing something like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public class HomeController&#xA;{&#xA;    public ActionResult Index()&#xA;    {&#xA;        // Get a reference to whatever the current context is, so that we can set&#xA;        // it back after the async work is done&#xA;        var currentSyncContext = SynchronizationContext.Current;&#xA;        string result;&#xA;        try&#xA;        {&#xA;            // Set the context to null so that any restrictions are removed that&#xA;            // relate to what threads async code can continue on&#xA;            SynchronizationContext.SetSynchronizationContext(null);&#xA;&#xA;            // Block this thread until the async work is complete&#xA;            result = GetTitleAsync().Result;&#xA;        }&#xA;        finally&#xA;        {&#xA;            // Set the context back to whatever it was before&#xA;            SynchronizationContext.SetSynchronizationContext(currentSyncContext);&#xA;        }&#xA;&#xA;        return View(result);&#xA;    }&#xA;&#xA;    private async Task&amp;lt;string&amp;gt; GetTitleAsync()&#xA;    {&#xA;        // This Task.Delay call simulates an async call that might go off to the&#xA;        // database or other external service&#xA;        await Task.Delay(1000);&#xA;        return &amp;quot;Hello!&amp;quot;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This means that we don&#x27;t have to use &amp;quot;.ConfigureAwait(false)&amp;quot; and we &lt;em&gt;still&lt;/em&gt; don&#x27;t get any deadlocks. We can include code like this at the boundary where non-async code calls async code and then we won&#x27;t have to worry about whether the async code includes any await calls that do not specify &amp;quot;.ConfigureAwait(false)&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;You wouldn&#x27;t want to include this extra code &lt;em&gt;every&lt;/em&gt; time that you called async code from non-async code and so it would make sense to encapsulate the logic in a method. Something like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public class HomeController : Controller&#xA;{&#xA;    public ActionResult Index()&#xA;    {&#xA;        return View(&#xA;            AsyncCallHelpers.WaitForAsyncResult(GetTitleAsync())&#xA;        );&#xA;    }&#xA;&#xA;    private async static Task&amp;lt;string&amp;gt; GetTitleAsync()&#xA;    {&#xA;        // This Task.Delay call simulates an async call that might go off to the&#xA;        // database or other external service&#xA;        await Task.Delay(1000);&#xA;        return &amp;quot;Hello!&amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;public static class AsyncCallHelpers&#xA;{&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Avoid the &#x27;classic deadlock problem&#x27; when blocking on async work from non-async&#xA;    /// code by disabling any synchronization context while the async work takes place&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    public static T WaitForAsyncResult&amp;lt;T&amp;gt;(Task&amp;lt;T&amp;gt; work)&#xA;    {&#xA;        var currentSyncContext = SynchronizationContext.Current;&#xA;        try&#xA;        {&#xA;            SynchronizationContext.SetSynchronizationContext(null);&#xA;            return work.Result;&#xA;        }&#xA;        finally&#xA;        {&#xA;            SynchronizationContext.SetSynchronizationContext(currentSyncContext);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;I think that this is quite an elegant solution and makes for clear code (it is hopefully fairly clear to a reader of the code that there is something interesting going on at the non-async / async boundary and there is a nice summary comment explaining why).&lt;/p&gt;&#xA;&lt;p&gt;A variation on this theme is..&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Approach four: Use a custom INotifyCompletion implementation&lt;/strong&gt;. When &lt;strong&gt;Task&lt;/strong&gt;/&lt;strong&gt;Task&amp;lt;T&amp;gt;&lt;/strong&gt; was added to .NET along with async / await, the design included ways to override how awaiting a task should be handled and this gives us another way to remove the synchronization context for async work. We can take advantage of this facility by doing something like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public class HomeController : Controller&#xA;{&#xA;    public ActionResult Index()&#xA;    {&#xA;        return View(&#xA;            GetTitleAsync().Result&#xA;        );&#xA;    }&#xA;&#xA;    private async static Task&amp;lt;string&amp;gt; GetTitleAsync()&#xA;    {&#xA;        await new SynchronizationContextRemover();&#xA;&#xA;        // This Task.Delay call simulates an async call that might go off to the&#xA;        // database or other external service&#xA;        await Task.Delay(1000);&#xA;        return &amp;quot;Hello!&amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;/// &amp;lt;summary&amp;gt;&#xA;/// This prevents any synchronization context from affecting what happens within&#xA;/// an async method and so we don&#x27;t need to worry if a non-async caller wants to&#xA;/// block while waiting for the result of the async method&#xA;/// &amp;lt;/summary&amp;gt;&#xA;public struct SynchronizationContextRemover : INotifyCompletion&#xA;{&#xA;    public bool IsCompleted =&amp;gt; SynchronizationContext.Current == null;&#xA;&#xA;    public void OnCompleted(Action continuation)&#xA;    {&#xA;        var prevContext = SynchronizationContext.Current;&#xA;        try&#xA;        {&#xA;            SynchronizationContext.SetSynchronizationContext(null);&#xA;            continuation();&#xA;        }&#xA;        finally&#xA;        {&#xA;            SynchronizationContext.SetSynchronizationContext(prevContext);&#xA;        }&#xA;    }&#xA;&#xA;    public SynchronizationContextRemover GetAwaiter() =&amp;gt; this;&#xA;&#xA;    public void GetResult() { }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;em&gt;(This code comes from the article &amp;quot;&lt;a href=&quot;https://blogs.msdn.microsoft.com/benwilli/2017/02/09/an-alternative-to-configureawaitfalse-everywhere/&quot;&gt;An alternative to ConfigureAwait(false) everywhere&lt;/a&gt;&amp;quot;)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;This has the same effect as the previous approach - it removes any synchronization context until the async work has completed - but there is an important difference in how it is implemented:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;When &lt;strong&gt;disabling the synchronization context before calling async code&lt;/strong&gt;, the extra code is included in the non-async code that is calling the async code&lt;/li&gt;&#xA;&lt;li&gt;When we &lt;strong&gt;use a custom INotifyCompletion implementation&lt;/strong&gt;, the extra code is included in the async code and the non-async calling code does not need to be changed&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I prefer these two approaches and choosing which of them to use comes down to what code I&#x27;m writing and what code I&#x27;m integrating with. For example:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If I was writing the non-async code and I needed to call into a trusted and battle-tested async library then I might be tempted to do nothing at all because I would expect such a library to follow recommended practices such as using &amp;quot;.ConfigureAwait(false)&amp;quot; internally&lt;/li&gt;&#xA;&lt;li&gt;If I was writing non-async code that had to call into async code that I was less confident about then I would call it using &amp;quot;AsyncCallHelpers.WaitForAsyncResult&amp;quot; to be sure that nothing was going to go awry&lt;/li&gt;&#xA;&lt;li&gt;Note: This only applies to non-async code that will be hosted in an environment that uses a synchronization context that I need to be worried about (such as ASP.NET or WinForms but &lt;em&gt;not&lt;/em&gt; Console Applications or Windows Services)&lt;/li&gt;&#xA;&lt;li&gt;If I was writing async code that might be called from different environments (where an awkward synchronization context might come into play), then I would use the &lt;strong&gt;SynchronizationContextRemover&lt;/strong&gt; approach at the public boundaries (so that I wouldn&#x27;t need to specify &amp;quot;.ConfigureAwait(false)&amp;quot; everytime that I await something in my code)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3&gt;Two more &amp;quot;solutions&amp;quot; to round out the post&lt;/h3&gt;&#xA;&lt;p&gt;To quickly recap, the commonly-suggested recommendations for avoiding the &#x27;classic deadlock problem&#x27; are:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Don&#x27;t mix async and non-async code&lt;/li&gt;&#xA;&lt;li&gt;Always use &amp;quot;.ConfigureAwait(false)&amp;quot;&lt;/li&gt;&#xA;&lt;li&gt;Disabling the synchronization context before calling async code&lt;/li&gt;&#xA;&lt;li&gt;Use a custom INotifyCompletion implementation&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;.. but there are two others that I think are worthy of mention.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Approach five: Use ASP.NET Core&lt;/strong&gt; - the synchronization context that was used for previous versions of ASP.NET is not present in ASP.NET Core and so you don&#x27;t have to worry if you&#x27;re able to use it. If you already have a large application using non-Core ASP.NET that you are trying to introduce some async code into then whether or not this approach is feasible will likely depend upon your current code base and how much time you are willing to spend on migrating to ASP.NET Core.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Approach six: Use Task.Run&lt;/strong&gt; - this is a workaround that I have seen in some Stack Overflow answers. We could change our example code to look like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public class HomeController&#xA;{&#xA;    public ActionResult Index()&#xA;    {&#xA;        var result = Task.Run(async () =&amp;gt; { return await GetTitleAsync(); }).Result;&#xA;        return View(result);&#xA;    }&#xA;&#xA;    private async Task&amp;lt;string&amp;gt; GetTitleAsync()&#xA;    {&#xA;        // This Task.Delay call simulates an async call that might go off to the&#xA;        // database or other external service&#xA;        await Task.Delay(1000);&#xA;        return &amp;quot;Hello!&amp;quot;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This works because &amp;quot;Task.Run&amp;quot; will result in work being performed on a &lt;strong&gt;ThreadPool&lt;/strong&gt; thread and so the thread that calls into GetTitleAsync will not be associated with an ASP.NET synchronization context and so the deadlock won&#x27;t occur.&lt;/p&gt;&#xA;&lt;p&gt;It feels more like a workaround, rather than a real solution, and I don&#x27;t like the way that it&#x27;s not as obvious from reading the code &lt;em&gt;why&lt;/em&gt; it works. It &lt;em&gt;could&lt;/em&gt; be wrapped in a method like &amp;quot;AsyncCallHelpers.WaitForAsyncResult&amp;quot; so that comments could be added to explain why it&#x27;s being used but I feel like if you were going to do that then you would be better to use one of the more explicit approaches (such as the &amp;quot;AsyncCallHelpers.WaitForAsyncResult&amp;quot; method shown earlier). I have included it in this post only for completeness and because it is presented as a solution sometimes!&lt;/p&gt;&#xA;&lt;h3&gt;Further reading&lt;/h3&gt;&#xA;&lt;p&gt;To try to keep this post focused, I&#x27;ve skipped over and simplified some of the details involved in how async and await work. I think that it&#x27;s testament to the C# language designers that it can be such a complicated topic while the code &amp;quot;just works&amp;quot; most of the time, without you having to be aware of how it works all the way down.&lt;/p&gt;&#xA;&lt;p&gt;If you would like to find more then I would recommend the following articles. I read and re-read all of them while writing this to try to make sure that I wasn&#x27;t over-simplifying &lt;em&gt;too&lt;/em&gt; much (and to try ensure that I didn&#x27;t say anything patently false!)..&lt;/p&gt;&#xA;&lt;p&gt;Stephen Cleary&#x27;s &amp;quot;&lt;a href=&quot;https://blog.stephencleary.com/2013/11/there-is-no-thread.html&quot;&gt;There is no thread&lt;/a&gt;&amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;Also Stephen Cleary&#x27;s (this time published on msdn.microsoft.com) &amp;quot;&lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/gg598924.aspx&quot;&gt;Parallel Computing - It&#x27;s All About the SynchronizationContext&lt;/a&gt;&amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;Dixin&#x27;s &amp;quot;&lt;a href=&quot;https://weblogs.asp.net/dixin/understanding-c-sharp-async-await-2-awaitable-awaiter-pattern&quot;&gt;Understanding C# async / await: The Awaitable-Awaiter Pattern&lt;/a&gt;&amp;quot;&lt;/p&gt;&#xA;</description>
                <pubDate>Sun, 30 Sep 2018 20:09:00 GMT</pubDate>
            </item>
            <item>
                <title>Writing F# to implement &#x27;The Single Layer Perceptron&#x27;</title>
                <link>https://www.productiverage.com/writing-f-sharp-to-implement-the-single-layer-perceptron</link>
                <guid>https://www.productiverage.com/writing-f-sharp-to-implement-the-single-layer-perceptron</guid>
                <description>&lt;h3&gt;TL;DR&lt;/h3&gt;&#xA;&lt;p&gt;This picks up from my last post &lt;a href=&quot;https://www.productiverage.com/learning-f-sharp-via-some-machine-learning-the-single-layer-percepton&quot;&gt;Learning F# via some Machine Learning: The Single Layer Perceptron&lt;/a&gt; where I described a simple neural network (&amp;quot;The Single Layer Perceptron&amp;quot;) and took a C# implementation (from an article on the site &lt;a href=&quot;http://www.robosoup.com/2008/09/the-single-layer-perceptron-c.html&quot;&gt;Robosoup&lt;/a&gt;) and rewrote it into a style of &amp;quot;functional C#&amp;quot; with the intention of then translating it into F#. Trying to do that all in one post would have made for a very &lt;em&gt;very&lt;/em&gt; long read and so part two, here, picks things up from that point.&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;m still an F# beginner and so I&#x27;m hoping that having the pain so fresh in my mind of trying to pick it up as a new language will make it easier for me to help others get started. I&#x27;m going to assume zero knowledge from the reader.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(I&#x27;m also going to try to dive straight right into things, rather than covering loads of theory first - I think that there are a lot of good resources out there that introduce you to F# and functional concepts at a more abstract level but I&#x27;m going to take the approach that we want to tackle something specific and we&#x27;ll discuss new F# concepts only when we encounter them while trying to get this work done!)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3&gt;Translating the code into F#&lt;/h3&gt;&#xA;&lt;p&gt;Visual Studio 2017 includes support for F# without having to install anything extra. To get started, create a new project of type Visual F# / Console Application. This will generate a Program.fs file that will let you build and run (it won&#x27;t be anything very interesting if you run it but that doesn&#x27;t matter because we&#x27;re going rewrite the file from scratch!).&lt;/p&gt;&#xA;&lt;p&gt;In the C# code from last time, the core logic was contained within a static method called &amp;quot;Go&amp;quot; within a static class. To set up the scaffolding for something similar in F# we&#x27;ll use the following code:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;open System;&#xA;&#xA;let private Go (r: Random) =&#xA;    &amp;quot;TODO: Implement this&amp;quot;&#xA;&#xA;[&amp;lt;EntryPoint&amp;gt;]&#xA;let private Main _ =&#xA;    Go (new Random(0)) |&amp;gt; ignore&#xA;    0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;In F#, functions are declared by the keyword &amp;quot;let&amp;quot; optionally followed by an accessibility modifier (eg. &amp;quot;private&amp;quot;) followed by their name followed by their arguments followed by &amp;quot;=&amp;quot; followed by the function body.&lt;/p&gt;&#xA;&lt;p&gt;The last line of the function body will be a value that is returned by the function (unlike C#, there is no need for an explicit &amp;quot;return&amp;quot; keyword).&lt;/p&gt;&#xA;&lt;p&gt;Above, there is a function &amp;quot;Go&amp;quot; that takes a &lt;strong&gt;Random&lt;/strong&gt; argument named &amp;quot;r&amp;quot; and that returns a string. The return type is not explicitly declared anywhere but F# relies upon type inference a lot of the time to make reduce the &amp;quot;syntactic noise&amp;quot; around declaring types where the compiler can work them out on its own. If you wanted reassurance that the type inference has worked as you expect then you can hover over the word &amp;quot;Go&amp;quot; and you&#x27;ll see the following signature for the function -&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;val private Go : r:Random -&amp;gt; string&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This confirms that the function &amp;quot;Go&amp;quot; takes an argument named &amp;quot;r&amp;quot; of type &lt;strong&gt;random&lt;/strong&gt; and that it returns a &lt;strong&gt;string&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;If we changed the &amp;quot;Go&amp;quot; function to this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let private Go r =&#xA;    &amp;quot;TODO: Implement this&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and then hovered over the word &amp;quot;Go&amp;quot; then we&#x27;d see the following signature:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;val private Go : r:&#x27;a -&amp;gt; string&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This essentially means that the type &amp;quot;r&amp;quot; is not fixed and that it may be any type because there is no way for the compiler to apply any restrictions to it based upon the code that it has access to. When comparing to C#, you might imagine that this would be equivalent to this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private string Go(object r)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. but it would actually be more accurate to think about it like a generic method - eg.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private string Go&amp;lt;T&amp;gt;(T r)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The difference isn&#x27;t important right now it&#x27;s worth bearing in mind.&lt;/p&gt;&#xA;&lt;p&gt;There&#x27;s also a function &amp;quot;Main&amp;quot; that takes a single string argument argument named &amp;quot;_&amp;quot; and that returns an int. Just looking at this code, you may imagine that &amp;quot;_&amp;quot; would also be of an unknown / generic type but if you hover to the word &amp;quot;Main&amp;quot; then you&#x27;ll see this signature:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;val private main : string [] -&amp;gt; int&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;F# has applied some extra logic here, based upon the fact that the function has been annotated with &lt;strong&gt;[&amp;lt;EntryPoint&amp;gt;]&lt;/strong&gt; - this requires that the function matches the particular signature of string-array-to-string and you will get a compile error if you try to declare a function signature that differs from this.&lt;/p&gt;&#xA;&lt;p&gt;The string array is a list of arguments passed to the compiled executable if called from the command line. This will never be of use in this program and so I&#x27;ve named that argument &amp;quot;_&amp;quot; to tell F# that I will never want to access it. I do this because F# will warn you if you have any unused arguments because it suggests that you have forgotten something (why specify an argument if you don&#x27;t need it??). If you really don&#x27;t care about one, though (as is the case here), if you give it an underscore prefix (or call it simply &amp;quot;_&amp;quot;) then the compiler won&#x27;t warn you about it.&lt;/p&gt;&#xA;&lt;p&gt;In a similar vein, F# will warn you if you call a function and ignore its return value. If the idea is that all functions be pure (and so have no side effects) then a function is useless if you ignore its return value. In the scaffolding above, though, we just want to call &amp;quot;Go&amp;quot; (which will do some calculations and write a summary to the console) - we don&#x27;t really care about its return value. To tell the compiler this, we use a special function called &amp;quot;ignore&amp;quot; that we pass the return value of the &amp;quot;Go&amp;quot; function to. The C# way to do this might look something like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;ignore(Go(new Random(0)))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This is valid F# but it&#x27;s criticised as having to be read &amp;quot;inside out&amp;quot;. It&#x27;s more common in F# to see it like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Go (new Random(0)) |&amp;gt; ignore&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The &amp;quot;pipe forward&amp;quot; operator (|&amp;gt;) effectively means take the value on the left and use it as the last argument in the function on the right. Since &amp;quot;ignore&amp;quot; only takes one argument, the two versions above are equivalent.&lt;/p&gt;&#xA;&lt;p&gt;If a function has more than one argument then the pipe operator only provides the last one. To illustrate this, consider the method &amp;quot;List.map&amp;quot; that takes two arguments; a &amp;quot;mapping&amp;quot; delegate and a list of items. It&#x27;s very similar to LINQ&#x27;s &amp;quot;Select&amp;quot; method. You could call it like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let numbers = [1;2;3]&#xA;let squares = List.map (fun x -&amp;gt; x * x) numbers&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;I&#x27;ll breeze through some of the syntax above in a moment but the important point here is that there is a method that takes two arguments where the second is a list.&lt;/p&gt;&#xA;&lt;p&gt;It could be argued that this syntax is back-to-front because you may describe this in English as:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;given a list of values, perform an operation on each item (and return a new list containing the transformed - or &amp;quot;mapped&amp;quot; - values)&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;.. but the code puts things in the opposite order (&amp;quot;list of values&amp;quot; is mentioned last instead of first).&lt;/p&gt;&#xA;&lt;p&gt;However, the pipe operator changes that -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let numbers = [1;2;3]&#xA;let squares = numbers |&amp;gt; List.map (fun x -&amp;gt; x * x)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The code now is able to say &amp;quot;here is the list, perform this operation on each value to provide me with a new list&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;Because the pipe operator passes the value on the left as the &lt;em&gt;last&lt;/em&gt; argument to the function on the right, F# often has list-based functions where the list is the last argument. This is often the opposite order to C# functions, where the &amp;quot;subject&amp;quot; of the operation is the commonly first argument.&lt;/p&gt;&#xA;&lt;p&gt;Now, as promised, a quick rundown of F# syntax introduced above. The &amp;quot;let&amp;quot; keyword is very similar to C#&#x27;s &amp;quot;var&amp;quot; in that it use type inference to determine what type the specific reference should be. &lt;em&gt;Unlike&lt;/em&gt; &amp;quot;var&amp;quot;, though, you can&#x27;t change the reference later on - eg.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let numbers = [1;2;3]&#xA;&#xA;// Invalid! This &amp;quot;=&amp;quot; operator is treated as a comparison whose return value is ignored&#xA;// rather than this statement being a reassignment - the &amp;quot;numbers&amp;quot; reference is still&#xA;// a list with the values 1, 2 and 3 (a compiler warning will be displayed)&#xA;numbers = [1;2;3;4]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Because F# &lt;em&gt;only&lt;/em&gt; allows you to set value in statements that include the &amp;quot;let&amp;quot; operator, it makes it easier for the F# compiler to know whether the code fragment:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;a = b&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;is an assignment or a comparison - if it follows a &amp;quot;let&amp;quot; then it&#x27;s always an assignment but otherwise it&#x27;s a comparison.&lt;/p&gt;&#xA;&lt;p&gt;This is unlike C# where the following is acceptable:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var numbers = new[] { 1, 2, 3 };&#xA;&#xA;// This is allowed in C#&#xA;numbers = new[] { 1, 2, 3, 4 };&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and this means that the C# compiler can&#x27;t as easily tell whether the code fragment &amp;quot;a = b&amp;quot; is an assignment or a comparison and &lt;em&gt;that&lt;/em&gt; is why C# has the assignment operator &amp;quot;=&amp;quot; and a separate equality comparison operator &amp;quot;==&amp;quot; (and why F# can use &amp;quot;=&amp;quot; as both the assignment operator &lt;em&gt;and&lt;/em&gt; equality comparison operator).&lt;/p&gt;&#xA;&lt;p&gt;The next thing to talk about is that F# allows you to declare a list of values using square brackets and semi-colons as the separators. So the below are &lt;em&gt;similar&lt;/em&gt; (but not equivalent, as I&#x27;ll explain) in C#&lt;br&gt;&#xA;and F# -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var numbers = new List&amp;lt;int&amp;gt; { 1, 2, 3 }; // C#&#xA;&#xA;let numbers = [1;2;3] // F#&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The reason that they&#x27;re similar and not identical is that the C# code uses the &lt;strong&gt;System.Collections.Generic.List&amp;lt;T&amp;gt;&lt;/strong&gt; type, which is mutable (you can add, remove and replace items within a list). In F#, the list is &lt;em&gt;immutable&lt;/em&gt; and so any operation (such as add, remove or replace) would return a new list reference, rather than mutating the existing list.&lt;/p&gt;&#xA;&lt;p&gt;You may have noticed that semi-colons are not present at the end of each F# line in the examples above. That&#x27;s because they are not required. F# uses whitespace (such as line returns and indenting) to determine when statements terminate and when they continue and so semi-colons are not used to specify where statements finish (unlike in C#, where they are).&lt;/p&gt;&#xA;&lt;p&gt;Finally, there was a delegate shown in the above code -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;(fun x -&amp;gt; x * x)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This is an anonymous function. The F# code:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let numbers = [1;2;3]&#xA;let squares = numbers |&amp;gt; List.map (fun x -&amp;gt; x * x)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;is roughly the same as the following C# code:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var numbers = new[] { 1, 2, 3 };&#xA;var squares = numbers.Select(x =&amp;gt; x * x);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;It&#x27;s not &lt;em&gt;precisely&lt;/em&gt; the same since &amp;quot;numbers&amp;quot; in the F# code is an immutable list reference and in C# it&#x27;s an array but it&#x27;s close enough. The point is that the &amp;quot;fun&amp;quot; keyword is used to declare an anonymous function and that brackets are required around that function declaration in order to segregate that code and make it clear to the compiler that the function declaration should be considered as a single value that is being passed to the &amp;quot;List.map&amp;quot; function.&lt;/p&gt;&#xA;&lt;h3&gt;Declaring training data&lt;/h3&gt;&#xA;&lt;p&gt;In the C# perceptron code from &lt;a href=&quot;https://www.productiverage.com/learning-f-sharp-via-some-machine-learning-the-single-layer-percepton&quot;&gt;last week&lt;/a&gt;, there was an array of &lt;strong&gt;Tuple&lt;/strong&gt; values that contained each pair of inputs and the expected result -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var trainingData = new[]&#xA;{&#xA;  Pattern(0.08, 0.94, true),&#xA;&#xA;  // .. more patterns&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The &amp;quot;Pattern&amp;quot; function was just this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static Tuple&amp;lt;double[], bool&amp;gt; Pattern(double x, double y, bool output)&#xA;{&#xA;  return Tuple.Create(new[] { x, y }, output);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The &lt;strong&gt;Tuple&lt;/strong&gt; class is a very convenient way to represent small groups of values (such as an input array and the expected boolean output) but one thing that I don&#x27;t like is that the properties are named &amp;quot;Item1&amp;quot;, &amp;quot;Item2&amp;quot;, etc.. rather than it being possible to give them more descriptive labels.&lt;/p&gt;&#xA;&lt;p&gt;I could have defined a class to contain these values but that can involve a lot of boilerplate code (particularly if it&#x27;s an immutable class, which would be my preference when creating classes that describe data that should be initialised once and never changed).&lt;/p&gt;&#xA;&lt;p&gt;Fortunately, F# has a convenient way to describe data like this called &amp;quot;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/records&quot;&gt;Records&lt;/a&gt;&amp;quot; - immutable types that may be defined using very little syntax, such as by pasting the following into the F# scaffolding from earlier, just after &amp;quot;Open System&amp;quot; -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type private Input = { Values: float list; Result: bool }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;It is now possible to define an input list / output boolean object with properties name &amp;quot;Values&amp;quot; and &amp;quot;Result&amp;quot; like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let x = { Values = [0.08; 0.94]; Result = true }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The type of &amp;quot;x&amp;quot; is not explicitly specified in the code but the compiler will be able to match it to the &lt;strong&gt;Input&lt;/strong&gt; type.&lt;/p&gt;&#xA;&lt;h3&gt;double vs float&lt;/h3&gt;&#xA;&lt;p&gt;Note that I&#x27;ve defined the &amp;quot;Values&amp;quot; property to be of type &amp;quot;float list&amp;quot; (which is equivalent to &amp;quot;list&amp;lt;float&amp;gt;&amp;quot; - which is also valid syntax in F#) as opposed to &amp;quot;double list&amp;quot;. In C#, &lt;strong&gt;Double&lt;/strong&gt; and &lt;strong&gt;double&lt;/strong&gt; represent a &amp;quot;double-precision floating point number&amp;quot; while &lt;strong&gt;Single&lt;/strong&gt; and &lt;strong&gt;float&lt;/strong&gt; represent a &amp;quot;single-precision floating point number&amp;quot;. In F#, &lt;strong&gt;float&lt;/strong&gt; is a double-precision floating point number while &lt;strong&gt;float32&lt;/strong&gt; is a &lt;em&gt;single&lt;/em&gt;-precision floating point number. So &amp;quot;float&amp;quot; in F# is the same as &amp;quot;double&amp;quot; in C#. To make things more confusing, you can also specify the type &lt;strong&gt;double&lt;/strong&gt; in F# and it means the same as &lt;strong&gt;float&lt;/strong&gt; in F# - however, type signatures in the F# library specify &lt;strong&gt;float&lt;/strong&gt; when a double-precision floating point number is returned and so I&#x27;m specifying &lt;strong&gt;float&lt;/strong&gt; to try to be consistent with other F# code. For example, the library function &amp;quot;Double.Parse&amp;quot; returns &lt;strong&gt;float&lt;/strong&gt; according to intellisense.&lt;/p&gt;&#xA;&lt;p&gt;This seems quite confusing to me (coming at this from C#) but I decided to try to be as F#-like as possible and so &amp;quot;float list&amp;quot; is what I&#x27;m using.&lt;/p&gt;&#xA;&lt;h3&gt;Back to declaring training data..&lt;/h3&gt;&#xA;&lt;p&gt;To declare all of the training data in F#, we want a list of patterns -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let trainingData = [&#xA;    { Values = [0.08; 0.94]; Result = true }&#xA;    { Values = [0.13; 0.95]; Result = true }&#xA;&#xA;    // .. more patterns&#xA;  ]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;When declaring a list (items within square brackets), they may either be separated by semi-colons or by line returns. So, above, each pattern is on its own line and so no semi-colons need to separate them while the individual numbers within the &amp;quot;Values&amp;quot; lists &lt;em&gt;do&lt;/em&gt; need semi-colon separators since there are no line returns to break them up.&lt;/p&gt;&#xA;&lt;p&gt;In the C# code, the &amp;quot;Pattern&amp;quot; function specifically took two &amp;quot;x&amp;quot; and &amp;quot;y&amp;quot; arguments and so each &lt;strong&gt;Tuple&lt;/strong&gt; had an &amp;quot;Item1&amp;quot; property which was an array with two elements. In the above code, there would be no compiler warning if I accidentally included a line where the pattern had more &amp;quot;Values&amp;quot; entries than the others. As a sanity check, we can include the following code after the &amp;quot;trainingData&amp;quot; list is declared -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let inputLengths =&#xA;    trainingData&#xA;    |&amp;gt; List.map (fun input -&amp;gt; input.Values.Length)&#xA;    |&amp;gt; List.distinct&#xA;    |&amp;gt; List.length&#xA;if (inputLengths &amp;gt; 1) then raise (Exception &amp;quot;Inconsistent pattern input lengths!&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;There&#x27;s a lot of piping here, which seems to be quite common in F# code. Hopefully, though, it illustrates how using the pipe operator allows code to be written in a more logical order. Here, we&#x27;re saying:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Take the trainingData list&lt;/li&gt;&#xA;&lt;li&gt;Construct a list where each entry in the new list corresponds to the number of inputs in a trainingData entry&lt;/li&gt;&#xA;&lt;li&gt;Build a new list from &lt;em&gt;this&lt;/em&gt; by taking this list-of-input-lengths and excluding any duplicates&lt;/li&gt;&#xA;&lt;li&gt;If the list from step 3 has more than one entry then the trainingData must not have entries that all have the same number of inputs&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;If the &amp;quot;trainingData&amp;quot; has patterns which all have the same number of inputs then there should only be one unique input input-list-length. If some patterns had two inputs and some patterns had three inputs then we would get more than one &lt;em&gt;unique&lt;/em&gt; input-list-length and that would not be good.&lt;/p&gt;&#xA;&lt;p&gt;Since F# has a concept of &amp;quot;significant whitespace&amp;quot; (meaning that it uses line returns and indentation to indicate where expressions start and end, which is why semi-colons are not required to terminate lines), sometimes it can get a bit demanding about what it thinks it ok and what isn&#x27;t. In the code above, if you tried to put the &amp;quot;trainingData&amp;quot; on the same line as the &amp;quot;let inputLengths =&amp;quot; and then have the pipe operator lines start underneath it then you will get cryptic errors such as &amp;quot;The block following this &#x27;let&#x27; is unfinished&amp;quot;. Using the format above not only means that your code will be more consistent with other F# &amp;quot;in the wild&amp;quot; but it also means that the compiler will understand it!&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// The F# compiler is happy with this..&#xA;let inputLengths =&#xA;    trainingData&#xA;    |&amp;gt; List.map (fun input -&amp;gt; input.Values.Length)&#xA;    |&amp;gt; List.distinct&#xA;    |&amp;gt; List.length&#xA;&#xA;// .. it is NOT happy with this..&#xA;let inputLengths = trainingData&#xA;    |&amp;gt; List.map (fun input -&amp;gt; input.Values.Length)&#xA;    |&amp;gt; List.distinct&#xA;    |&amp;gt; List.length&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;(I would not have thought that putting &amp;quot;trainingData&amp;quot; on the same line as &amp;quot;let inputLengths =&amp;quot; would introduce any ambiguity but presumably doing similar things must do in some situations).&lt;/p&gt;&#xA;&lt;h3&gt;Translating the network-training code&lt;/h3&gt;&#xA;&lt;p&gt;The c# code that we ended up with &lt;a href=&quot;https://www.productiverage.com/learning-f-sharp-via-some-machine-learning-the-single-layer-percepton&quot;&gt;last time&lt;/a&gt; for training a network looked like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const double learningRate = 0.1;&#xA;&#xA;var finalResult = Enumerable.Range(0, int.MaxValue)&#xA;  .Scan(&#xA;    seed: new&#xA;    {&#xA;      Weights = new[] { r.NextDouble(), r.NextDouble() },&#xA;      Bias = 0d,&#xA;      GlobalError = double.MaxValue&#xA;    },&#xA;    func: (previousState, iteration) =&amp;gt;&#xA;    {&#xA;      var resultForIteration = trainingData.Aggregate(&#xA;        seed: new { Weights = previousState.Weights, Bias = previousState.Bias, GlobalError = 0d },&#xA;        func: (stateSoFar, pattern) =&amp;gt;&#xA;        {&#xA;          var output = Output(stateSoFar.Weights, stateSoFar.Bias, pattern.Item1) ? 1 : -1;&#xA;          var localError = (pattern.Item2 ? 1 : -1) - output;&#xA;          return new&#xA;          {&#xA;            Weights = UpdateWeights(stateSoFar.Weights, learningRate, localError, pattern.Item1),&#xA;            Bias = stateSoFar.Bias &#x2B; (learningRate * localError),&#xA;            GlobalError = stateSoFar.GlobalError &#x2B; Math.Abs(localError)&#xA;          };&#xA;        }&#xA;      );&#xA;      Console.WriteLine(&amp;quot;Iteration {0}\tError {1}&amp;quot;, iteration, resultForIteration.GlobalError);&#xA;      return resultForIteration;&#xA;    }&#xA;  )&#xA;  .First(state =&amp;gt; state.GlobalError &amp;lt;= 0);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and relied upon the following two functions:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static bool Output(double[] weights, double bias, double[] inputs)&#xA;{&#xA;  var sum = inputs.Zip(weights, (input, weight) =&amp;gt; input * weight).Sum() &#x2B; bias;&#xA;  return (sum &amp;gt;= 0);&#xA;}&#xA;&#xA;private static double[] UpdateWeights(double[] weights, double learningRate, double localError, double[] inputs)&#xA;{&#xA;  if (localError == 0)&#xA;    return weights;&#xA;&#xA;  return weights&#xA;    .Zip(inputs, (weight, input) =&amp;gt; weight &#x2B; (learningRate * localError * input))&#xA;    .ToArray();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;I&#x27;m going to start with translating the &amp;quot;Output&amp;quot; function first because it will be relatively straight forward but it will also demonstrate some interesting abilities of the F# compiler&#x27;s type inference abilities.&lt;/p&gt;&#xA;&lt;p&gt;Type inference means that there are a &lt;em&gt;lot&lt;/em&gt; of types that you don&#x27;t have to specify in F# code because the compiler will be able to work out what they are. But this can be confusing sometimes if you don&#x27;t have a strong enough grasp on &lt;em&gt;how&lt;/em&gt; the compiler does this.&lt;/p&gt;&#xA;&lt;p&gt;Because I&#x27;m still an F# noob, I like to specify function arguments types to begin with and then remove them afterwards once I can see that the compiler is happy without them &lt;em&gt;and when I understand how the compiler knows&lt;/em&gt;. So I&#x27;ll start with this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let Output (weights: float list) (bias: float) (inputs: float list) =&#xA;    let sum = (List.zip weights inputs |&amp;gt; List.map (fun (weight, input) -&amp;gt; weight * input) |&amp;gt; List.sum) &#x2B; bias&#xA;    sum &amp;gt;= float 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The brackets around the arguments are required to &amp;quot;group&amp;quot; the argument name and its type into one value. When we remove the type annotations shortly, the argument brackets will no longer be necessary.&lt;/p&gt;&#xA;&lt;p&gt;The &amp;quot;List.zip&amp;quot; function is very similar to LINQ&#x27;s &amp;quot;Zip&amp;quot; function except that it has no facility to take a delegate to combine the two values, instead it always returns a tuple for each pair of values that it combines.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(I didn&#x27;t use the pipe operator with the &amp;quot;List.zip&amp;quot; call above because I think that it read more naturally without it in this case - I think of this as &amp;quot;zipping the weights and inputs lists together&amp;quot; and that is what the code says)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;F# has nice support for tuples that allows us to avoid having to rely upon &amp;quot;Item1&amp;quot; and &amp;quot;Item2&amp;quot; accesses. The lambda above that performs multiplication would have to look something like this in C# if the input was a tuple:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;weightAndInput =&amp;gt; weightAndInput.Item1 * weightAndInput.Item2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. but F# allows us to &amp;quot;deconstruct&amp;quot; the tuple by providing names for the tuple properties - ie.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;fun (weight, input) -&amp;gt; weight * input&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This is still a function that takes a single argument, it&#x27;s just that that single argument is a two-item tuple and we&#x27;re accessing its two items through named references &amp;quot;weight&amp;quot; and &amp;quot;input&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;Hopefully the rest of the code is easy to understand, &amp;quot;List.zip&amp;quot; is like LINQ&#x27;s &amp;quot;Zip&amp;quot; and &amp;quot;List.map&amp;quot; is like LINQ&#x27;s &amp;quot;Select&amp;quot; and &amp;quot;List.sum&amp;quot; is like LINQ&#x27;s &amp;quot;Sum&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;The second line &amp;quot;sum &amp;gt;= float 0&amp;quot; is the return value for the function - either true or false. The expression &amp;quot;float 0&amp;quot; is important because the &amp;quot;sum&amp;quot; value will be a &lt;strong&gt;float&lt;/strong&gt; and F# will not attempt &lt;em&gt;any&lt;/em&gt; type coercion when comparing values. In C#, if you have two numeric types then you can compare them - eg.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Valid in C#&#xA;double x1 = 0; // double&#xA;int x2 = 0;    // int&#xA;var isMatch = (x1 == x2);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. but in F# this is not allowed. If you tried to write the following:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Not allowed in F#&#xA;let x1 = float 0 // float&#xA;let x2 = 0       // int&#xA;let isMatch = (x1 = x2)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. then you would get the following error:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;This expression was expected to have type &#x27;float&#x27; but here has type &#x27;int&#x27;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Now that we&#x27;re happy with the function implementation, we can remove the type annotations and reduce it to this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let Output weights bias inputs =&#xA;    let sum = (List.zip weights inputs |&amp;gt; List.map (fun (weight, input) -&amp;gt; weight * input) |&amp;gt; List.sum) &#x2B; bias&#xA;    sum &amp;gt;= float 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The compiler is able to infer all of those types. Some of the inference is quite simple - for example, both &amp;quot;weights&amp;quot; and &amp;quot;inputs&amp;quot; must be lists of some type because they are passed to &amp;quot;List.zip&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;Some of the inference is more complicated, though..&lt;/p&gt;&#xA;&lt;p&gt;Firstly, the &amp;quot;weights&amp;quot; and &amp;quot;inputs&amp;quot; list must have element types that support a &amp;quot;*&amp;quot; operator (in F#, this means any of the numeric types or any type that has got a custom &amp;quot;*&amp;quot; overload implemented on it).&lt;/p&gt;&#xA;&lt;p&gt;Secondly, when elements are combined from &amp;quot;weight&amp;quot; and &amp;quot;inputs&amp;quot; using &amp;quot;*&amp;quot;, it must be possible to use the &amp;quot;&#x2B;&amp;quot; operator on the result because &amp;quot;List.sum&amp;quot; requires it (the internal implementation of &amp;quot;List.sum&amp;quot; is to combine all of the values passed to it using &amp;quot;&#x2B;&amp;quot;).&lt;/p&gt;&#xA;&lt;p&gt;Thirdly, the result from &amp;quot;List.sum&amp;quot; must also support the &amp;quot;&#x2B;&amp;quot; operator in conjunction with whatever type that &amp;quot;bias&amp;quot; is.&lt;/p&gt;&#xA;&lt;p&gt;Fourthly, &lt;em&gt;this&lt;/em&gt; result must support the &amp;quot;&amp;gt;=&amp;quot; operator in conjunction with &amp;quot;float 0&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;Working backwards, because F# does not support any type coercion when comparing numeric values, the type of &amp;quot;sum&amp;quot; must be &lt;strong&gt;float&lt;/strong&gt; in order for it to be compared to &amp;quot;float 0&amp;quot;. This means that the result of &amp;quot;List.sum&amp;quot; must be &lt;strong&gt;float&lt;/strong&gt; and so &amp;quot;bias&amp;quot; must be &lt;strong&gt;float&lt;/strong&gt;. This means that the &amp;quot;weights&amp;quot; and &amp;quot;inputs&amp;quot; must be lists of &lt;strong&gt;float&lt;/strong&gt;. (The return type of the function is &lt;strong&gt;boolean&lt;/strong&gt; because the return value is always true or false as it is the result of an &amp;quot;&amp;gt;=&amp;quot; comparison).&lt;/p&gt;&#xA;&lt;p&gt;This type inference is very powerful and can lead to clean and succint code. However, it can also lead to confusion if you haven&#x27;t perfectly internalised its workings or if you&#x27;re dealing with incomplete code. It&#x27;s for both of those reasons that I prefer to start with more argument type annotations than necessary and then remove them later, when I&#x27;m happy with what I&#x27;ve written.&lt;/p&gt;&#xA;&lt;p&gt;The &amp;quot;UpdateWeights&amp;quot; function may be translated in a similar manner -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let UpdateWeights weights localError inputs =&#xA;    if (localError = float 0)&#xA;        then weights&#xA;        else&#xA;            List.zip weights inputs&#xA;            |&amp;gt; List.map (fun (weight, input) -&amp;gt; weight &#x2B; (learningRate * localError * input))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;In F#, if / then / else is a bit different to C#. In F#, it is an expression that returns a value, so you could write something like:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Valid F#&#xA;let x = if something then 1 else 2&#xA;&#xA;// Not valid C#&#xA;var x = if something then 1 else 2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;So, in the F# &amp;quot;UpdateWeights&amp;quot; function, the &amp;quot;if&amp;quot; expression returns either the original &amp;quot;weights&amp;quot; reference or the updated list.&lt;/p&gt;&#xA;&lt;p&gt;We&#x27;ve actually seen quite a lot of F# syntax, just in the code above - variable and function definitions, type annotations (and discussed how they are optional in many cases), anonymous functions (with the &amp;quot;fun&amp;quot; keyword), the pipe forward operator, record types, tuple deconstruction. Let&#x27;s throw in another one; nested functions. The two functions shown above (&amp;quot;Output&amp;quot; and &amp;quot;UpdateWeights&amp;quot;) will only be called from within the &amp;quot;Go&amp;quot; function that was part of the initial scaffolding code. We &lt;em&gt;could&lt;/em&gt; make these private functions at the same level as &amp;quot;Go&amp;quot;.. &lt;em&gt;or&lt;/em&gt; we can make them &lt;em&gt;nested&lt;/em&gt; functions &lt;em&gt;within&lt;/em&gt; &amp;quot;Go&amp;quot; so that their scope is as restrictive as possible (which is a good thing in my book) -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let private Go (r: Random) =&#xA;&#xA;    let Output weights bias inputs =&#xA;        let sum = (List.zip weights inputs |&amp;gt; List.map (fun (weight, input) -&amp;gt; weight * input) |&amp;gt; List.sum) &#x2B; bias&#xA;        sum &amp;gt;= float 0&#xA;&#xA;    let UpdateWeights weights localError inputs =&#xA;        if (localError = float 0)&#xA;            then weights&#xA;            else&#xA;                List.zip weights inputs&#xA;                |&amp;gt; List.map (fun (weight, input) -&amp;gt; weight &#x2B; (learningRate * localError * input))&#xA;&#xA;    &amp;quot;TODO: Implement this&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3&gt;Sidebar: The influence of F# on C#&lt;/h3&gt;&#xA;&lt;p&gt;It seems that quite a lot of features from F# are coming over to C# from C# 7 onwards. For example, nested functions are already available (they weren&#x27;t in C# 6 but they &lt;em&gt;are&lt;/em&gt; in C# 7) - eg.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public static void Go()&#xA;{&#xA;  int GetNumber()&#xA;  {&#xA;    return 123;&#xA;  }&#xA;&#xA;  Console.WriteLine(GetNumber());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Similarly, Tuple deconstruction is also now available -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public static void Go()&#xA;{&#xA;  var (inputs, output) = GetPattern();&#xA;  Console.WriteLine(string.Join(&amp;quot;, &amp;quot;, inputs));&#xA;  Console.WriteLine(output);&#xA;}&#xA;&#xA;// Note: We&#x27;re not returning a &amp;quot;Tuple&amp;lt;double[], bool&amp;gt;&amp;quot; here, it&#x27;s a different type (and it requires&#xA;// the &amp;quot;System.ValueType&amp;quot; package to be added to the project&#xA;private static (double[] inputs, bool output) GetPattern()&#xA;{&#xA;  return (new[] { 0.5, 0.6 }, true);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Coming at some point (looks like it will be C# 8), there will be support for defining record types -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// This syntax is not yet available (as of January 2018)&#xA;public class Point(int X, int Y);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The &lt;strong&gt;Point&lt;/strong&gt; class will have X and Y properties that are set through a constructor call. It will have an &amp;quot;Equals&amp;quot; implementation that will return true for two &lt;strong&gt;Point&lt;/strong&gt; references that have the same X and Y values (and probably have == and != operator overloads that do the same thing) &lt;em&gt;and&lt;/em&gt; it will have a &amp;quot;With&amp;quot; method that allows you to take an instance of a &lt;strong&gt;Point&lt;/strong&gt; and create a new instance that has a new value for either X or Y - eg.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var p1 = new Point(1, 2);&#xA;var p2 = new Point(1, 2);&#xA;Console.WriteLine(p1 == p2); // True!&#xA;&#xA;p2 = p2.With(X: 7);&#xA;Console.WriteLine(p1 == p2); // False&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;(For more details about C# record types, see the &lt;a href=&quot;https://github.com/dotnet/csharplang/blob/master/proposals/records.md&quot;&gt;records proposal&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;It&#x27;s interesting to see these features working their way into C# and hopefully it will make it easier for someone in the future to try F# if they already know C#. (Some may argue that it could make F# less appealing with more of its features being added to C# but I think that it will still have enough differences to stand apart - having immutability and non-nulls &lt;em&gt;by default&lt;/em&gt; is not something that is likely to be incorporated into C# because it would require enormous changes).&lt;/p&gt;&#xA;&lt;h3&gt;Back to translating the network-training code..&lt;/h3&gt;&#xA;&lt;p&gt;Now that the supporting functions (&amp;quot;Output&amp;quot; and &amp;quot;UpdateWeights&amp;quot;) have been translated, we need to look back at the main training code. This time I&#x27;m going to go &amp;quot;outside in&amp;quot; and translate this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const double learningRate = 0.1;&#xA;&#xA;var finalResult = Enumerable.Range(0, int.MaxValue)&#xA;  .Scan(&#xA;    seed: new&#xA;    {&#xA;      Weights = new[] { r.NextDouble(), r.NextDouble() },&#xA;      Bias = 0d,&#xA;      GlobalError = double.MaxValue&#xA;    },&#xA;    func: (previousState, iteration) =&amp;gt;&#xA;    {&#xA;      // Do work here..&#xA;    }&#xA;  )&#xA;  .First(state =&amp;gt; state.GlobalError &amp;lt;= 0);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The &amp;quot;Enumerable.Range(0, int.MaxValue)&amp;quot; line was basically a way to say &amp;quot;keep enumerating for ever&amp;quot; (int.MaxValue isn&#x27;t technically the same as &amp;quot;forever&amp;quot; but in this context it&#x27;s good enough because we&#x27;ll die of boredom waiting for the code to perform two billion iterations).&lt;/p&gt;&#xA;&lt;p&gt;In F# there is a function that seems closer to what we want called &amp;quot;Seq.initInfinite&amp;quot; - this takes a single argument that is a delegate that takes an int and returns a value in the generated sequence based upon that int. It could be implemented in C# like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public static IEnumerable&amp;lt;T&amp;gt; InitInfinite&amp;lt;T&amp;gt;(Func&amp;lt;int, T&amp;gt; initialiser)&#xA;{&#xA;  return Enumerable.Range(0, int.MaxValue).Select(initialiser);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This is &lt;em&gt;also&lt;/em&gt; limited to int.MaxValue iterations since the delegate argument is an &lt;strong&gt;int&lt;/strong&gt; but we&#x27;re &lt;em&gt;still&lt;/em&gt; not going to worry too much about whether it&#x27;s &lt;em&gt;really&lt;/em&gt; infinite or not.&lt;/p&gt;&#xA;&lt;p&gt;From my last post, we know that &amp;quot;Scan&amp;quot; is already an F# concept and so that should be easy to translate.&lt;/p&gt;&#xA;&lt;p&gt;The last function to translate is &amp;quot;First&amp;quot; and this has a corresponding function in F#; &amp;quot;Seq.find&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;The only issue that we have to tackle now is that F# does not support anonymous types and so we&#x27;ll need to declare another record type that I&#x27;ll call &amp;quot;CalculationState&amp;quot;.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type private CalculationState = {&#xA;    Weights: List&amp;lt;float&amp;gt;&#xA;    Bias: float&#xA;    GlobalError: float&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;When I defined the &amp;quot;Input&amp;quot; record earlier, I used a single line definition and so each property had to be separated by semi-colons. Above, each property is on its line and so semi-colon delimiters are not required.&lt;/p&gt;&#xA;&lt;p&gt;Now we can translate the above C# into this F#:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let finalResult =&#xA;    Seq.initInfinite (fun i -&amp;gt; i)&#xA;    |&amp;gt; Seq.scan&#xA;        (fun previousState iteration -&amp;gt;&#xA;            // Do work here..&#xA;        )&#xA;        { Weights = [r.NextDouble(); r.NextDouble()]; Bias = float 0; GlobalError = Double.MaxValue }&#xA;    |&amp;gt; Seq.find (fun state -&amp;gt; state.GlobalError = float 0)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The &amp;quot;// Do work here..&amp;quot; code looks like this in C# -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var resultForIteration = trainingData.Aggregate(&#xA;  seed: new { Weights = previousState.Weights, Bias = previousState.Bias, GlobalError = 0d },&#xA;  func: (stateSoFar, pattern) =&amp;gt;&#xA;  {&#xA;    var output = Output(stateSoFar.Weights, stateSoFar.Bias, pattern.Item1) ? 1 : -1;&#xA;    var localError = (pattern.Item2 ? 1 : -1) - output;&#xA;    return new&#xA;    {&#xA;      Weights = UpdateWeights(stateSoFar.Weights, learningRate, localError, pattern.Item1),&#xA;      Bias = stateSoFar.Bias &#x2B; (learningRate * localError),&#xA;      GlobalError = stateSoFar.GlobalError &#x2B; Math.Abs(localError)&#xA;    };&#xA;  }&#xA;);&#xA;Console.WriteLine(&amp;quot;Iteration {0}\tError {1}&amp;quot;, iteration, resultForIteration.GlobalError);&#xA;return resultForIteration;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;I&#x27;m going to break this out into a separate function in the F# code because I want to avoid the final code being too &amp;quot;dense&amp;quot; (particularly while I&#x27;m still getting used to reading F# syntax and common structures / flow) so I&#x27;ll change the F# outer code to this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let finalResult =&#xA;    Seq.initInfinite (fun i -&amp;gt; i)&#xA;    |&amp;gt; Seq.scan&#xA;        CalculateNextState&#xA;        { Weights = [r.NextDouble(); r.NextDouble()]; Bias = float 0; GlobalError = Double.MaxValue }&#xA;    |&amp;gt; Seq.find (fun state -&amp;gt; state.GlobalError = float 0)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. and then define this nested function:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let CalculateNextState (state: CalculationState) (iteration: int) =&#xA;    // Do work here..&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;(Again, I&#x27;ve started by including explicit type annotations for the arguments but I&#x27;ll be able to remove them later).&lt;/p&gt;&#xA;&lt;p&gt;The C# code used the &amp;quot;Aggregate&amp;quot; function which corresponds to &amp;quot;List.fold&amp;quot; in F# and &amp;quot;Console.WriteLine&amp;quot; which corresponds to &amp;quot;printfn&amp;quot;. With everything that we&#x27;ve covered already, it shouldn&#x27;t be a big leap to see that the complete implementation of the &amp;quot;CalculateNextState&amp;quot; function will be as follows:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let CalculateNextState (state: CalculationState) (iteration: int) =&#xA;    let resultForIteration =&#xA;        List.fold&#xA;            (fun stateSoFar input -&amp;gt;&#xA;                let output = if (Output stateSoFar.Weights stateSoFar.Bias input.Values) then 1 else -1&#xA;                let localError = float ((if input.Result then 1 else -1) - output)&#xA;                {&#xA;                    Weights =&#xA;                        if (localError = float 0)&#xA;                        then stateSoFar.Weights&#xA;                        else UpdateWeights stateSoFar.Weights localError input.Values&#xA;                    Bias =&#xA;                        if (localError = float 0)&#xA;                        then stateSoFar.Bias&#xA;                        else stateSoFar.Bias &#x2B; (learningRate * localError)&#xA;                    GlobalError = stateSoFar.GlobalError &#x2B; Math.Abs(localError)&#xA;                }&#xA;            )&#xA;            { Weights = state.Weights; Bias = state.Bias; GlobalError = float 0 }&#xA;            trainingData&#xA;    printfn &amp;quot;Iteration %i\tError %i&amp;quot; iteration (int resultForIteration.GlobalError)&#xA;    resultForIteration&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;It&#x27;s still taking me a little while to get used to there being no &amp;quot;return&amp;quot; keyword and so I sometimes have to remind myself that the anonymous function passed to &amp;quot;List.fold&amp;quot; returns the { Weights, Bias, GlobalError } value and that the &amp;quot;CalculateNextState&amp;quot; function returns the &amp;quot;resultForIteration&amp;quot; that is on its last line.&lt;/p&gt;&#xA;&lt;p&gt;Now that the function is fully defined, the type annotations can be removed from the &amp;quot;state&amp;quot; and &amp;quot;iteration&amp;quot; arguments. The &amp;quot;state&amp;quot; type is inferred because &amp;quot;List.fold&amp;quot; takes an initial value that has the properties Weights (float list) / Bias (float) / GlobalError (float) and the anonymous function also returns a value of that type and the only record type that matches those properties is &amp;quot;CalculationState&amp;quot;. The &amp;quot;iteration&amp;quot; argument is inferred because it is used as an argument in the &amp;quot;printfn&amp;quot; call to populate a &amp;quot;%i&amp;quot; placeholder and &amp;quot;%i&amp;quot; placeholder values have to be integers.&lt;/p&gt;&#xA;&lt;h3&gt;Writing to console using printfn and &amp;quot;string interpolation&amp;quot;&lt;/h3&gt;&#xA;&lt;p&gt;You might have noticed that in the code above, the C# write-info-to-console line:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Console.WriteLine(&amp;quot;Iteration {0}\tError {1}&amp;quot;, iteration, resultForIteration.GlobalError);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;was translated into this in F#:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;printfn &amp;quot;Iteration %i\tError %i&amp;quot; iteration (int resultForIteration.GlobalError)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;In principle, it&#x27;s very similar; there are placeholders in the format string (which is what the &amp;quot;%i&amp;quot; values are in the F# code above) that will be populated with arguments passed to Console.WriteLine / printfn but there are a couple of key differences. The first is that the &amp;quot;%i% placeholder requires that the value used to populate it is an integer (alternatives are &amp;quot;%s&amp;quot; for strings, &amp;quot;%f&amp;quot; for floats and &amp;quot;%b&amp;quot; for booleans) but the second is much more exciting - the format string and the provided arguments are verified &lt;em&gt;at compile time&lt;/em&gt; in the F# code whereas the C# code is only verified at &lt;em&gt;run time&lt;/em&gt;. To make it really crystal clear what I mean by this, the following C# code will compile but fail when it&#x27;s run -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// This will fail at runtime with &amp;quot;System.FormatException: &#x27;Index (zero based) must be greater&#xA;// than or equal to zero and less than the size of the argument list.&#x27;&amp;quot; because there are two&#xA;// placeholders in the format string but only one value provided&#xA;Console.WriteLine(&amp;quot;Hello {0}, {1}&amp;quot;, &amp;quot;test&amp;quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;On the other hand, the following F# won&#x27;t even &lt;em&gt;compile&lt;/em&gt; -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Will refuse to compile: &amp;quot;This expression is a function value, i.e. is missing arguments.&amp;quot;&#xA;printfn &amp;quot;Hello %s, %s&amp;quot; &amp;quot;test&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This makes me happy because I&#x27;m all about making the compiler catch simple mistakes instead of allowing them to surface at runtime.&lt;/p&gt;&#xA;&lt;p&gt;Now, I will admit that I was using a somewhat old school method of writing messages there in C#. C#6 introduced its own interpretation of &amp;quot;string interpolation&amp;quot; that allows us to combine the &amp;quot;template string&amp;quot; with the placeholder values so that we don&#x27;t accidentally include too many or too few placeholder value arguments. Instead of writing this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Old style&#xA;Console.WriteLine(&amp;quot;Iteration {0}\tError {1}&amp;quot;, iteration, resultForIteration.GlobalError);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. we could write this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// C# 6 string interpolation&#xA;Console.WriteLine($&amp;quot;Iteration {iteration}\tError {resultForIteration.GlobalError});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;I would argue that this is even better again than the F# approach and it&#x27;s unfortunate that F# doesn&#x27;t currently have anything quite like this. That is one of the downsides to F# pioneering and pushing a lot of useful techniques that were later incorporated in to C#, I suppose!&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(There is a proposal to add something similar to F# but it doesn&#x27;t exist yet and I don&#x27;t think that there is any suggestions that it will become available any time soon - see &lt;a href=&quot;https://github.com/fsharp/fslang-design/blob/master/RFCs/FS-1001-StringInterpolation.md&quot;&gt;F# RFC FS-1001 - String Interpolation&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3&gt;Sidebar: Selecting F# BCL functions&lt;/h3&gt;&#xA;&lt;p&gt;A little earlier, I nonchalantly said that&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The C# code used the &amp;quot;Aggregate&amp;quot; function which corresponds to &amp;quot;List.fold&amp;quot; in F#&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;.. and you may (quite reasonably) have wondered how you or I were supposed to know that &amp;quot;Aggregate&amp;quot; in C# is equivalent to &amp;quot;fold&amp;quot; in F#.&lt;/p&gt;&#xA;&lt;p&gt;You may also have picked up on the fact that sometimes I&#x27;m using &amp;quot;Seq&amp;quot; functions (such as &amp;quot;Seq.initInfinite&amp;quot;) and sometimes I&#x27;m using &amp;quot;List&amp;quot; functions (such as &amp;quot;List.fold&amp;quot;) and be wondering how I&#x27;m deciding which to use.&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;ll address the second point first. As I do so, it&#x27;s worth bearing in mind that I&#x27;m going to explain how &lt;em&gt;I&lt;/em&gt; have been deciding up to this point and &lt;em&gt;hopefully&lt;/em&gt; it&#x27;s a sensible approach but there&#x27;s always a chance that someone who knows better (maybe me in six months!) will have a slightly different take on things..&lt;/p&gt;&#xA;&lt;p&gt;In a nutshell, I&#x27;m going to use &amp;quot;List&amp;quot; if I&#x27;m certain that I want to fully evaluate the set of items. In the &amp;quot;CalculateNextState&amp;quot; function, I want to take all of the weights in the current state and generate a completely updated set of weights to use in the next iteration - in that next iteration, I will be using &lt;em&gt;all&lt;/em&gt; of the just-calculated weights to generate &lt;em&gt;another&lt;/em&gt; completely updated set of weights. Every time, I will be considering &lt;em&gt;every&lt;/em&gt; weight value and there would be no benefit to lazily evaluating the data and I think that lazy evaluation is one of the main benefits to using &amp;quot;Seq&amp;quot;. When I don&#x27;t know how many iterations will be required, I start by lazily evaluating an infinite set of items by calling &amp;quot;Seq.initInfinite&amp;quot; and then terminating enumeration when I get a state with a sufficiently low GlobalError. This approach &lt;em&gt;only&lt;/em&gt; works because the sequence is evaluated &amp;quot;lazily&amp;quot; - it would make no sense for there to be a &amp;quot;List.initInfinite&amp;quot; because that list&#x27;s contents would have to be fully populated at runtime and you&#x27;d run out of memory!&lt;/p&gt;&#xA;&lt;p&gt;I suspect that a case &lt;em&gt;could&lt;/em&gt; be made for always using &amp;quot;Seq&amp;quot; unless you find a compelling reason not to.. where a compelling case is that you need pattern matching* or if you&#x27;re sure that using &amp;quot;Seq&amp;quot; is resulting in expensive operations being repeated because you are enumerating over a sequence multiple times and the operations in each enumeration are complex / expensive (if you used &amp;quot;List&amp;quot; then you would be sure that the work to build the list would only be done once, no matter how many times you enumerated over it).&lt;/p&gt;&#xA;&lt;p&gt;* &lt;em&gt;(which we haven&#x27;t encountered yet but which is fairly common in F# code and which only works with instances of &lt;strong&gt;list&lt;/strong&gt; and not of &lt;strong&gt;seq&lt;/strong&gt;)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;F# also supports arrays but these tend to used in fairly niche situations - such as when interoperating with other .NET code that requires an array or when you&#x27;ve found a performance bottleneck in your code relating to indexed access into your set of items (for both a &lt;strong&gt;seq&lt;/strong&gt; and a &lt;strong&gt;list&lt;/strong&gt; it&#x27;s relatively slow to jump straight to the nth item because you have to start at the beginning and walk that many items into the list, whereas with an array you can jump straight there).. but arrays have their disadvantages, such as being mutable (bleurgh, filthy!) and having no cheap way to create a new version with a single new item (which also applies to &lt;strong&gt;seq&lt;/strong&gt; but which is something that &lt;strong&gt;list&lt;/strong&gt; can do well).&lt;/p&gt;&#xA;&lt;p&gt;So (for now?) I&#x27;ll be using a &lt;strong&gt;list&lt;/strong&gt; if I have a known set of items and will be performing an operation on every item each iteration and a &lt;strong&gt;seq&lt;/strong&gt; otherwise.. unless I encounter a really exciting reason to do otherwise*.&lt;/p&gt;&#xA;&lt;p&gt;* &lt;em&gt;(Spoiler alert: in a future post in the series, I will find a case where there is a huge difference in memory usage between &lt;strong&gt;list&lt;/strong&gt; and &lt;strong&gt;array&lt;/strong&gt; when loading data from disk - brace yourself for that thrill!)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;To return to my first point in relation to &amp;quot;Selecting F# BCL functions&amp;quot; - how did I know that &amp;quot;List.fold&amp;quot; is equivalent to &amp;quot;Aggregate&amp;quot;? The simple answer is by looking through the docs.. the MSDN pages are pretty good (here is the one for &lt;a href=&quot;https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/list.fold%5B%27t,%27state%5D-function-%5Bfsharp%5D&quot;&gt;List.fold&lt;/a&gt;) and the number of base library functions is not that large. You can often guess what many of them do (such as &amp;quot;List.average&amp;quot; and &amp;quot;List.distinct&amp;quot;) but you might need to read the documentation for others (either on MSDN or just via the intellisense tooltips) for others. If you are familiar with LINQ then it shouldn&#x27;t take you too long to learn the names of the F# equivalents of many of your old favourites!&lt;/p&gt;&#xA;&lt;h3&gt;Demonstrating the network&#x27;s abilities&lt;/h3&gt;&#xA;&lt;p&gt;Before I went on a couple of tangents about writing to the console and learning the F# BCL, we had actually finished translating the code that trained the network (it may be an &lt;em&gt;extremely&lt;/em&gt; simple one but it &lt;em&gt;is&lt;/em&gt; still technically a network!). Now the only C# that remains to be translated is the code that passes pairs of inputs through the network to see what output it generates for each pair - just to ensure that it matches our expectations. This is how we left it last time:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const double startAt = 0;&#xA;const double endAt = 1;&#xA;const double increment = 0.25;&#xA;var range = Enumerable.Range(0, (int)((endAt - startAt) / increment) &#x2B; 1).Select(value =&amp;gt; value * increment);&#xA;var xyPairs = range.SelectMany(value =&amp;gt; range, (x, y) =&amp;gt; new[] { x, y });&#xA;Console.WriteLine(string.Join(&#xA;  Environment.NewLine,&#xA;  xyPairs.Select(inputs =&amp;gt; $&amp;quot;{string.Join(&amp;quot;\t&amp;quot;, inputs)}\t{(Output(finalResult.Weights, finalResult.Bias, inputs) ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;)}&amp;quot;)&#xA;));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The first thing that will be nice about translating this into F# is that it has better support for defining ranges. In C#, we used &amp;quot;Enumerable.Range&amp;quot; but that only works with integers and so we then had to do some division. In F#, we&#x27;re able to say &amp;quot;define a range by starting at x and incrementing by y until you get to z&amp;quot;. So we could replace this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const double startAt = 0;&#xA;const double endAt = 1;&#xA;const double increment = 0.25;&#xA;var range = Enumerable.Range(0, (int)((endAt - startAt) / increment) &#x2B; 1).Select(value =&amp;gt; value * increment);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. with this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let range = { float 0 .. float 0.25 .. float 1 }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;We could then translate the rest of the C# shown above in a like-for-like fashion into F# &lt;em&gt;or&lt;/em&gt; we could get a tiny bit fancier with some code that I found on Stack Overflow that takes one set of values and transforms it by combining every value with other value (so if your input set was the numbers 1 and 2 then the output would be {1,1} and {1,2} and {2,1} and {2,2}). This is sometimes referred to as taking the &amp;quot;cross product&amp;quot; and is the same concept as doing a &amp;quot;cross join&amp;quot; in SQL.&lt;/p&gt;&#xA;&lt;p&gt;The code to do it is as follows:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Inspired by https://stackoverflow.com/a/482922/3813189&#xA;let crossproductWithSelf xs = seq { for x1 in xs do for x2 in xs do yield x1, x2 }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Using this means that our &amp;quot;Display network generalisation&amp;quot; summary code looks like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;let crossproductWithSelf xs = seq { for x1 in xs do for x2 in xs do yield x1, x2 }&#xA;let calculatedResults =&#xA;    { float 0 .. float 0.25 .. float 1 }&#xA;    |&amp;gt; crossproductWithSelf&#xA;    |&amp;gt; Seq.map (fun (x, y) -&amp;gt;&#xA;        x.ToString() &#x2B; &amp;quot;,\t&amp;quot; &#x2B;&#xA;        y.ToString() &#x2B; &amp;quot;,\t&amp;quot; &#x2B;&#xA;        (if (Output finalResult.Weights finalResult.Bias [x; y]) then &amp;quot;Yes&amp;quot; else &amp;quot;No&amp;quot;)&#xA;    )&#xA;printfn &amp;quot;&amp;quot;&#xA;printfn &amp;quot;X,\tY,\tOutput&amp;quot;&#xA;printfn &amp;quot;%s&amp;quot; (String.concat Environment.NewLine calculatedResults)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Pretty neat and tidy, I think!&lt;/p&gt;&#xA;&lt;h3&gt;Done! What&#x27;s next?&lt;/h3&gt;&#xA;&lt;p&gt;Phew! Well that felt like quite a lot of work. Getting to grips with a new language can be mentally taxing, particularly when it involves a new paradigm (like making the leap from OOP to functional programming) and I think that that&#x27;s why it&#x27;s taken me several attempts at getting started with F# to even get this far.&lt;/p&gt;&#xA;&lt;p&gt;And although this is a good start, the &amp;quot;machine learning&amp;quot; aspect of the Single Layer Perceptron is very basic and it should be fun to try to dig a little deeper and attempt something more complicated. To that end, I have a few more posts that I&#x27;d like to write that will explain how to train a neural network (that has more layers than just the input and output layers) using the Backpropagation Algorithm and then use this to recognise handwritten digits from the famous &lt;a href=&quot;http://yann.lecun.com/exdb/mnist/&quot;&gt;MNIST&lt;/a&gt; image database.&lt;/p&gt;&#xA;&lt;p&gt;As with the code here, I will be starting with C# from the &lt;a href=&quot;http://www.robosoup.com/blog&quot;&gt;Robosoup blog&lt;/a&gt; and translating it into a functional style before rewriting it as F#. I think that it&#x27;s exciting stuff!&lt;/p&gt;&#xA;&lt;p&gt;One more thing - in case you&#x27;re curious to see the complete F# code that was scattered through this post, here it is:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;open System&#xA;&#xA;type private Input = { Values: list&amp;lt;float&amp;gt;; Result: bool }&#xA;&#xA;type private CalculationState = {&#xA;    Weights: List&amp;lt;float&amp;gt;&#xA;    Bias: float&#xA;    GlobalError: float&#xA;}&#xA;&#xA;let Go (r: Random) =&#xA;    let trainingData = [&#xA;        { Values = [0.08; 0.94]; Result = true }; { Values = [0.13; 0.95]; Result = true };&#xA;        { Values = [0.28; 0.66]; Result = true }; { Values = [0.3; 0.59]; Result = true };&#xA;        { Values = [0.31; 0.51]; Result = true }; { Values = [0.34; 0.67]; Result = true };&#xA;        { Values = [0.34; 0.63]; Result = true }; { Values = [0.36; 0.55]; Result = true };&#xA;        { Values = [0.38; 0.67]; Result = true }; { Values = [0.4; 0.59]; Result = true };&#xA;        { Values = [0.4; 0.68]; Result = true }; { Values = [0.41; 0.5]; Result = true };&#xA;        { Values = [0.42; 0.53]; Result = true }; { Values = [0.43; 0.65]; Result = true };&#xA;        { Values = [0.44; 0.56]; Result = true }; { Values = [0.47; 0.61]; Result = true };&#xA;        { Values = [0.47; 0.5]; Result = true }; { Values = [0.48; 0.66]; Result = true };&#xA;        { Values = [0.52; 0.53]; Result = true }; { Values = [0.53; 0.58]; Result = true };&#xA;        { Values = [0.55; 0.6]; Result = true }; { Values = [0.56; 0.44]; Result = true };&#xA;        { Values = [0.58; 0.63]; Result = true }; { Values = [0.62; 0.57]; Result = true };&#xA;        { Values = [0.68; 0.42]; Result = true }; { Values = [0.69; 0.21]; Result = true }&#xA;        { Values = [0.7; 0.31]; Result = true }; { Values = [0.73; 0.48]; Result = true };&#xA;        { Values = [0.74; 0.47]; Result = true }; { Values = [0.74; 0.42]; Result = true };&#xA;        { Values = [0.76; 0.34]; Result = true }; { Values = [0.78; 0.5]; Result = true };&#xA;        { Values = [0.78; 0.26]; Result = true }; { Values = [0.81; 0.48]; Result = true };&#xA;        { Values = [0.83; 0.32]; Result = true }; { Values = [0.83; 0.28]; Result = true };&#xA;        { Values = [0.85; 0.07]; Result = true }; { Values = [0.85; 0.45]; Result = true };&#xA;        { Values = [0.88; 0.4]; Result = true }; { Values = [0.89; 0.92]; Result = true };&#xA;        { Values = [0.9; 0.33]; Result = true }; { Values = [0.91; 0.05]; Result = true };&#xA;        { Values = [0.92; 0.44]; Result = true }; { Values = [0.95; 0.94]; Result = true };&#xA;        { Values = [0.96; 0.08]; Result = true };&#xA;&#xA;        { Values = [0.02; 0.76]; Result = false }; { Values = [0.06; 0.22]; Result = false };&#xA;        { Values = [0.07; 0.16]; Result = false }; { Values = [0.09; 0.43]; Result = false };&#xA;        { Values = [0.1; 0.08]; Result = false }; { Values = [0.14; 0.07]; Result = false };&#xA;        { Values = [0.15; 0.23]; Result = false }; { Values = [0.17; 0.18]; Result = false };&#xA;        { Values = [0.17; 0.11]; Result = false }; { Values = [0.21; 0.28]; Result = false };&#xA;        { Values = [0.22; 0.17]; Result = false }; { Values = [0.25; 0.09]; Result = false };&#xA;        { Values = [0.28; 0.28]; Result = false }; { Values = [0.28; 0.27]; Result = false };&#xA;        { Values = [0.29; 0.22]; Result = false }; { Values = [0.29; 0.29]; Result = false };&#xA;        { Values = [0.3; 0.29]; Result = false }; { Values = [0.31; 0.14]; Result = false };&#xA;        { Values = [0.33; 0.19]; Result = false }; { Values = [0.33; 0.06]; Result = false };&#xA;        { Values = [0.39; 0.15]; Result = false }; { Values = [0.52; 0.1]; Result = false };&#xA;        { Values = [0.65; 0.07]; Result = false }; { Values = [0.71; 0.1]; Result = false };&#xA;        { Values = [0.74; 0.05]; Result = false }&#xA;    ]&#xA;&#xA;    let inputLengths =&#xA;        trainingData&#xA;        |&amp;gt; List.map (fun input -&amp;gt; input.Values.Length)&#xA;        |&amp;gt; List.distinct&#xA;        |&amp;gt; List.length&#xA;    if (inputLengths &amp;gt; 1) then raise (Exception &amp;quot;Inconsistent pattern input lengths!&amp;quot;)&#xA;&#xA;    let learningRate = 0.1&#xA;&#xA;    let Output weights bias inputs =&#xA;        let sum = (List.zip weights inputs |&amp;gt; List.map (fun (weight, input) -&amp;gt; weight * input) |&amp;gt; List.sum) &#x2B; bias&#xA;        sum &amp;gt;= float 0&#xA;&#xA;    let UpdateWeights weights localError inputs =&#xA;        if (localError = float 0)&#xA;            then weights&#xA;            else&#xA;                List.zip weights inputs&#xA;                |&amp;gt; List.map (fun (weight, input) -&amp;gt; weight &#x2B; (learningRate * localError * input))&#xA;&#xA;    let CalculateNextState state iteration =&#xA;        let resultForIteration =&#xA;            List.fold&#xA;                (fun stateSoFar input -&amp;gt;&#xA;                    let output = if (Output stateSoFar.Weights stateSoFar.Bias input.Values) then 1 else -1&#xA;                    let localError = float ((if input.Result then 1 else -1) - output)&#xA;                    {&#xA;                        Weights =&#xA;                            if (localError = float 0)&#xA;                            then stateSoFar.Weights&#xA;                            else UpdateWeights stateSoFar.Weights localError input.Values&#xA;                        Bias =&#xA;                            if (localError = float 0)&#xA;                            then stateSoFar.Bias&#xA;                            else stateSoFar.Bias &#x2B; (learningRate * localError)&#xA;                        GlobalError = stateSoFar.GlobalError &#x2B; Math.Abs(localError)&#xA;                    }&#xA;                )&#xA;                { Weights = state.Weights; Bias = state.Bias; GlobalError = float 0 }&#xA;                trainingData&#xA;        printfn &amp;quot;Iteration %i\tError %i&amp;quot; iteration (int resultForIteration.GlobalError)&#xA;        resultForIteration&#xA;&#xA;    let finalResult =&#xA;        Seq.initInfinite (fun i -&amp;gt; i)&#xA;        |&amp;gt; Seq.scan&#xA;            CalculateNextState&#xA;            { Weights = [r.NextDouble(); r.NextDouble()]; Bias = float 0; GlobalError = Double.MaxValue }&#xA;        |&amp;gt; Seq.find (fun state -&amp;gt; state.GlobalError = float 0)&#xA;&#xA;    let crossproductWithSelf xs = seq { for x1 in xs do for x2 in xs do yield x1, x2 }&#xA;    let calculatedResults =&#xA;        { float 0 .. float 0.25 .. float 1 }&#xA;        |&amp;gt; crossproductWithSelf&#xA;        |&amp;gt; Seq.map (fun (x, y) -&amp;gt;&#xA;            x.ToString() &#x2B; &amp;quot;,\t&amp;quot; &#x2B;&#xA;            y.ToString() &#x2B; &amp;quot;,\t&amp;quot; &#x2B;&#xA;            (if (Output finalResult.Weights finalResult.Bias [x; y]) then &amp;quot;Yes&amp;quot; else &amp;quot;No&amp;quot;)&#xA;        )&#xA;    printfn &amp;quot;&amp;quot;&#xA;    printfn &amp;quot;X,\tY,\tOutput&amp;quot;&#xA;    printfn &amp;quot;%s&amp;quot; (String.concat Environment.NewLine calculatedResults)&#xA;&#xA;Go (new Random(0))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
                <pubDate>Wed, 04 Apr 2018 23:24:00 GMT</pubDate>
            </item>
            <item>
                <title>Learning F# via some Machine Learning: The Single Layer Perceptron</title>
                <link>https://www.productiverage.com/learning-f-sharp-via-some-machine-learning-the-single-layer-percepton</link>
                <guid>https://www.productiverage.com/learning-f-sharp-via-some-machine-learning-the-single-layer-percepton</guid>
                <description>&lt;h3&gt;TL;DR&lt;/h3&gt;&#xA;&lt;p&gt;I know C# well and I want to learn F#. I want to wrap my head about some of the underlying algorithms that enable the machine learning that seems so prevalent in the world today (voice recognition, computer vision, sales prediction, semantic analysis, translation). I&#x27;m going to try to do both together and prove to myself that I have a good understanding of them both by writing about it.&lt;/p&gt;&#xA;&lt;h3&gt;The lure of F#&lt;/h3&gt;&#xA;&lt;p&gt;For a few years now, I&#x27;ve been wanting to have a proper crack at learning F#. There&#x27;s a lot about it that sounds very appealing - immutability-by-default and better representation / handling of null values while still being able to use Visual Studio and use the .NET framework library (as well as other .NET assemblies). I&#x27;ve tried a couple of times in the past but without any concrete project to work on, I find that I struggle to motivate myself without a target to work towards that is more tangible than &amp;quot;feel like I&#x27;ve learned a bit of a new language&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;To address this, I&#x27;ve decided to combine learning-some-F# with learning-some-machine-learning-basics so that I have a more solid goal. As I go, I thought that I&#x27;d write a few posts about the process for two reasons; firstly, being able to explain something clearly is a good indicator that you understand it yourself and, secondly, there is a chance (admittedly slim!) that this might be useful to someone else in a similar position to me, who is familiar with C# and wants to get to grips with F# - I wouldn&#x27;t even consider myself intermediately competent yet and so I&#x27;m still encountering the pain points of being an F# beginner and seeing how I deal with them might be helpful to others.&lt;/p&gt;&#xA;&lt;p&gt;Last year, I wrote &lt;a href=&quot;https://www.productiverage.com/face-or-no-face-finding-faces-in-photos-using-c-sharp-and-accordnet&quot;&gt;Face or no face (finding faces in photos using C# and Accord.NET)&lt;/a&gt;, which classified image regions using a linear support vector machine. This was technically a machine learning solution but it&#x27;s only one particular algorithm and there are limitations to the sorts of problem that it can tackle. I want to work up to implementing a Back-Propagation Neural Network that will categorise hand written digits (0-9) but I&#x27;m going to start a little simpler.&lt;/p&gt;&#xA;&lt;p&gt;While trying to decide how I was going to get started, I read (or scan-read, in many cases, if I&#x27;m being honest) what felt like hundreds of articles about neural networks. One of the issues with trying to learn something like this through the research of others is that the people writing about it already have a level of knowledge far above my own on the matter and it feels like there is a lot of knowledge that it assumed that the reader will have. Another issue is that there is often maths involved that can seem sufficiently complicated that it is off-putting. In my posts, I&#x27;m going to try to keep things as simple as possible (which may well mean brushing some &amp;quot;whys&amp;quot; under the carpet - leaving it as an exercise to the reader to find out more from other people, once the basics are understood). One series of posts that I &lt;em&gt;did&lt;/em&gt; find very approachable, though, was on a site &amp;quot;&lt;a href=&quot;http://www.robosoup.com/&quot;&gt;Robosoup&lt;/a&gt;&amp;quot; - which is for a consultancy based in London that specialise in machine learning. The first post in the series is &amp;quot;&lt;a href=&quot;http://www.robosoup.com/2008/09/the-single-layer-perceptron-c.html&quot;&gt;The Single Layer Perceptron C#&lt;/a&gt;&amp;quot; and I&#x27;m actually going to start with some of the code there and the example data. I&#x27;m going to try to explain things my own way but much of the content here will owe a debt to that Robosoup article (I got in touch with John Wakefield at Robosoup and he said that he was happy for me share his code - rest assured that I&#x27;m not just stealing it without asking for permission first!).&lt;/p&gt;&#xA;&lt;h3&gt;The Single Layer Perceptron&lt;/h3&gt;&#xA;&lt;p&gt;The concept of an &amp;quot;artificial neural network&amp;quot; is, essentially, that there is a system of neurons that are connected together and that have a series of inputs that send signals into the system and which eventually get (somehow) transformed into a series of outputs. Each output represents a particular result. If, for example, the neural network was intended to categorise images then the inputs will all be derived from the image data in some way and there may be an output for &amp;quot;dog&amp;quot; and an output for &amp;quot;cat&amp;quot; and these output will end up with a stronger or weaker signal depending upon the input data. The connections between the neurons will have different &amp;quot;weights&amp;quot; and so different input values will somehow result in different outputs. These different weights will have to calculated as part of the network&#x27;s &amp;quot;training&amp;quot;. This sort of description is often accompanied by complicated-looking diagrams such as this:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&quot;https://www.productiverage.com/Content/Images/Posts/NeuralNetwork.jpg&quot; alt=&quot;Neural Network&quot;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(Taken from &lt;a href=&quot;https://www.flickr.com/photos/worldworldworld/7880912598/in/photostream/&quot;&gt;Cesar Harada&#x27;s Flickr&lt;/a&gt; under &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/2.0/&quot;&gt;license conditions&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;This raises a lot of questions and feels like far too complicated a place to start! (Though, in later posts, I &lt;em&gt;will&lt;/em&gt; be talking about multi-layered multi-output neural networks similar to what is shown above).&lt;/p&gt;&#xA;&lt;p&gt;The &amp;quot;Single Layer Perceptron&amp;quot; is simpler - it only has one input &amp;quot;layer&amp;quot; and one output &amp;quot;layer&amp;quot;, where a layer is a list of &amp;quot;neurons&amp;quot;. A neuron is something that takes an input value (a value from -1 to 1), multiplies it by a &amp;quot;weight&amp;quot; (also a value from -1 to 1) and then passes that value onto every node that it is connected to in the layer ahead of it. Pretty much the simplest possible network imaginable that would fit this description would be just two neurons in the input layer and a single neuron in the output layer. Like this:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&quot;https://www.productiverage.com/Content/Images/Posts/SingleLayerPerceptron.png&quot; alt=&quot;Simple Single Layer Perceptron&quot;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Now this might almost seem &lt;em&gt;too&lt;/em&gt; simple! Can this really do anything useful? Well, actually, it&#x27;s entirely possible to configure a network like this to act as a classifier for any data that is &amp;quot;linearly separable&amp;quot; in as many dimensions as there are inputs. This is already sounding like mumbo jumbo, so I&#x27;ll go over those terms..&lt;/p&gt;&#xA;&lt;p&gt;A &amp;quot;classifier&amp;quot; will look at its inputs and give a yes/no answer (for example, an &amp;quot;is this a cat?&amp;quot; classifier might look at a photograph and report whether there appears to be a cat in it or not).&lt;/p&gt;&#xA;&lt;p&gt;&amp;quot;Linearly separable&amp;quot; is simplest to understand in 2D - if the data is plotted on a graph then it&#x27;s &amp;quot;linearly separable&amp;quot; if it&#x27;s possible to draw a straight line across the graph that puts all of the values for &amp;quot;yes&amp;quot; lie on one side and all inputs for &amp;quot;no&amp;quot; lie on the other side. When I wrote about linear support vector machines, I talked about a fictional decision history for a  manager, where they would give the go-ahead (or not) to a new feature based upon how much of it could be billed to Clients and what strategic value it had to the company.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&quot;https://www.productiverage.com/Content/Images/Posts/ManagerDecisionHistory-Predictions.jpg&quot; alt=&quot;Manager Decision History&quot;&gt;&lt;/p&gt;&#xA;&lt;p&gt;This data &lt;em&gt;is&lt;/em&gt; linearly separable because it&#x27;s possible to draw a line on the graph where all of the data above gets a &amp;quot;yes&amp;quot; response and all of the data below gets a &amp;quot;no&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;Some data sets will &lt;em&gt;not&lt;/em&gt; fit this model and so are &lt;em&gt;not&lt;/em&gt; linearly separable. That won&#x27;t make it impossible to classify using a neural network but it &lt;em&gt;will&lt;/em&gt; make it impossible for a perceptron to classify (without some form of processing of the data before classification - which is out of the scope of what I want to cover today).&lt;/p&gt;&#xA;&lt;p&gt;2D data like this would involve a perceptron with two inputs. 3D data that is linearly separable would have all of its data points seperable by a plane in the 3D space - all points on one side would be &amp;quot;yes&amp;quot; and all points on the other would be &amp;quot;no&amp;quot;; this data would involve a perceptron with three inputs.&lt;/p&gt;&#xA;&lt;p&gt;While it&#x27;s not as easy to envisage this in more dimensions, the same principle holds. For this sort of multi-dimensional data, the additional dimensions tend to be additional measurable factors that are thought to have affected the outcome (for example, maybe the manager in the example above is predictably less likely to give the go-ahead to features on Monday and Tuesday because they&#x27;re always snowed under with emails for those first two days of the week &lt;em&gt;and&lt;/em&gt; they&#x27;re less likely to sign off on things when they&#x27;re hungry; that would mean that there would be four dimensions to consider, which would be &amp;quot;amount of cost that can be put onto Clients&amp;quot;, &amp;quot;strategic value of the work&amp;quot;, &amp;quot;day of the week&amp;quot; and &amp;quot;time since last ate&amp;quot; - these four dimensions would require a perceptron with four inputs to model the data).&lt;/p&gt;&#xA;&lt;h3&gt;Training a perceptron&lt;/h3&gt;&#xA;&lt;p&gt;I said above that it&#x27;s possible to &lt;em&gt;configure&lt;/em&gt; a network to act as a classifier for linearly separable data. All that is required to configure the network is to assign the weight0 and weight1 values (at least, that is the case for 2D data - since each input has its own weight value then 2D data requires two inputs but if the input is three dimensional then there will be three weight values that must be set and if there were four dimensions then there would be four weight values, etc..). When it is correctly configured, it will be possible to apply any values to the input neurons and to get a single output value. If this output value is higher than a particular threshold then the output will be considered a positive response and otherwise it will be considered a negative response.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&quot;https://www.productiverage.com/Content/Images/Posts/SingleLayerPerceptron-ManagerDecision.png&quot; alt=&quot;Simple Single Layer Perceptron for predicting Manager Decisions&quot;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Returning to the Manager Decision data, one of the inputs will be for the &amp;quot;amount of cost that can be put onto Clients&amp;quot; while the other will be the &amp;quot;strategic value of the work&amp;quot;. For the data and the code that I&#x27;m going to look at further down, all inputs and outputs are in the 0-1 range (this is convenient enough for &amp;quot;amount of cost that can be put onto Clients&amp;quot; but it may be more difficult in the real world to fit all features into a 0-1 range for &amp;quot;strategic value of the work&amp;quot; - but since that data is just a fictional example, we don&#x27;t need to worry about that too much).&lt;/p&gt;&#xA;&lt;p&gt;The question, then, is &lt;em&gt;how&lt;/em&gt; should we determine the weights for each neuron? This is where the &amp;quot;machine learning&amp;quot; part comes into it. What we&#x27;re going to do is &amp;quot;train&amp;quot; a network by using historical data.&lt;/p&gt;&#xA;&lt;p&gt;At its essence, the way that a trained network like this is produced is by -&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Setting all of the weights to be random values between 0 and 1&lt;/li&gt;&#xA;&lt;li&gt;Passing all of the historical data (aka &amp;quot;training data&amp;quot;) through it and, for each &amp;quot;pattern&amp;quot; (which is the name given to a series of inputs)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Calculating the &amp;quot;local error&amp;quot; (the error for that particular pattern)&lt;/li&gt;&#xA;&lt;li&gt;Adjusting the weights based upon this local error&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Taking the &amp;quot;total error&amp;quot; or &amp;quot;global error&amp;quot; (the sum of all of the local errors from the training data) and either finding that it is less than a predetermined threshold (in which case the network training is considered complete - hurrah!) or going back to step 2&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;There are a lot of things to consider there - what &lt;em&gt;precisely&lt;/em&gt; are the &amp;quot;local errors&amp;quot;, how are the weights adjusted each iteration and what threshold should we stop at? Let&#x27;s work through each of those in order..&lt;/p&gt;&#xA;&lt;p&gt;The local error for a particular pattern is how far away the output of the network is from the expected result. Since all of the input data has a yes/no expected output, we&#x27;ll translate &amp;quot;yes&amp;quot; into 1 and &amp;quot;no&amp;quot; into 0. For each pattern, we take its inputs and set the input neurons with those values. Then we calculate the output for the network (by multiplying the first input by the first weight and the second input by the second weight and then adding those two values together). Then we compare this output value to the expected 1 or 0 - so, if we get 0.3 as the output value for the first pattern and we expected 1 then that&#x27;s an error of 0.7 (since 0.3 is 0.7 away from the expected value of 1). If we get 0.6 for the output value for the second pattern and we expected 0 then that&#x27;s an error of 0.6 (since 0.6 is 0.6 away from the expected value of 0).&lt;/p&gt;&#xA;&lt;p&gt;In order to adjust the weights after each pattern has been run through the network, a fairly simple equation is used - each new weight is calculated using:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;weight[i] = weight[i] &#x2B; (learningRate * localError * patternInput[i])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;For this network, there are only two inputs and so there will only be two values for &amp;quot;i&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;The &amp;quot;learning rate&amp;quot; is a value between 0 and 1 that determines how quickly the weights change as the network is trained. Clearly, a value of 0 would mean that the weights &lt;em&gt;don&#x27;t&lt;/em&gt; change each iteration, which would be useless. The larger the value of the learning rate, the more that the weights will be adjusted each iteration - however, larger is not always better because the adjustments may swing too far each time and, instead of slowing homing in on a well-trained network, the weights may alternate back and forth and never significantly improve. In the example code that I&#x27;m going to look at, I&#x27;m using a learning rate of 0.1* but this is a value that you may wish to try playing with when experimenting with training - there seem to be many guidelines when it comes to machine learning and many sensible approaches to classes or problem but there aren&#x27;t always hard and fast rules for all of the variables and there are often things to tweak here and there that may affect how quickly you get a result (or if you get one at all).&lt;/p&gt;&#xA;&lt;p&gt;* &lt;em&gt;(To be honest, I&#x27;ve &amp;quot;decided&amp;quot; to use a learning rate of 0.1 because much of the initial C# code below comes from the &lt;a href=&quot;http://www.robosoup.com/2008/09/the-single-layer-perceptron-c.html&quot;&gt;Robosoup article&lt;/a&gt; that I mentioned earlier and a 0.1 learning rate is used there!)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;The acceptable &amp;quot;global error&amp;quot; is another &amp;quot;tunable parameter&amp;quot; in that a higher acceptable threshold should mean that training will complete more quickly but also that the resulting network will be less accurate. On the other hand, it may be impossible to train a network (particularly so simple a network as a single perceptron) to match all of the training data perfectly and so a reasonable threshold must be accepted. In the example code below, a network that perfectly matches the training data &lt;em&gt;is&lt;/em&gt; possible and won&#x27;t take long to train and so we&#x27;ll aim for a zero global error.&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;m not going to go into any more detail about how you may set these tunable parameters (learning rate and global error threshold) because there&#x27;s a &lt;em&gt;lot&lt;/em&gt; of material to cover and I want to try to stick to practical concepts and code (&lt;em&gt;and&lt;/em&gt; because I&#x27;m still not very confident that I&#x27;ve got a great system for deciding them!).&lt;/p&gt;&#xA;&lt;h3&gt;Input bias&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&quot;https://www.productiverage.com/Content/Images/Posts/SingleLayerPerceptron-ManagerDecision-With-Bias.png&quot; alt=&quot;Simple Single Layer Perceptron for predicting Manager Decisions (with bias node)&quot;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Using the training method described above, you will always get a line that cuts through the data at the point (0, 0). This would not work for the &amp;quot;Manager Decision History&amp;quot; graph because there is no way that a line starting at the bottom left of the graph could correctly cut through the data with all of the red points on one side and all of the green points on the other (on that graph all values are 0-1 and so the bottom left is the 0, 0 point).&lt;/p&gt;&#xA;&lt;p&gt;A way to address this is to introduce an additional &amp;quot;bias&amp;quot; value. This is effectively like adding an additional neuron whose input value is always one and that has its own weight, just like every other input. Every time that a pattern is passed through the system while it is being trained, when the weights are adjusted, the bias should also be adjusted using the following formula:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;bias = bias &#x2B; (learningRate * localError)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;em&gt;(The formula is basically the same as the weight-adjusting formula except that the &amp;quot;patternInput[i]&amp;quot; value is removed because the bias neuron&#x27;s input value is always 1)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;This bias value means that the line that separates the yes/no values no longer has to go through (0, 0) but it has no other effect on training process, other than there being more slightly more work to do (although, without it, we wouldn&#x27;t be able to get an answer for many sets of data - so it&#x27;s not really &lt;em&gt;more&lt;/em&gt; work at all!).&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;ve just said that it would not be possible to train a simple network of this form for &lt;em&gt;some&lt;/em&gt; data sets without a bias.. which begs the question &amp;quot;for what data sets &lt;em&gt;should&lt;/em&gt; a bias node be introduced?&amp;quot; - I think that it makes sense to &lt;em&gt;always&lt;/em&gt; include one since, presumably, you don&#x27;t know what solution the neural net should produce and so you don&#x27;t know whether or not it would strictly be necessary to have a bias. So it&#x27;s better to err on the safe side. If the data does &lt;em&gt;not&lt;/em&gt; require a bias then the trained network should end up with a small (ie. close to zero) bias value and it will have little impact.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(This &amp;quot;input bias&amp;quot; is very different to moral biases that can creep into machine learning predictions due to biases, that are often unintentionally included, in the training data - see &amp;quot;&lt;a href=&quot;https://www.technologyreview.com/s/608986/forget-killer-robotsbias-is-the-real-ai-danger/&quot;&gt;Forget Killer Robots&#x2014;Bias Is the Real AI Danger&lt;/a&gt;&amp;quot;)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3&gt;From C# to F#..&lt;/h3&gt;&#xA;&lt;p&gt;The format that I intend to follow for these posts is roughly as follows:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Talk about the theory (we&#x27;ve already done that today!)&lt;/li&gt;&#xA;&lt;li&gt;Look at some fairly standard C# code&lt;/li&gt;&#xA;&lt;li&gt;Look at making the C# code more functional by removing variable mutations (including loops)&lt;/li&gt;&#xA;&lt;li&gt;Rewrite the &amp;quot;functional C#&amp;quot; in F#&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;As an F# beginner, this is the approach that I&#x27;ve been using for trying to learn it - until I&#x27;ve internalised it further, it still feels like a big ask to take regular C# and rewrite it into idiomatic F# and so the &amp;quot;functional C#&amp;quot; stage helps me a lot. The syntax of F# is not that big of a deal but &lt;em&gt;thinking&lt;/em&gt; in (functional) F# is still something that I&#x27;m working towards.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;(It&#x27;s worth noting that, for me, getting my head around F# and functional programming is the priority. Much of the C# that we&#x27;ll be looking will be doing in-place mutations - which, arguably, is a good model for doing the processing that we&#x27;ll be looking at when it&#x27;s done on a single thread - and since we&#x27;ll be moving to using immutable structures then there is a good chance that the performance will be worse in the final F# code. If that turns out to be the case, though, then I&#x27;m not going to worry about it. I think that performance concerns are for when you have a better grasp of the technology that you&#x27;re working with and I&#x27;m not there yet with F# - so I don&#x27;t mind if I end up with worse-performing code in the context of this post so long as I&#x27;ve learned a lot from writing it!)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Code slightly modified from that at&#xA;// http://www.robosoup.com/2008/09/the-single-layer-perceptron-c.html&#xA;public static class Perceptron&#xA;{&#xA;  public static void Go(Random r)&#xA;  {&#xA;    // Load sample input patterns and expected outputs&#xA;    var trainingData = new[]&#xA;    {&#xA;      Pattern(0.08, 0.94, true), Pattern(0.13, 0.95, true), Pattern(0.28, 0.66, true),&#xA;      Pattern(0.3, 0.59, true), Pattern(0.31, 0.51, true), Pattern(0.34, 0.67, true),&#xA;      Pattern(0.34, 0.63, true), Pattern(0.36, 0.55, true), Pattern(0.38, 0.67, true),&#xA;      Pattern(0.4, 0.59, true), Pattern(0.4, 0.68, true), Pattern(0.41, 0.5, true),&#xA;      Pattern(0.42, 0.53, true),  Pattern(0.43, 0.65, true), Pattern(0.44, 0.56, true),&#xA;      Pattern(0.47, 0.61, true), Pattern(0.47, 0.5, true), Pattern(0.48, 0.66, true),&#xA;      Pattern(0.52, 0.53, true), Pattern(0.53, 0.58, true), Pattern(0.55, 0.6, true),&#xA;      Pattern(0.56, 0.44, true), Pattern(0.58, 0.63, true), Pattern(0.62, 0.57, true),&#xA;      Pattern(0.68, 0.42, true), Pattern(0.69, 0.21, true), Pattern(0.7, 0.31, true),&#xA;      Pattern(0.73, 0.48, true), Pattern(0.74, 0.47, true), Pattern(0.74, 0.42, true),&#xA;      Pattern(0.76, 0.34, true), Pattern(0.78, 0.5, true), Pattern(0.78, 0.26, true),&#xA;      Pattern(0.81, 0.48, true), Pattern(0.83, 0.32, true), Pattern(0.83, 0.28, true),&#xA;      Pattern(0.85, 0.07, true), Pattern(0.85, 0.45, true), Pattern(0.88, 0.4, true),&#xA;      Pattern(0.89, 0.92, true), Pattern(0.9, 0.33, true), Pattern(0.91, 0.05, true),&#xA;      Pattern(0.92, 0.44, true), Pattern(0.95, 0.94, true), Pattern(0.96, 0.08, true),&#xA;&#xA;      Pattern(0.02, 0.76, false), Pattern(0.06, 0.22, false), Pattern(0.07, 0.16, false),&#xA;      Pattern(0.09, 0.43, false), Pattern(0.1, 0.08, false), Pattern(0.14, 0.07, false),&#xA;      Pattern(0.15, 0.23, false), Pattern(0.17, 0.18, false), Pattern(0.17, 0.11, false),&#xA;      Pattern(0.21, 0.28, false), Pattern(0.22, 0.17, false), Pattern(0.25, 0.09, false),&#xA;      Pattern(0.28, 0.28, false), Pattern(0.28, 0.27, false), Pattern(0.29, 0.22, false),&#xA;      Pattern(0.29, 0.29, false), Pattern(0.3, 0.29, false), Pattern(0.31, 0.14, false),&#xA;      Pattern(0.33, 0.19, false), Pattern(0.33, 0.06, false), Pattern(0.39, 0.15, false),&#xA;      Pattern(0.52, 0.1, false), Pattern(0.65, 0.07, false), Pattern(0.71, 0.1, false),&#xA;      Pattern(0.74, 0.05, false)&#xA;    };&#xA;&#xA;    // Randomise weights&#xA;    var weights = new[] { r.NextDouble(), r.NextDouble() };&#xA;    var bias = 0d;&#xA;&#xA;    // Set learning rate&#xA;    var learningRate = 0.1;&#xA;    var iteration = 0;&#xA;    double globalError;&#xA;    do&#xA;    {&#xA;      globalError = 0;&#xA;      for (var p = 0; p &amp;lt; trainingData.Length; p&#x2B;&#x2B;)&#xA;      {&#xA;        // Calculate output&#xA;        var inputs = trainingData[p].Item1;&#xA;        var output = Output(weights, bias, inputs[0], inputs[1]) ? 1 : -1;&#xA;&#xA;        // Calculate error&#xA;        var expected = trainingData[p].Item2;&#xA;        var localError = (expected ? 1 : -1) - output;&#xA;        if (localError != 0)&#xA;        {&#xA;          // Update weights&#xA;          for (var i = 0; i &amp;lt; 2; i&#x2B;&#x2B;)&#xA;          {&#xA;            weights[i] &#x2B;= learningRate * localError * inputs[i];&#xA;          }&#xA;          bias &#x2B;= learningRate * localError;&#xA;        }&#xA;&#xA;        // Convert error to absolute value&#xA;        globalError &#x2B;= Math.Abs(localError);&#xA;      }&#xA;      Console.WriteLine(&amp;quot;Iteration {0}\tError {1}&amp;quot;, iteration, globalError);&#xA;      iteration&#x2B;&#x2B;;&#xA;    } while (globalError != 0);&#xA;&#xA;    Console.WriteLine();&#xA;    Console.WriteLine(&#xA;      $&amp;quot;Final weights: {weights[0]}, {weights[1]}, Bias: {bias} =&amp;gt; Error: {globalError}&amp;quot;&#xA;    );&#xA;&#xA;    // Display network generalisation (note: the &amp;quot;Manager Decision&amp;quot; data has input values that&#xA;    // are all in the range 0-1 in both dimensions and so we will only look at values in this&#xA;    // range in this preview here)&#xA;    Console.WriteLine();&#xA;    Console.WriteLine(&amp;quot;X,\tY,\tOutput&amp;quot;);&#xA;    for (double x = 0; x &amp;lt;= 1; x &#x2B;= .25)&#xA;    {&#xA;      for (double y = 0; y &amp;lt;= 1; y &#x2B;= .25)&#xA;      {&#xA;        var output = Output(weights, bias, x, y);&#xA;        Console.WriteLine(&amp;quot;{0},\t{1},\t{2}&amp;quot;, x, y, output ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;);&#xA;      }&#xA;    }&#xA;    Console.WriteLine();&#xA;  }&#xA;&#xA;  private static bool Output(double[] weights, double bias, double x, double y)&#xA;  {&#xA;    var sum = (x * weights[0]) &#x2B; (y * weights[1]) &#x2B; bias;&#xA;    return (sum &amp;gt;= 0);&#xA;  }&#xA;&#xA;  /// &amp;lt;summary&amp;gt;Helper for initialising training data&amp;lt;/summary&amp;gt;&#xA;  private static Tuple&amp;lt;double[], bool&amp;gt; Pattern(double x, double y, bool output)&#xA;  {&#xA;    return Tuple.Create(new[] { x, y }, output);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This code is fairly straightforward and it goes through the steps that I described before:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Set weights to be random values and the bias to be zero&lt;/li&gt;&#xA;&lt;li&gt;Take each training data entry&#x27;s input and calculate the output using the current weights (and bias), adjusting the weights (and bias) if the calculated output did not match the expected output&lt;/li&gt;&#xA;&lt;li&gt;Compare the total error against a threshold (of zero) and go back to step 2 if it&#x27;s too high&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The way that I&#x27;m going to change this code from &amp;quot;regular&amp;quot; (I would call it &amp;quot;object oriented&amp;quot; C# but the code shown here is probably closer to being &amp;quot;procedural&amp;quot;) to &amp;quot;functional*&amp;quot; C# is by looking for things that would seem out of place in functional code and replacing them.&lt;/p&gt;&#xA;&lt;p&gt;* &lt;em&gt;(&amp;quot;functional&amp;quot; is often interpreted as meaning that you avoid side effects and avoid mutation - we can argue about that definition another day if you like but it&#x27;s a good enough place to start for now!)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Immediately, the following things jump out at me:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Variables whose values are explicitly changed during processing (eg. &amp;quot;iteration&amp;quot; and &amp;quot;globalError&amp;quot;)&lt;/li&gt;&#xA;&lt;li&gt;Variables whose values change as part of looping constructs (eg. &amp;quot;i&amp;quot;, &amp;quot;x&amp;quot; and &amp;quot;y&amp;quot;)&lt;/li&gt;&#xA;&lt;li&gt;The do..while loop will not be useful if values are not to be mutated with it and so that will need to be replaced with something else&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;I suppose the question, then, is &lt;em&gt;how&lt;/em&gt; can we possibly write code like this &lt;em&gt;without&lt;/em&gt; changing / mutating / updating values?&lt;/p&gt;&#xA;&lt;p&gt;The first thing to recognise is that LINQ made a more functional style of processing much more mainstream within C# and seem less alien. Before LINQ, if you had an array of values and you wanted an array containing the squares of these values (contrived example, I know, but bear with me) then you may well have achieved this in a fairly procedural manner - eg.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var values = new[] { 1, 2, 3 };&#xA;var squaredValues = new int[values.Length];&#xA;for (var i = 0; i &amp;lt; values.Length; i&#x2B;&#x2B;)&#xA;  squaredValues[i] = values[i] * values[i];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Each time the loop is executed, the value of &amp;quot;i&amp;quot; changes and the &amp;quot;squareValues&amp;quot; array is updated.&lt;/p&gt;&#xA;&lt;p&gt;Until the for loop has been fully executed, the &amp;quot;squaredValues&amp;quot; array is only partially initialised.&lt;/p&gt;&#xA;&lt;p&gt;Within the loop, it&#x27;s technically possible to change the value of &amp;quot;i&amp;quot; and move it backwards or forwards (such as by throwing in a bonus &amp;quot;i&#x2B;&#x2B;&amp;quot; to keep future code maintainers on their toes) and this can be the cause of potential coding errors in loops more complicated than the one shown here.&lt;/p&gt;&#xA;&lt;p&gt;Since all we want to do is transform every single value in one array and create a new array from the results, it would be nice if we could be more descriptive in what we are trying to do and to remove some &amp;quot;book keeping&amp;quot; (such as tracking the &amp;quot;i&amp;quot; value using the for loop). This is what would happen if LINQ was used to perform the same work -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var values = new[] { 1, 2, 3 };&#xA;var squaredValues = values&#xA;  .Select(value =&amp;gt; value * value)&#xA;  .ToArray();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Note that there is no mutation occurring here. Each time that the lambda that is passed to the &amp;quot;Select&amp;quot; method is called, a new &amp;quot;value&amp;quot; reference is created (unlike &amp;quot;i&amp;quot;, which was a single variable shared across each iteration of the loop).&lt;/p&gt;&#xA;&lt;p&gt;This is one technique that will be useful to remove mutation from code.&lt;/p&gt;&#xA;&lt;p&gt;Another is the &amp;quot;Aggregate&amp;quot; method for enumerating a list of items and reducing it to a single reference. To try to illustrate; if I had a collection of words and I wanted to get the &lt;em&gt;total number of words&lt;/em&gt; and the &lt;em&gt;total number of letters&lt;/em&gt; then I might write procedural code like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;static void ShowLetterAndWordCount(IEnumerable&amp;lt;string&amp;gt; words)&#xA;{&#xA;  var numberOfLetters = 0;&#xA;  var numberOfWords = 0;&#xA;  foreach (var word in words)&#xA;  {&#xA;    numberOfLetters &#x2B;= word.Length;&#xA;    numberOfWords&#x2B;&#x2B;;&#xA;  }&#xA;  Console.WriteLine(&amp;quot;Total number of letters: &amp;quot; &#x2B; numberOfLetters);&#xA;  Console.WriteLine(&amp;quot;Total number of words: &amp;quot; &#x2B; numberOfWords);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. or I could achieve the same thing without any mutating variables by using the following code:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;static void ShowLetterAndWordCount(IEnumerable&amp;lt;string&amp;gt; words)&#xA;{&#xA;  var summary = words.Aggregate(&#xA;    seed: new { NumberOfLetters = 0, NumberOfWords = 0 },&#xA;    func: (valueSoFar, nextWord) =&amp;gt; new&#xA;    {&#xA;      NumberOfLetters = valueSoFar.NumberOfLetters &#x2B; nextWord.Length,&#xA;      NumberOfWords = valueSoFar.NumberOfWords &#x2B; 1&#xA;    }&#xA;  );&#xA;  Console.WriteLine(&amp;quot;Total number of letters: &amp;quot; &#x2B; summary.NumberOfLetters);&#xA;  Console.WriteLine(&amp;quot;Total number of words: &amp;quot; &#x2B; summary.NumberOfWords);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;What &amp;quot;Aggregate&amp;quot; does is it takes a &amp;quot;seed&amp;quot; value and the first value of the list of items and combines them using the &amp;quot;func&amp;quot; lambda. It then takes this result and combines it with the &lt;em&gt;second&lt;/em&gt; value of the list, also using the &amp;quot;func&amp;quot; lambda. It will then take &lt;em&gt;this&lt;/em&gt; result and combines it with the &lt;em&gt;third&lt;/em&gt; value of the list, etc.. until one final combined value is returned. In the code above, I&#x27;ve used an anonymous type for the seed (and so the final &amp;quot;summary&amp;quot; reference will also be an instance of that anonymous type and so have &amp;quot;NumberOfLetters&amp;quot; and &amp;quot;NumberOfWords&amp;quot; properties) but the seed can be a class or a primitive or any type that you need.&lt;/p&gt;&#xA;&lt;p&gt;All of the &amp;quot;book keeping&amp;quot; required by the Aggregate method is handled by the method itself - there is no loop variable to worry about and there are no variables outside of the loop (such as &amp;quot;numberOfLetters&amp;quot; and &amp;quot;numberOfWords&amp;quot;) that must be tracked. You need only to tell it what the initial &amp;quot;seed&amp;quot; value should be and how it should combine the &amp;quot;value so far&amp;quot; with a single item from the input list.&lt;/p&gt;&#xA;&lt;p&gt;This is the advantage that it has over the procedural version (which may initially appear &amp;quot;less complicated&amp;quot;) - you only need to consider what actually happens within a single operation and you don&#x27;t have to look after any variables that must be maintained across the entire loop (which was the case with &amp;quot;numberOfLetters&amp;quot; and &amp;quot;numberOfWords&amp;quot; in the first version).&lt;/p&gt;&#xA;&lt;p&gt;At its core, this means that the scope of variables is reduced and when they don&#x27;t change (ie. they are immutable) there are less moving parts for you to mentally consider when trying to reason about any particular line of code.&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;m finding that the F# version of Aggregate (called &amp;quot;fold&amp;quot;) is a very powerful and useful technique and so having a good grasp on how it works is very useful. Just to make it &lt;em&gt;extra&lt;/em&gt; clear (apologies if this is belabouring the point but Aggregate doesn&#x27;t, in my experience, tend to be commonly used in C# and so it may not be familiar to some), here&#x27;s another example:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var values = new[] { 1, 2, 3, 4, 5 };&#xA;var sumOfValues = words.Aggregate(&#xA;  seed: 0,&#xA;  func: (valueSoFar, value) =&amp;gt; valueSoFar &#x2B; value&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This will return 15 because it will just add all of the values together. It begins with a seed value of 0 and adds it to the first value (which is 1) to get 1. It then adds this &amp;quot;value so far&amp;quot; to the second value (which is 2) to get 3. It adds this to the third value (which is 3) to get 6 and adds this to the fourth value (which is 4) to get 10 and adds this to the fifth value (which is 5) to get 15.&lt;/p&gt;&#xA;&lt;p&gt;Not a particularly useful piece of code - and one that could have been written more clearly as:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var values = new[] { 1, 2, 3, 4, 5 };&#xA;var sumOfValues = words.Sum();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. but hopefully it reinforces how the Aggregate method operates on data. And hopefully it makes it clear how powerful Aggregate can be because so many other operations may be built on top of it, such as Min or Max -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;static int? Min(IEnumerable&amp;lt;int&amp;gt; values)&#xA;{&#xA;  return values.Aggregate(&#xA;    seed: (int?)null,&#xA;    func: (valueSoFar, nextValue) =&amp;gt; (valueSoFar.HasValue &amp;amp;&amp;amp; valueSoFar &amp;lt; nextValue)&#xA;      ? valueSoFar&#xA;      : nextValue&#xA;  );&#xA;}&#xA;&#xA;static int? Max(IEnumerable&amp;lt;int&amp;gt; values)&#xA;{&#xA;  return values.Aggregate(&#xA;    seed: (int?)null,&#xA;    func: (valueSoFar, nextValue) =&amp;gt; (valueSoFar.HasValue &amp;amp;&amp;amp; valueSoFar &amp;gt; nextValue)&#xA;      ? valueSoFar&#xA;      : nextValue&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3&gt;To functional code.. one step at a time&lt;/h3&gt;&#xA;&lt;p&gt;Back to the Single Layer Perceptron code.. The way that I&#x27;m approaching this is to take one logical section of code and replace the procedural style of code with functional constructs.&lt;/p&gt;&#xA;&lt;p&gt;The first that I&#x27;ll tackle is the do..while loop and the mutation of the outer &amp;quot;iteration&amp;quot;, &amp;quot;weights&amp;quot;, &amp;quot;bias&amp;quot; and &amp;quot;globalError&amp;quot; variables.&lt;/p&gt;&#xA;&lt;p&gt;This will be straightforward if we use the Aggregate method where the &amp;quot;value so far&amp;quot; contains a &amp;quot;Weights&amp;quot; array, a &amp;quot;Bias&amp;quot; value and a &amp;quot;GlobalError&amp;quot; value that will be re-calculated each iteration.&lt;/p&gt;&#xA;&lt;p&gt;The input list passed to Aggregate will be an incrementing list of integers representing the current iteration number. The &amp;quot;func&amp;quot; lambda will take the previous Weights / Bias / GlobalError state and calculate the &lt;em&gt;next&lt;/em&gt; Weight / Bias / GlobalError state. If the &amp;quot;previousState&amp;quot; already has a low enough GlobalError then the &amp;quot;func&amp;quot; lambda won&#x27;t have to do any more calculating and can just return the previousState reference immediately (meaning that we don&#x27;t have to do any more work and we can just let Aggregate finish as many iterations as it is configured to do so until the Aggregate call completes - if that sounds a bit unclear then hopefully it will make more sense after you see the code and I talk more about it below).&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const double learningRate = 0.1;&#xA;const int maxNumberOfIterationsToPerform = 100; // See notes below code&#xA;&#xA;var finalResult = Enumerable.Range(0, maxNumberOfIterationsToPerform)&#xA;  .Aggregate(&#xA;    seed: new&#xA;    {&#xA;      Weights = new[] { r.NextDouble(), r.NextDouble() },&#xA;      Bias = 0d,&#xA;      GlobalError = double.MaxValue&#xA;    },&#xA;    func: (previousState, iteration) =&amp;gt;&#xA;    {&#xA;      // The network is already trained - no more calculations required&#xA;      if (previousState.GlobalError == 0)&#xA;        return previousState;&#xA;&#xA;      var weights = previousState.Weights;&#xA;      var bias = previousState.Bias;&#xA;      var globalError = 0d;&#xA;      for (var p = 0; p &amp;lt; trainingData.Length; p&#x2B;&#x2B;)&#xA;      {&#xA;        // Calculate output&#xA;        var inputs = trainingData[p].Item1;&#xA;        var output = Output(weights, bias, inputs[0], inputs[1]) ? 1 : -1;&#xA;&#xA;        // Calculate error&#xA;        var expected = trainingData[p].Item2;&#xA;        var localError = (expected ? 1 : -1) - output;&#xA;        if (localError != 0)&#xA;        {&#xA;          // Update weights (taking a copy of the weights array rather than altering its values)&#xA;          weights = weights.ToArray();&#xA;          for (var i = 0; i &amp;lt; 2; i&#x2B;&#x2B;)&#xA;          {&#xA;            weights[i] &#x2B;= learningRate * localError * inputs[i];&#xA;          }&#xA;          bias &#x2B;= learningRate * localError;&#xA;        }&#xA;&#xA;        // Convert error to absolute value&#xA;        globalError &#x2B;= Math.Abs(localError);&#xA;      }&#xA;      Console.WriteLine(&amp;quot;Iteration {0}\tError {1}&amp;quot;, iteration, globalError);&#xA;      return new { Weights = weights, Bias = bias, GlobalError = globalError };&#xA;    }&#xA;  );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;(You may notice that I also changing &amp;quot;learningRate&amp;quot; from being a variable to be a const - since this will never change, it makes sense).&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;ve had to make a compromise in how I&#x27;ve written this code - I&#x27;ve had to specify a &amp;quot;maxNumberOfIterationsToPerform&amp;quot; value because the Aggregate method has no way to say &amp;quot;stop processing now, we have an answer that we&#x27;re happy with&amp;quot;. This is why there is the check at the top of the &amp;quot;func&amp;quot; lambda that says &amp;quot;if previousState&#x27;s GlobalError is low enough then do no more calculation&amp;quot; - the Aggregate method will keep running through &lt;em&gt;every single value&lt;/em&gt; in the input list. But how do we know that 100 iterations will be enough to get a zero Global Error? We don&#x27;t!&lt;/p&gt;&#xA;&lt;p&gt;What would be really helpful would be if we could have a variation of Aggregate that returns an &lt;strong&gt;IEnumerable&lt;/strong&gt; of all of the intermediate calculation states (all of the &amp;quot;previousState&amp;quot; values) so that we could stop enumerating as soon as one of them has a GlobalError of zero - that way we wouldn&#x27;t have to limit ourselves to a low maxNumberOfIterationsToPerform value. Something that would let us write code like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const double learningRate = 0.1;&#xA;&#xA;var finalResult = Enumerable.Range(0, int.MaxValue)&#xA;  .AggregateAndReturnIntermediateStates(&#xA;    seed: new&#xA;    {&#xA;      // Same as in earlier code sample..&#xA;    },&#xA;    func: (previousState, iteration) =&amp;gt;&#xA;    {&#xA;      // Same as in earlier code sample but without the need to check GlobalError..&#xA;    }&#xA;  )&#xA;  .First(state =&amp;gt; state.GlobalError == 0);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;I searched through the LINQ and the F# library documentation and I couldn&#x27;t find anything in LINQ that I could use to do this but I &lt;em&gt;did&lt;/em&gt; find something in F# called &amp;quot;scan&amp;quot;. To implement it as a LINQ-esque C# extension method, though, is simple. If we start by considering what an implementation of Aggregate would look like:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public static TAccumulate Aggregate&amp;lt;TSource, TAccumulate&amp;gt;(&#xA;  this IEnumerable&amp;lt;TSource&amp;gt; source,&#xA;  TAccumulate seed,&#xA;  Func&amp;lt;TAccumulate, TSource, TAccumulate&amp;gt; func)&#xA;{&#xA;  var valueSoFar = seed;&#xA;  foreach (var value in source)&#xA;    valueSoFar = func(valueSoFar, value);&#xA;  return valueSoFar;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. we need only to change the return type from &lt;strong&gt;TAccumulate&lt;/strong&gt; to &lt;strong&gt;IEnumerable&amp;lt;TAccumulate&amp;gt;&lt;/strong&gt; and to throw in some &amp;quot;yield return&amp;quot; magic to produce &amp;quot;Scan&amp;quot;:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public static IEnumerable&amp;lt;TAccumulate&amp;gt; Scan&amp;lt;TSource, TAccumulate&amp;gt;(&#xA;  this IEnumerable&amp;lt;TSource&amp;gt; source,&#xA;  TAccumulate seed,&#xA;  Func&amp;lt;TAccumulate, TSource, TAccumulate&amp;gt; func)&#xA;{&#xA;  yield return seed;&#xA;&#xA;  var valueSoFar = seed;&#xA;  foreach (var value in source)&#xA;  {&#xA;    valueSoFar = func(valueSoFar, value);&#xA;    yield return valueSoFar;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This means that I can now write:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const double learningRate = 0.1;&#xA;&#xA;var finalResult = Enumerable.Range(0, int.MaxValue)&#xA;  .Scan(&#xA;    seed: new&#xA;    {&#xA;      // Same as in earlier code sample..&#xA;    },&#xA;    func: (previousState, iteration) =&amp;gt;&#xA;    {&#xA;      // Same as in earlier code sample (but still without the need to check GlobalError)..&#xA;    }&#xA;  )&#xA;  .First(state =&amp;gt; state.GlobalError == 0);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Hurrah! That&#x27;s a good step forward!&lt;/p&gt;&#xA;&lt;p&gt;Now I need to tackle the inner section:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var weights = previousState.Weights;&#xA;var bias = previousState.Bias;&#xA;var globalError = 0d;&#xA;for (var p = 0; p &amp;lt; trainingData.Length; p&#x2B;&#x2B;)&#xA;{&#xA;  // Calculate output&#xA;  var inputs = trainingData[p].Item1;&#xA;  var output = Output(weights, bias, inputs[0], inputs[1]) ? 1 : -1;&#xA;&#xA;  // Calculate error&#xA;  var expected = trainingData[p].Item2;&#xA;  var localError = (expected ? 1 : -1) - output;&#xA;  if (localError != 0)&#xA;  {&#xA;    // Update weights (taking a copy of the weights array rather than altering its values)&#xA;    weights = weights.ToArray();&#xA;    for (var i = 0; i &amp;lt; 2; i&#x2B;&#x2B;)&#xA;    {&#xA;      weights[i] &#x2B;= learningRate * localError * inputs[i];&#xA;    }&#xA;    bias &#x2B;= learningRate * localError;&#xA;  }&#xA;&#xA;  // Convert error to absolute value&#xA;  globalError &#x2B;= Math.Abs(localError);&#xA;}&#xA;&#xA;Console.WriteLine(&amp;quot;Iteration {0}\tError {1}&amp;quot;, iteration, globalError);&#xA;return new { Weights = weights, Bias = bias, GlobalError = globalError };&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;I&#x27;m going to start from the inside and work outward this time. The first thing that I want to get rid of is the loop that is used to update weights. What this loop is effectively doing is walking through two arrays (&amp;quot;weights&amp;quot; and &amp;quot;inputs&amp;quot;) and performing an operation on a single pair of items from each (each loop iteration, we do something with one weight value and one input value).&lt;/p&gt;&#xA;&lt;p&gt;This is just what the &amp;quot;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dd267698(v=vs.110).aspx&quot;&gt;Zip&lt;/a&gt;&amp;quot; LINQ function does and so we can use that here. We&#x27;ll replace:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Update weights (taking a copy of the weights array rather than altering its values)&#xA;weights = weights.ToArray();&#xA;for (var i = 0; i &amp;lt; 2; i&#x2B;&#x2B;)&#xA;{&#xA;  weights[i] &#x2B;= learningRate * localError * inputs[i];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. with this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;weights&#xA;  .Zip(inputs, (weight, input) =&amp;gt; weight &#x2B; (learningRate * localError * input))&#xA;  .ToArray();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;To maker the &amp;quot;inner section&amp;quot; simpler, I&#x27;m going to hide that logic into a function:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static double[] UpdateWeights(double[] weights, double learningRate, double localError, double[] inputs)&#xA;{&#xA;  if (localError == 0)&#xA;    return weights;&#xA;&#xA;  return weights&#xA;    .Zip(inputs, (weight, input) =&amp;gt; weight &#x2B; (learningRate * localError * input))&#xA;    .ToArray();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;I&#x27;ve also pulled the &amp;quot;is localError zero&amp;quot; check into the method. It feels a little unnecessary when there are only two weights and two inputs but this new version of the weight-updating code may be called with any number of inputs and so it may make sense to avoid looping through them all when the localError is zero (because we won&#x27;t be making any changes to the weights in that case).&lt;/p&gt;&#xA;&lt;p&gt;The next thing to do is to get rid of the other for-loop and the values that it mutates on each iteration. This part:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var weights = previousState.Weights;&#xA;var bias = previousState.Bias;&#xA;var globalError = 0d;&#xA;for (var p = 0; p &amp;lt; trainingData.Length; p&#x2B;&#x2B;)&#xA;{&#xA;  // Apply current pattern and alter weights, bias and globalError accordingly..&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;If we group the &amp;quot;weights / bias / globalError&amp;quot; values into a single value then we can replace this with an Aggregate call, like we saw earlier:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var resultForIteration = trainingData.Aggregate(&#xA;  seed: new { Weights = previousState.Weights, Bias = previousState.Bias, GlobalError = 0d },&#xA;  func: (stateSoFar, pattern) =&amp;gt;&#xA;  {&#xA;    // Apply current pattern and calculate new weights, bias and globalError values..&#xA;&#xA;    // .. and return new object wrapping these values&#xA;    return new { Weights = newWeights, Bias = newBias, GlobalError = newGlobalError },&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Before I pull it all together, I want to make a small change to the &amp;quot;Output&amp;quot; function - the current version only works if there are precisely two inputs and two weights but the &amp;quot;UpdateWeights&amp;quot; function from a moment ago works with any number of inputs and so I think that &amp;quot;Output&amp;quot; should too. So we&#x27;ll replace this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static bool Output(double[] weights, double bias, double x, double y)&#xA;{&#xA;  var sum = (x * weights[0]) &#x2B; (y * weights[1]) &#x2B; bias;&#xA;  return (sum &amp;gt;= 0);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;.. with this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;private static bool Output(double[] weights, double bias, double[] inputs)&#xA;{&#xA;  var sum = inputs.Zip(weights, (input, weight) =&amp;gt; input * weight).Sum() &#x2B; bias;&#xA;  return (sum &amp;gt;= 0);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;em&gt;(Note that using &amp;quot;Zip&amp;quot; again means that we don&#x27;t have to resort to any for loops)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Combining all of this, the network-training code becomes the following:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const double learningRate = 0.1;&#xA;&#xA;var finalResult = Enumerable.Range(0, int.MaxValue)&#xA;  .Scan(&#xA;    seed: new&#xA;    {&#xA;      Weights = new[] { r.NextDouble(), r.NextDouble() },&#xA;      Bias = 0d,&#xA;      GlobalError = double.MaxValue&#xA;    },&#xA;    func: (previousState, iteration) =&amp;gt;&#xA;    {&#xA;      var resultForIteration = trainingData.Aggregate(&#xA;        seed: new { Weights = previousState.Weights, Bias = previousState.Bias, GlobalError = 0d },&#xA;        func: (stateSoFar, pattern) =&amp;gt;&#xA;        {&#xA;          var output = Output(stateSoFar.Weights, stateSoFar.Bias, pattern.Item1) ? 1 : -1;&#xA;          var localError = (pattern.Item2 ? 1 : -1) - output;&#xA;          return new&#xA;          {&#xA;            Weights = UpdateWeights(stateSoFar.Weights, learningRate, localError, pattern.Item1),&#xA;            Bias = stateSoFar.Bias &#x2B; (learningRate * localError),&#xA;            GlobalError = stateSoFar.GlobalError &#x2B; Math.Abs(localError)&#xA;          };&#xA;        }&#xA;      );&#xA;      Console.WriteLine(&amp;quot;Iteration {0}\tError {1}&amp;quot;, iteration, resultForIteration.GlobalError);&#xA;      return resultForIteration;&#xA;    }&#xA;  )&#xA;  .First(state =&amp;gt; state.GlobalError &amp;lt;= 0);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The final piece of the puzzle is to change the &amp;quot;Display network generalisation&amp;quot; code to remove the for loops from there too -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;for (double x = 0; x &amp;lt;= 1; x &#x2B;= .25)&#xA;{&#xA;  for (double y = 0; y &amp;lt;= 1; y &#x2B;= .25)&#xA;  {&#xA;    var output = Output(weights, bias, new[] { x, y });&#xA;    Console.WriteLine(&amp;quot;{0},\t{1},\t{2}&amp;quot;, x, y, output ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The natural thing would seem to be to replace those loops with Enumerable.Range calls.. however, &amp;quot;Range&amp;quot; only works &lt;strong&gt;int&lt;/strong&gt; values and we need to use &lt;strong&gt;double&lt;/strong&gt; in order to increment by 0.25 each time. We could write a new &amp;quot;Range&amp;quot; extension method that would take &lt;strong&gt;double&lt;/strong&gt; values or we could just workaround the limitation. If we want the values 0, 0.25, 0.5, 0.75, 1 then that&#x27;s five distinct values. The number of items may be calculated by taking the end value, subtracting the start value, dividing by the increment and then adding one (to ensure that we get the start value &lt;em&gt;and&lt;/em&gt; the end value).&lt;/p&gt;&#xA;&lt;p&gt;In this case, that would be ((1 - 0) / 0.25) &#x2B; 1 = 4 &#x2B; 1 = 5.&lt;/p&gt;&#xA;&lt;p&gt;We can do that in code like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const double startAt = 0;&#xA;const double endAt = 1;&#xA;const double increment = 0.25;&#xA;var range = Enumerable.Range(0, (int)((endAt - startAt) / increment) &#x2B; 1)&#xA;  .Select(value =&amp;gt; value * increment);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;We then want to &amp;quot;cross join&amp;quot; range with itself so that we loop through every (x, y) combination. We can do that with creative use of &amp;quot;SelectMany&amp;quot; -&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var xyPairs = range.SelectMany(value =&amp;gt; range, (x, y) =&amp;gt; new[] { x, y });&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;And now that nested for-loop may be replaced by this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;const double startAt = 0;&#xA;const double endAt = 1;&#xA;const double increment = 0.25;&#xA;var range = Enumerable.Range(0, (int)((endAt - startAt) / increment) &#x2B; 1)&#xA;  .Select(value =&amp;gt; value * increment);&#xA;var xyPairs = range.SelectMany(value =&amp;gt; range, (x, y) =&amp;gt; new[] { x, y });&#xA;Console.WriteLine(string.Join(&#xA;  Environment.NewLine,&#xA;  xyPairs.Select(inputs =&amp;gt; $&amp;quot;{string.Join(&amp;quot;\t&amp;quot;, inputs)}\t{(Output(finalResult.Weights, finalResult.Bias, inputs) ? &amp;quot;Yes&amp;quot; : &amp;quot;No&amp;quot;)}&amp;quot;)&#xA;));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;That&#x27;s the final piece of the convert-to-functional-code puzzle. Now we just need to translate it into F#!&lt;/p&gt;&#xA;&lt;h3&gt;Sidebar: &amp;quot;Function&amp;quot; vs &amp;quot;Method&amp;quot;&lt;/h3&gt;&#xA;&lt;p&gt;I find that in languages that are thought to be object oriented, the words &amp;quot;function&amp;quot; and &amp;quot;method&amp;quot; are commonly used interchangeably. Since beginning to become interested in so-called &amp;quot;functional programming&amp;quot;, I&#x27;ve tried to find out whether there is a definitive or accepted difference between the two (after all, it&#x27;s called &lt;em&gt;functional&lt;/em&gt; programming rather than &lt;em&gt;methodical&lt;/em&gt; programming, so surely &lt;em&gt;someone&lt;/em&gt; thought that there was a difference!).&lt;/p&gt;&#xA;&lt;p&gt;A few times, I&#x27;ve heard that the difference is that a &amp;quot;function&amp;quot; should not have any side effects and so should always return the same value given the same inputs. On the other hand, a &amp;quot;method&amp;quot; &lt;em&gt;may&lt;/em&gt; cause side effects or rely upon ambient references - if the code writes to disk or reads &lt;strong&gt;DateTime.Now&lt;/strong&gt; then it&#x27;s not &amp;quot;pure&amp;quot; (where &amp;quot;pure&amp;quot; means that it relies only upon its arguments and does not produce any side effects - it &lt;em&gt;only&lt;/em&gt; produces a return value and does not manipulate anything else) and so should be described as being part of a &lt;em&gt;method&lt;/em&gt; rather than part of a &lt;em&gt;function&lt;/em&gt;. Most recently I&#x27;ve seen it described in &lt;a href=&quot;https://softwareengineering.stackexchange.com/a/222378/204464&quot;&gt;this Software Engineering Stack Exchange answer&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I try to use the word &amp;quot;function&amp;quot; only when it is known to be a pure function and a &amp;quot;method&amp;quot; otherwise (when it either &lt;em&gt;definitely&lt;/em&gt; causes / relies upon side effects or if it&#x27;s not clear). I still get it wrong from time to time (for example, I&#x27;ve been referring to LINQ &amp;quot;methods&amp;quot; in this post and we can probably presume that they are pure functions in most cases) but I&#x27;m still in the process of trying to internalise this terminology while I&#x27;m trying to internalise writing a more &amp;quot;functional&amp;quot; style of code for writing F#.&lt;/p&gt;&#xA;&lt;h3&gt;Writing F# code&lt;/h3&gt;&#xA;&lt;p&gt;If you&#x27;ve read this far then you may be detecting an unexpectedly abrupt end to the post judging by your browser&#x27;s scrollbar!&lt;/p&gt;&#xA;&lt;p&gt;Originally, I had intended to include all of the above content &lt;em&gt;and&lt;/em&gt; go into how precisely to translate the functional C# code into F# but it quickly became clear that the post would be insanely large (I&#x27;ve written my fair share of monster posts in the past and I think that the time has come to put an end to them - this one&#x27;s already pretty hefty).&lt;/p&gt;&#xA;&lt;p&gt;Cliffhanger!&lt;/p&gt;&#xA;&lt;p&gt;Sorry.&lt;/p&gt;&#xA;&lt;p&gt;My next post will jump straight into F#. I will assume zero prior knowledge of the language itself but I also want to proceed at a decent rate. Hopefully this will mean that you won&#x27;t get bored if you already have a little exposure to F# (or maybe it will be the worst of both worlds and be too slow for F# novices but too fast for those who&#x27;ve never seen it before). Let&#x27;s wait and see*!&lt;/p&gt;&#xA;&lt;p&gt;* &lt;em&gt;(Should you be desperately excited and dying for part two, rest assured that it&#x27;s already written and just needs a thorough proof-read - so it should be published early next week at the latest)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;I&#x27;m not sure how many posts there will be in the series in total but the Single Layer Perceptron is just the first model that I want to cover before moving onto the Back Propagation Neural Network model and then onto the Multi-Output variation (which will be necessary in order to classify hand written digits from 0-9 as opposed to being a simple yes/no classifier). Although I said that performance is not my primary concern for this playing-with-F# process, there are a couple of interesting things that I&#x27;d like to talk about on that front. So there should be a lot to come over the next few months!&lt;/p&gt;&#xA;&lt;div class=&quot;Related&quot;&gt;&lt;h3&gt;You may also be interested in:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.productiverage.com/face-or-no-face-finding-faces-in-photos-using-c-sharp-and-accordnet&quot;&gt;Face or no face (finding faces in photos using C# and Accord.NET)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
                <pubDate>Tue, 27 Mar 2018 22:18:00 GMT</pubDate>
            </item>

    </channel>

</rss>