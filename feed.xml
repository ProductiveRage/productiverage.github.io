<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/Content/RSS.xslt" type="text/xsl" media="screen"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">

	<channel>
		
		<title>Productive Rage</title>
		<link>http://www.productiverage.com/</link>
		<atom:link href="http://www.productiverage.com/feed" rel="self" type="application/rss+xml"/>
		<description>Dan's techie ramblings</description>
		<language>en-gb</language>

		<lastBuildDate>Wed, 10 Aug 2016 21:01:00 GMT</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		
		<image>
			<title>Productive Rage</title>
			<url>http://www.productiverage.com/Content/Images/Grouch.jpg</url>
			<width>142</width>
			<height>142</height>
			<link>http://www.productiverage.com/</link>
		</image>

		<xhtml:meta xmlns:xhtml="http://www.w3.org/1999/xhtml" name="robots" content="noindex" /> 

		<item>
			<title>Retrieving Performance Counter from a remote PC using C#</title>
            <link>http://www.productiverage.com/retrieving-performance-counter-from-a-remote-pc-using-c-sharp</link>
			<guid>http://www.productiverage.com/retrieving-performance-counter-from-a-remote-pc-using-c-sharp</guid>
			<description>&lt;p&gt;&lt;a href=&quot;http://www.productiverage.com/why-is-saving-performance-monitor-perfmon-settings-so-difficult-these-days&quot;&gt;PerfMon&lt;/a&gt; can be an invaluable tool for monitoring performance counters on the local or remote computer. It allows you to graph the information live and it allows you to write the data away to disk for future analysis.&lt;/p&gt;

&lt;p&gt;However, for some performance investigation that I was doing, I wanted something slightly different to what PerfMon offers. I was testing a service under load, a service that was being hosted on a dedicated box for the performance investigation - and I was testing it by generating the load from another dedicated server. Since nothing else would be hitting the service host box, what I wanted to do for each test run was to restart the service on the host, hit it with the sample load and record the processor time, % time in GC, number of garbage collections at each generation and some other metrics until the work was fully processed - at that point, there would be no more information to gather for that particular run. The experiment could be repeated a few times and the results filed away, brought back out to compare to the same load being run after some performance tweaks had been made to the code.&lt;/p&gt;

&lt;p&gt;It wouldn&#39;t be the end of the world if I had to do this manually - configure PerfMon to write the counter data to disk somewhere, restart the service before each run and then extract the data from the PerfMon logs that relate to the time period that just passed.. but it&#39;s tedious work that I don&#39;t want to bother with; I want to deploy a change then run-test-and-gather-data with a single button press. Better than that, I want to be able to perform multiple runs without any manual intervention - I want to deploy the new code then have the test harness restart the service, replay the test load, record the counter data in a file and then repeat as many times as desired.&lt;/p&gt;

&lt;h3&gt;Restarting the service&lt;/h3&gt;

&lt;p&gt;This part is easy, we can use a method such as this -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static void Restart(string server, string serviceName)
{
  if (string.IsNullOrWhiteSpace(server))
    throw new ArgumentException($&quot;Null/blank {nameof(server)} specified&quot;);
  if (string.IsNullOrWhiteSpace(serviceName))
    throw new ArgumentException($&quot;Null/blank {nameof(serviceName)} specified&quot;);

  // Add a reference to System.ServiceProcess to make ServiceController available
  using (var serviceController = new ServiceController(serviceName, server))
  {
    serviceController.Stop();
    serviceController.WaitForStatus(ServiceControllerStatus.Stopped);
    serviceController.Start();
    serviceController.WaitForStatus(ServiceControllerStatus.Running);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Querying a performance counter remotely&lt;/h3&gt;

&lt;p&gt;This bit is a little trickier.. I started with code from an article &lt;a href=&quot;http://haishibai.blogspot.co.uk/2010/02/tiy-collect-remote-performance-counters.html&quot;&gt;TIY – Collect remote performance counters using C#&lt;/a&gt; which sounded &lt;em&gt;exactly&lt;/em&gt; like what I wanted. Unfortunately, I was getting an error with the lines&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IntPtr userHandle = new IntPtr(0);
LogonUser(
  &quot;UserA&quot;,
  &quot;DomainA&quot;,
  &quot;PasswordA&quot;,
  LOGON32_LOGON_INTERACTIVE,
  LOGON32_PROVIDER_DEFAULT,
  ref userHandle
);
WindowsIdentity identity = new WindowsIdentity(userHandle);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Token can not be zero&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This essentially meant that LogonUser had failed and so the &quot;userHandle&quot; reference had not been set (and left as a zero pointer). The code should really have checked the LogonUser return value -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var logonSuccess = LogonUser(
  &quot;UserA&quot;,
  &quot;DomainA&quot;,
  &quot;PasswordA&quot;,
  LOGON32_LOGON_INTERACTIVE,
  LOGON32_PROVIDER_DEFAULT,
  ref userHandle
);
if (!logonSuccess)
  throw new Exception(&quot;LogonUser failed&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. but that wouldn&#39;t actually fix the failure.&lt;/p&gt;

&lt;p&gt;The underlying problem was explained by another article &lt;a href=&quot;https://platinumdogs.me/2008/10/30/net-c-impersonation-with-network-credentials/&quot;&gt;.NET (C#) Impersonation with Network Credentials&lt;/a&gt; that explains that&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you require the impersonated logon to have network credentials, you must select LOGON32_LOGON_NEW_CREDENTIALS as your logon type, which requires that you select LOGON32_PROVIDER_WINNT50 as the logon provider type&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once I got the proof-of-concept working from these two articles, I fleshed things out into the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Principal;

namespace PerformanceCounterCapture
{
  public sealed class PerformanceCounterRetriever : IDisposable
  {
    private const int LOGON32_LOGON_NEW_CREDENTIALS = 9;
    private const int LOGON32_PROVIDER_WINNT50 = 3;

    [DllImport(&quot;advapi32.dll&quot;, CharSet = CharSet.Auto)]
    private static extern bool LogonUser(
      string lpszUserName,
      string lpszDomain,
      string lpszPassword,
      int dwLogonType,
      int dwLogonProvider,
      ref IntPtr phToken);

    private WindowsIdentity _identity;
    private WindowsImpersonationContext _context;
    private bool _disposed;
    private readonly string _server;
    public PerformanceCounterRetriever(string server, string domain, string user, string password)
    {
      if (string.IsNullOrWhiteSpace(server))
        throw new ArgumentException($&quot;Null/blank {nameof(server)} specified&quot;);
      if (string.IsNullOrWhiteSpace(domain))
        throw new ArgumentException($&quot;Null/blank {nameof(domain)} specified&quot;);
      if (string.IsNullOrWhiteSpace(user))
        throw new ArgumentException($&quot;Null/blank {nameof(user)} specified&quot;);
      if (password == null)
        throw new ArgumentNullException(nameof(password));

      try
      {
        var userHandle = new IntPtr(0);
        var logonSuccess = LogonUser(
          user,
          domain,
          password,
          LOGON32_LOGON_NEW_CREDENTIALS,
          LOGON32_PROVIDER_WINNT50,
          ref userHandle
        );
        if (!logonSuccess)
          throw new Exception(&quot;LogonUser failed&quot;);
        _identity = new WindowsIdentity(userHandle);
        _context = _identity.Impersonate();
        _server = server;
        _disposed = false;
      }
      finally
      {
        Dispose();
      }
    }
    ~PerformanceCounterRetriever()
    {
      Dispose(false);
    }

    public IEnumerable&amp;lt;float&amp;gt; Get(
      string categoryName,
      string counterName,
      string optionalInstanceName = null)
    {
      if (string.IsNullOrWhiteSpace(categoryName))
        throw new ArgumentException($&quot;Null/blank {nameof(categoryName)} specified&quot;);
      if (string.IsNullOrWhiteSpace(counterName))
        throw new ArgumentException($&quot;Null/blank {nameof(counterName)} specified&quot;);

      var counters = new List&amp;lt;PerformanceCounter&amp;gt;();
      var category = new PerformanceCounterCategory(categoryName, _server);
      foreach (var instanceName in category.GetInstanceNames())
      {
        if ((optionalInstanceName == null) || (instanceName == optionalInstanceName))
          counters.Add(new PerformanceCounter(categoryName, counterName, instanceName, _server));
      }
      if (!counters.Any())
        yield break;

      while (true)
      {
        foreach (var c in counters)
          yield return c.NextValue();
      }
    }

    public void Dispose()
    {
      Dispose(true);
      GC.SuppressFinalize(this);
    }

    private void Dispose(bool disposing)
    {
      if (_disposed)
        return;

      if (_identity != null)
      {
        _identity.Dispose();
        _identity = null;
      }

      if (_context != null)
      {
        _context.Undo();
        _context.Dispose();
        _context = null;
      }

      _disposed = true;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This class may be used in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var counterRetriever = new PerformanceCounterRetriever(&quot;TestBox&quot;, &quot;Home&quot;, &quot;Dan&quot;, &quot;password&quot;))
{
  foreach (var value in counterRetriever.Get(&quot;Process&quot;, &quot;% Processor Time&quot;, &quot;TestService&quot;))
  {
    Console.WriteLine(
      &quot;[{0}] TestService: % Processor Time = {1}&quot;,
      DateTime.Now.ToString(&quot;HH:mm:ss.fff&quot;),
      value
    );
    Thread.Sleep(1000);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &quot;counterRetriever.Get&quot; call returns an &lt;strong&gt;IEnumerable&amp;lt;float&amp;gt;&lt;/strong&gt; which retrieves a new value every time that a new value is requested from the enumerable reference. The code above (very roughly) imitates PerfMon in that it reads a new &quot;% Processor Time&quot; value every second.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note: The code above never terminates since nothing breaks it out of the loop, which is not useful in many scenarios.. but I&#39;ll talk about dealing with that shortly)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a good first step. However, when I&#39;m analysing the results of my test runs, I want to know more than just how much processor time is being used by the service.&lt;/p&gt;

&lt;h3&gt;Querying multiple performance counters remotely&lt;/h3&gt;

&lt;p&gt;If I want to collect the data from multiple performance counters then I need to get multiple &lt;strong&gt;IEnumerable&amp;lt;float&amp;gt;&lt;/strong&gt; instances from multiple &quot;counterRetriever.Get&quot; calls and then retrieve a value from each before pausing and repeating.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var counterRetriever = new PerformanceCounterRetriever(&quot;TestBox&quot;, &quot;Home&quot;, &quot;Dan&quot;, &quot;password&quot;))
{
  var processorTime = counterRetriever
    .Get(&quot;Process&quot;, &quot;% Processor Time&quot;, &quot;TestService&quot;)
    .GetEnumerator();
  var percentageTimeInGC = counterRetriever
    .Get(&quot;.NET CLR Memory&quot;, &quot;% Time in GC&quot;, &quot;TestService&quot;)
    .GetEnumerator();
  while (true)
  {
    processorTime.MoveNext();
    Console.WriteLine(
      &quot;[{0}] TestService: % Processor Time = {1}&quot;,
      DateTime.Now.ToString(&quot;HH:mm:ss.fff&quot;),
      processorTime.Current
    );
    percentageTimeInGC.MoveNext();
    Console.WriteLine(
      &quot;[{0}] TestService: % Time in GC = {1}&quot;,
      DateTime.Now.ToString(&quot;HH:mm:ss.fff&quot;),
      percentageTimeInGC.Current
    );
    Thread.Sleep(1000);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This could be extended to do the job (in my case, there are seven counters that I&#39;m interested in so the above could be chopped and changed to record them all) but the code will get a bit verbose and &quot;noisy&quot; quite quickly.&lt;/p&gt;

&lt;h3&gt;Troublesome counters&lt;/h3&gt;

&lt;p&gt;There is also a problem with writing code like the above and presuming that you can track all performance counters in the same way. For example, I also want to track the number of garbage collections that have occurred at generations 0, 1 and 2 since the service was restarted. It probably doesn&#39;t make much sense to record the values of these every second; I don&#39;t really care if there had been a single gen 0 garbage collection after 1s and after 2s and after 3s and after 4s, I&#39;d much rather see that at 1s there had been a single gen 0 collection and then, at 4s, there had been a second. I want to know when these kinds of values change and I&#39;m not interested in the repeated values between the changes.&lt;/p&gt;

&lt;p&gt;As another example, I&#39;m also interested in capturing information about the rate at which bytes are allocated by the service, for which I can consult the &quot;Allocated Bytes/sec&quot; counter. However, this counter is only updated after a GC event and will report zero the result of the time. This doesn&#39;t mean that zero bytes per second really were being allocated each time that the counter reports zero, it&#39;s just that there is nothing that can accurately report a value for this counter &lt;em&gt;except&lt;/em&gt; immediately following a collection. For this counter, it&#39;s probably best for me to exclude zero values - particularly while a performance test is underway, since it is basically impossible that the service will ever be allocating &lt;em&gt;zero&lt;/em&gt; bytes per second while it&#39;s deserialising requests and processing them. As with the &quot;number of collections at gen {x}&quot; counters, it will be worth ignoring some of the counter values but it will be important to know &lt;em&gt;when&lt;/em&gt; the values that we do pay attention to were recorded (since, for the &quot;Allocated Bytes/sec&quot; counter, it should be possible to use this information to approximate the allocation rate at any given time).&lt;/p&gt;

&lt;h3&gt;A complete solution&lt;/h3&gt;

&lt;p&gt;To try to address all of these problems, I&#39;ve come up with the following. It&#39;s not the smallest code sample in the world but it should be easy to follow and understand if you need to extend it for your own purposes -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace PerformanceCounterCapture
{
  public static class PerformanceCounterLogger
  {
    /// &amp;lt;summary&amp;gt;
    /// This will capture useful performance counter data until the specified cancellation token
    /// is set, at which point it will return the data (as such, it makes sense to call this from
    /// a background thread)
    /// &amp;lt;/summary&amp;gt;
    public static Results Log(
      string server,
      string domain,
      string user,
      string password,
      string serviceName,
      CancellationToken cancellationToken,
      TimeSpan timeBetweenCaptures)
    {
      if (string.IsNullOrWhiteSpace(server))
        throw new ArgumentException($&quot;Null/blank {nameof(server)} specified&quot;);
      if (string.IsNullOrWhiteSpace(domain))
        throw new ArgumentException($&quot;Null/blank {nameof(domain)} specified&quot;);
      if (string.IsNullOrWhiteSpace(user))
        throw new ArgumentException($&quot;Null/blank {nameof(user)} specified&quot;);
      if (password == null)
        throw new ArgumentNullException(nameof(password));
      if (string.IsNullOrWhiteSpace(serviceName))
        throw new ArgumentException($&quot;Null/blank {nameof(serviceName)} specified&quot;);
      if (cancellationToken == null)
        throw new ArgumentNullException(nameof(cancellationToken));
      if (timeBetweenCaptures.Ticks &amp;lt; 0)
        throw new ArgumentOutOfRangeException($&quot;{timeBetweenCaptures} must be a non-negative duration&quot;);

      // These lists will be populated periodically (according to timeBetweenCaptures) and, when the
      // cancellation token is set, they will all be included in the returned data for analysis
      var processorTimes = new List&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt;();
      var percentageGarbageCollectorTimes = new List&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt;();
      var numberOfGen0Collections = new List&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt;();
      var numberOfGen1Collections = new List&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt;();
      var numberOfGen2Collections = new List&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt;();
      var largeObjectHeapSize = new List&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt;();
      var allocatedBytesPerSeconds = new List&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt;();
      using (var performanceCounterRetriever = new PerformanceCounterRetriever(
                                                server, domain, user, password))
      {
        var performanceCountersToRecord = new[]
        {
          new PerformanceCounterDetails(
            &quot;Process&quot;,
            &quot;% Processor Time&quot;,
            serviceName,
            value =&amp;gt; processorTimes.Add(Tuple.Create(DateTime.Now, value))
          ),
          new PerformanceCounterDetails(
            &quot;.NET CLR Memory&quot;,
            &quot;% Time in GC&quot;,
            serviceName,
            value =&amp;gt; percentageGarbageCollectorTimes.Add(Tuple.Create(DateTime.Now, value))
          ),
          new PerformanceCounterDetails(
            &quot;.NET CLR Memory&quot;,
            &quot;# Gen 0 Collections&quot;,
            serviceName,
            value =&amp;gt; AddValueToListIfNew(numberOfGen0Collections, value)
          ),
          new PerformanceCounterDetails(
            &quot;.NET CLR Memory&quot;,
            &quot;# Gen 1 Collections&quot;,
            serviceName,
            value =&amp;gt; AddValueToListIfNew(numberOfGen1Collections, value)
          ),
          new PerformanceCounterDetails(
            &quot;.NET CLR Memory&quot;,
            &quot;# Gen 2 Collections&quot;,
            serviceName,
            value =&amp;gt; AddValueToListIfNew(numberOfGen2Collections, value)
          ),
          new PerformanceCounterDetails(
            &quot;.NET CLR Memory&quot;,
            &quot;Large Object Heap size&quot;,
            serviceName,
            value =&amp;gt; AddValueToListIfNew(largeObjectHeapSize, value)
          ),
          new PerformanceCounterDetails(
            &quot;.NET CLR Memory&quot;,
            &quot;Allocated Bytes/sec&quot;,
            serviceName,
            value =&amp;gt;
            {
              // This is only set after a GC event so there are lots of spurious zeroes that we
              // want to ignore (this value-ignoring is the main reason that the date that the
              // value was recorded is included in the result data, so that it&#39;s possible to
              // approximate values during the missing periods - which may be of variable
              // duration since the useful values recorded for this are related to GC events)
              if (value == 0)
                return;
              allocatedBytesPerSeconds.Add(Tuple.Create(DateTime.Now, value));
            }
          )
        };

        var allCounterEnumerators = performanceCountersToRecord
          .Select(counterDetails =&amp;gt; new {
            Feed =
              performanceCounterRetriever.Get(
                counterDetails.CategoryName,
                counterDetails.CounterName,
                counterDetails.OptionalInstanceName
              )
              .GetEnumerator(),
            ValueLogger = counterDetails.ValueLogger
          })
          .ToArray(); // Don&#39;t call GetFeed every time that we enumerate the set

        // Keep looping and populating the lists until the cancellation token is set - at that
        // point, return a result object that contains all of the data
        while (!cancellationToken.IsCancellationRequested)
        {
          foreach (var counterEnumerator in allCounterEnumerators)
          {
            counterEnumerator.Feed.MoveNext();
            var value = counterEnumerator.Feed.Current;
            counterEnumerator.ValueLogger(value);
          }
          if (!cancellationToken.IsCancellationRequested)
            Thread.Sleep(timeBetweenCaptures);
        }
        return new Results(
          processorTimes,
          percentageGarbageCollectorTimes,
          numberOfGen0Collections,
          numberOfGen1Collections,
          numberOfGen2Collections,
          largeObjectHeapSize,
          allocatedBytesPerSeconds
        );
      }
    }

    private static void AddValueToListIfNew(List&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; values, float value)
    {
      if (values == null)
        throw new ArgumentNullException(nameof(value));

      if (!values.Any() || (values.Last().Item2 != value))
        values.Add(Tuple.Create(DateTime.Now, value));
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It also needs the following two classes for its internal initialisation and for returning results -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public sealed class PerformanceCounterDetails
{
  public PerformanceCounterDetails(
    string categoryName,
    string counterName,
    string optionalInstanceName,
    Action&amp;lt;float&amp;gt; valueLogger)
  {
    if (string.IsNullOrWhiteSpace(categoryName))
      throw new ArgumentException($&quot;Null/blank {nameof(categoryName)} specified&quot;);
    if (string.IsNullOrWhiteSpace(counterName))
      throw new ArgumentException($&quot;Null/blank {nameof(counterName)} specified&quot;);
    if (valueLogger == null)
      throw new ArgumentNullException(nameof(valueLogger));

    CategoryName = categoryName;
    CounterName = counterName;
    OptionalInstanceName = optionalInstanceName;
    ValueLogger = valueLogger;
  }

  public string CategoryName { get; }
  public string CounterName { get; }
  public string OptionalInstanceName { get; }
  public Action&amp;lt;float&amp;gt; ValueLogger { get; }
}

public sealed class Results
{
  public Results(
    IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; processorTimes,
    IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; percentageGarbageCollectorTimes,
    IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; numberOfGen0Collections,
    IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; numberOfGen1Collections,
    IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; numberOfGen2Collections,
    IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; largeObjectHeapSize,
    IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; allocatedBytesPerSeconds)
  {
    if (processorTimes == null)
      throw new ArgumentNullException(nameof(processorTimes));
    if (percentageGarbageCollectorTimes == null)
      throw new ArgumentNullException(nameof(percentageGarbageCollectorTimes));
    if (numberOfGen0Collections == null)
      throw new ArgumentNullException(nameof(numberOfGen0Collections));
    if (numberOfGen1Collections == null)
      throw new ArgumentNullException(nameof(numberOfGen1Collections));
    if (numberOfGen2Collections == null)
      throw new ArgumentNullException(nameof(numberOfGen2Collections));
    if (largeObjectHeapSize == null)
      throw new ArgumentNullException(nameof(largeObjectHeapSize));
    if (allocatedBytesPerSeconds == null)
      throw new ArgumentNullException(nameof(allocatedBytesPerSeconds));

    ProcessorTimes = processorTimes;
    PercentageGarbageCollectorTimes = percentageGarbageCollectorTimes;
    NumberOfGen0Collections = numberOfGen0Collections;
    NumberOfGen1Collections = numberOfGen1Collections;
    NumberOfGen2Collections = numberOfGen2Collections;
    LargeObjectHeapSize = largeObjectHeapSize;
    AllocatedBytesPerSeconds = allocatedBytesPerSeconds;
  }

  public IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; ProcessorTimes { get; }
  public IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; PercentageGarbageCollectorTimes { get; }
  public IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; NumberOfGen0Collections { get; }
  public IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; NumberOfGen1Collections { get; }
  public IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; NumberOfGen2Collections { get; }
  public IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; LargeObjectHeapSize { get; }
  public IEnumerable&amp;lt;Tuple&amp;lt;DateTime, float&amp;gt;&amp;gt; AllocatedBytesPerSeconds { get; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&#39;t think that there&#39;s a great deal that requires explaining in depth - the &lt;strong&gt;PerformanceCounterLogger&lt;/strong&gt; will periodically capture values from all of the counters that I&#39;m interested in, dealing with the special cases described earlier (garbage collection frequency, allocated bytes / sec, etc..) in a blocking manner. It continues to capture counter data until the cancellation token passed to it is set.&lt;/p&gt;

&lt;p&gt;That means that it makes sense to capture the performance counter data on a seperate thread. Something like the following (which is basically what I&#39;m using in my test runs) -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Restart the service on the test server
Restart(&quot;TestBox&quot;, &quot;TestService&quot;);

// Start recording performance counters on a separate thread
Results performanceCounterResults = null;
var cancellationTokenSource = new CancellationTokenSource();
var resultsReadyIndicator = new ManualResetEvent(initialState: false);
ThreadPool.QueueUserWorkItem(state =&amp;gt;
{
  performanceCounterResults = PerformanceCounterLogger.Log(
    &quot;TestBox&quot;,
    &quot;Home&quot;,
    &quot;Dan&quot;,
    &quot;password&quot;,
    &quot;TestService&quot;,
    cancellationTokenSource.Token,
    TimeSpan.FromSeconds(1)
  );
  resultsReadyIndicator.Set();
});

// TODO: Fire load at the server...........

// Tell the performance counters that it&#39;s time to stop capturing and wait for it to acknowledge
cancellationTokenSource.Cancel();
resultsReadyIndicator.WaitOne();

// TODO: Write the &quot;performanceCounterResults&quot; data away to analyse later...........
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two big TODOs in the above code - somehow the request payload needs to be fired at the remote server that is being measured and somehow the performance counter results need to be compared between one run and the next. Obviously, these will vary from one project to the next and so they will be very dependent upon what kind of service that you&#39;re testing (and what performance counters you&#39;re interested in). In my case, I already had a decent system available for replaying old requests so that changes to the system could be examined, all I needed on top of that was a way to capture some performance counters to bring some &lt;em&gt;cold hard numbers&lt;/em&gt; into proceedings - if you&#39;re in a similar position then hopefully this post will be helpful!&lt;/p&gt;

&lt;h3&gt;Shameless plug&lt;/h3&gt;

&lt;p&gt;Although I had a system in place to replay historical requests in order to simulate load, there was a slight problem with this in that the service would read from a database and it was totally feasible that the data persisted there could vary from hour to hour (if not more frequently). This could mean that one performance run would not be directly comparable to the next - one run may return more or less results for a particular query, for example, or have to process some of those results in a different (ie. more or less expensive) manner.&lt;/p&gt;

&lt;p&gt;This would make meaningful comparisons difficult - really, each run should return precisely the same data as the next.&lt;/p&gt;

&lt;p&gt;For this particular service, a few things were in my favour on this front; the service was read only, its job is only to deliver data for rendering on various web sites and it does not have to perform any write operations. It also only specifies a database connection in a fairly limited number of places. This allowed me to add a config option to the service that would (when in a particular test mode) create database connections that get their data from a proxy service instead of going directly to the SQL database.&lt;/p&gt;

&lt;p&gt;The proxy service can be run in either &quot;record&quot; or &quot;replay&quot; mode. First, the service that is under test should have the batch of requests that the processing performance is being measured for replayed while the database proxy service is in &quot;record&quot; mode - this allows the proxy service to populate a cache on disk that contains all of the result sets for all of the database queries performed. After this, all subsequent performance runs are made with the proxy service in &quot;replay&quot; mode - in this configuration, the service will never hit the database and will always return data from its cache. This ensures that the data retrieved during each performance run is consistent, which makes it much easier to reach useful conclusions and make meaningful comparisons.&lt;/p&gt;

&lt;p&gt;The library that I wrote for this database proxy service is called &lt;a href=&quot;https://github.com/ProductiveRage/SqlProxyAndReplay&quot;&gt;SqlProxyAndReplay&lt;/a&gt; and is available on GitHub and via NuGet (the client needs &lt;a href=&quot;https://www.nuget.org/packages/ProductiveRage.SqlProxyAndReplay.Client&quot;&gt;ProductiveRage.SqlProxyAndReplay.Client&lt;/a&gt; and the server needs &lt;a href=&quot;https://www.nuget.org/packages/ProductiveRage.SqlProxyAndReplay.Service&quot;&gt;ProductiveRage.SqlProxyAndReplay.Service&lt;/a&gt; and &lt;a href=&quot;https://www.nuget.org/packages/ProductiveRage.SqlProxyAndReplay.Service.Example&quot;&gt;ProductiveRage.SqlProxyAndReplay.Service.Example&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There are some caveats - under the hood, this uses a WCF (binary endpoint) service and it won&#39;t be as fast as hitting a database directly. And, as a .net library, there will be some garbage collection overhead since it will result in additional allocations. However, for testing how the &lt;em&gt;internals&lt;/em&gt; of a service (and not, say, tweaking individual SQL queries to try to eke out more performance) then this shouldn&#39;t be a huge problem since the overhead should be consistent from one run to the next. So long as you are measuring changes in performance runs &lt;em&gt;before&lt;/em&gt; you deploy an update and performance runs &lt;em&gt;after&lt;/em&gt; an update (hopefully improvements!) then the overhead of the database proxy shouldn&#39;t matter.&lt;/p&gt;

&lt;p&gt;Sometimes, of course, the database &lt;em&gt;is&lt;/em&gt; your bottle neck and so you want to capture real queries as they hit it so that you can performance tune them. There are already lot of good tools for this (you can get a long way by attaching SQL Profiler and looking for the most expensive or most frequent quite-expensive queries) but I hadn&#39;t found something useful for my use case, where I wanted to optimise what happened &lt;em&gt;after&lt;/em&gt; any database access and just wanted the database access layer to magically return consistent data time after time. At least, I couldn&#39;t find one that didn&#39;t entail significant work in writing some sort of mock / cached database access layer.&lt;/p&gt;

&lt;p&gt;While the &lt;a href=&quot;https://github.com/ProductiveRage/SqlProxyAndReplay&quot;&gt;SqlProxyAndReplay&lt;/a&gt; service / library may not be as useful if you have to test a service or application that needs to persist changes made to the backing store, I imagine that it&#39;s common for a lot of large scale applications to want to cache and optimise read operations and so this may well be useful for other people. The &lt;a href=&quot;https://github.com/ProductiveRage/SqlProxyAndReplay&quot;&gt;linked GitHub&lt;/a&gt; repo has more information in its README and there&#39;s a &quot;Tester&quot; console application to demonstrate it in action.&lt;/p&gt;
</description>
			<pubDate>Wed, 10 Aug 2016 21:01:00 GMT</pubDate>
		</item>
		<item>
			<title>Why is saving Performance Monitor (PerfMon) settings so difficult these days?!</title>
            <link>http://www.productiverage.com/why-is-saving-performance-monitor-perfmon-settings-so-difficult-these-days</link>
			<guid>http://www.productiverage.com/why-is-saving-performance-monitor-perfmon-settings-so-difficult-these-days</guid>
			<description>&lt;p&gt;I&#39;ve been measuring and optimising a busy service recently at work and PerfMon is an invaluable tool in doing things like this - the service records its own performance counters about requests/second, cache-hits-and-misses/second and many other useful metrics, while Windows and .net also report on many helpful statistics such as CPU time per process, memory usage, bytes-allocated/second and frequency of garbage collections.&lt;/p&gt;

&lt;p&gt;Performance Monitor makes it really easy to add a set of counters and format their lines so that some are bold and thick (and, so, clear at a glance) while other may be made less obtrusive, so as not to confuse the graph too much.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.productiverage.com/Content/Images/Posts/PerfMon.png&quot; alt=&quot;Performance Monitor&quot;&gt;&lt;/p&gt;

&lt;p&gt;However, over the years the interface to this tool has had some changes made to it that I&#39;m not convinced are improvements. Back on Windows Server 2003, I&#39;m pretty sure that you could configure your view how you wanted it and then simply use File/Save to write an &quot;.mmc&quot; configuration file. Whenever you wanted, you could double-click that file and all of the counters would be there, configured just as you left them, quietly capturing data and displaying it how you want it. Unfortunately, that day has gone and it&#39;s not quite so easy.&lt;/p&gt;

&lt;p&gt;Never mind, I move with the times.&lt;/p&gt;

&lt;p&gt;There are a few options available to do the same sort of thing today. The first, and most obvious, is to right-click on the graph and choose &quot;Save Settings As&quot;. This saves a web page version of the current view that uses an ActiveX plugin (and so requires IE to display it and requires you to &quot;Allow blocked content&quot;). With this plugin you can do much of what you can in PerfMon - add or remove counters, highlight the currently-selected counter, change the formatting of the current counter, etc.. This option isn&#39;t terrible but it doesn&#39;t feel quite as solid as &lt;em&gt;real&lt;/em&gt; PerfMon.&lt;/p&gt;

&lt;p&gt;The second option sounds like a pretty reasonable idea; you can copy the current configuration to the clipboard, save it and then paste it back into a fresh PerfMon instance in the future (the content saved to the clipboard is basically the same content as is written away when you use &quot;Save Settings As&quot; to create the web page version). My biggest problem with this is that it doesn&#39;t work! I&#39;ve tried on several machines now (Windows Server 2012 and Windows 8.1) and I can successfully copy the content (I can verify this by pasting it into notepad) but when I click on the paste icon in PerfMon nothing happens. No error, no nothing. Maybe I&#39;m doing something stupid here, but I don&#39;t know what.&lt;/p&gt;

&lt;p&gt;There is a third option, I think, involving the &quot;Data Collector Sets&quot; section of the PerfMon tree view. However, I tried to remember what it was earlier today by playing around with the interface and I didn&#39;t get anywhere quickly.&lt;/p&gt;

&lt;p&gt;I use a fourth option these days, which is to start PerfMon using &quot;perfmon /sys&quot; (this works from the command line or from [Win]-[R]). This starts PerfMon in a kind of streamlined interface (the treeview down the left hand side of the application is notable by its absence, for example). But the really good bit about this mode is that the File menu now has two options - &quot;Save Settings As&quot; and &quot;LoadSettings&quot;. These work with &quot;.PerfMonCfg&quot; files and essentially make simple what I used to do in the old days; configure everything just so, save to the desktop for another day, open from the desktop on that day in the future and find everything just how I want it.&lt;/p&gt;

&lt;p&gt;Success!&lt;/p&gt;

&lt;h3&gt;Another little tweak&lt;/h3&gt;

&lt;p&gt;There is one thing that still annoys me, though. There doesn&#39;t seem to be any way to manually control the split between how much space is dedicated to the lower part of the display (that contains the names of the counters) and the upper half (the graph). If you add more than a couple of counters then the interface forces a vertical scroll bar onto the lower section - if you could manually make that section taller then the scroll bar would not be necessary.. but, alas, it appears that you can not.&lt;/p&gt;

&lt;p&gt;There is one trick to make it &lt;em&gt;slightly&lt;/em&gt; better, though. If the window is too narrow to show all of the information in that lower area then the horizontal scrollbar always appears on top of the last counter. If you can make the PerfMon window wide enough that you don&#39;t need the horizontal scrollbar then you can get one more counter to fit into view before the vertical scrollbar forces its way into play. This seems to allow up to nine counters to be displayed in the lower area with no scrolling required - if you need ten or more, though, then it seems like vertical scrolling is unavoidable :(&lt;/p&gt;
</description>
			<pubDate>Thu, 14 Jul 2016 19:36:00 GMT</pubDate>
		</item>
		<item>
			<title>Creating a C# (&quot;Roslyn&quot;) Analyser - For beginners by a beginner</title>
            <link>http://www.productiverage.com/creating-a-c-sharp-roslyn-analyser-for-beginners-by-a-beginner</link>
			<guid>http://www.productiverage.com/creating-a-c-sharp-roslyn-analyser-for-beginners-by-a-beginner</guid>
			<description>&lt;p&gt;I&#39;ve been meaning to try writing a post about creating analysers for a little while now - they&#39;re a technology that I think has huge promise for improving code quality and they&#39;re something that I&#39;ve successfully played around with recently.. but I&#39;m still very much in the early phases of being proficient and they&#39;re not something that I can just sit down and bang out easily (ie. not without a lot of googling).&lt;/p&gt;

&lt;p&gt;So this won&#39;t be the post of an expert - but I&#39;m hoping to use that to my advantage since I hopefully remember the pain points all too well and can go through the sort of things that I try when I&#39;m hashing these out.&lt;/p&gt;

&lt;p&gt;Most of the analysers I&#39;ve been writing have been for libraries that work with &lt;a href=&quot;http://bridge.net/&quot;&gt;Bridge.NET&lt;/a&gt;, which introduces some of its own complications. I&#39;m hoping to talk about those problems and how to overcome them in a later post - this one will be a more general introduction.&lt;/p&gt;

&lt;h3&gt;Creating a fresh Analyser project&lt;/h3&gt;

&lt;p&gt;The easiest way to get started is to use a Microsoft template. To do this, first you need to install the Visual Studio 2016 SDK and to do &lt;em&gt;this&lt;/em&gt; you go to File / New / Project and then choose C# in the left navigation pane, click on Extensibility and then select &quot;Install the Visual Studio Extensibility Tools&quot; (you may already have it installed, it&#39;s an optional component of VS2015 - if you see no link to &quot;Install the Visual Studio Extensibility Tools&quot; then hopefully that&#39;s why). Next, from the same Extensibility section, you need to select &quot;Download the .NET Compiler Platform SDK&quot;. This will ensure that you have the project template installed that we&#39;re going to use and it installs some other helpful tools, such as the Syntax Visualizer (which we&#39;ll see in a moment).&lt;/p&gt;

&lt;p&gt;Now that you have the template and since you&#39;re already in File / New / Project / C# / Extensibility, select &quot;Analyzer with Code Fix (NuGet + VSIX)&quot; to create an example analyser solution. This will be a fully operational analyser, split into three projects - the analyser itself, a unit test library and a &quot;Vsix&quot; project. This last one would be used if you wanted to create an analyser that would be installed and applied to &lt;em&gt;all&lt;/em&gt; projects that you would ever open and &lt;em&gt;not&lt;/em&gt; apply to any specific library. What I&#39;ll be talking about here will be creating an analyser to work with a particular library (that would be distributed &lt;em&gt;with&lt;/em&gt; the library) - so that everyone consuming the library can benefit from it. As such, to keep things simple, delete the &quot;Vsix&quot; project now,&lt;/p&gt;

&lt;p&gt;The example analyser that this template installs does something very simple - it looks for class names that are not upper case and it warns about them. In terms of functionality, this is not particularly useful.. but in terms of education and illustrating how to get started it&#39;s a good jumping off point. In fact, the project includes not just an analyser but also a &quot;code fix&quot; - once a non-all-upper-case class name is identified and warned about, a quick fix will be offered in the IDE to change the name to match the upper case regime that it&#39;s pushing. Code fixes can be really helpful but I&#39;ll talk about them another day, I think that there already will be plenty to deal with in this post.&lt;/p&gt;

&lt;p&gt;The analyser class looks basically like this (I&#39;ve removed comments and replaced localisable strings with hard-coded strings, just to make it a little less to absorb all at once) -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Collections.Immutable;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;

namespace ExampleAnalyser
{
    [DiagnosticAnalyzer(LanguageNames.CSharp)]
    public class ExampleAnalyserAnalyzer : DiagnosticAnalyzer
    {
        public const string DiagnosticId = &quot;ExampleAnalyser&quot;;
        private const string Category = &quot;Naming&quot;;
        private static readonly LocalizableString Title
            = &quot;Type name contains lowercase letters&quot;;
        private static readonly LocalizableString MessageFormat
            = &quot;Type name &#39;{0}&#39; contains lowercase letters&quot;;
        private static readonly LocalizableString Description
            = &quot;Type names should be all uppercase.&quot;;

        private static DiagnosticDescriptor Rule = new DiagnosticDescriptor(
            DiagnosticId,
            Title,
            MessageFormat,
            Category,
            DiagnosticSeverity.Warning,
            isEnabledByDefault: true,
            description: Description
        );

        public override ImmutableArray&amp;lt;DiagnosticDescriptor&amp;gt; SupportedDiagnostics
        {
            get { return ImmutableArray.Create(Rule); }
        }

        public override void Initialize(AnalysisContext context)
        {
            context.RegisterSymbolAction(AnalyzeSymbol, SymbolKind.NamedType);
        }

        private static void AnalyzeSymbol(SymbolAnalysisContext context)
        {
            var namedTypeSymbol = (INamedTypeSymbol)context.Symbol;
            if (namedTypeSymbol.Name.ToCharArray().Any(char.IsLower))
            {
                context.ReportDiagnostic(Diagnostic.Create(
                    Rule,
                    namedTypeSymbol.Locations[0],
                    namedTypeSymbol.Name
                ));
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To summarise what&#39;s in the above code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Every analyser needs at least one rule that it will declare&lt;/strong&gt;, where a rule has various properties such as a Diagnostic Id, Category, Title, MessageFormat, Description and Severity. The two that are most immediately interesting are Severity (make it a Warning to point out a potential mistake or make it an Error to indicate a critical problem that will prevent a build from being completed) and MessageFormat, since MessageFormat is responsible for the text that will be displayed to the user in their Error List. MessageFormat supports string replacement; in the above example, you can see that there is a &quot;{0}&quot; placeholder in the MessageFormat - when &quot;Diagnostic.Create&quot; is called, the argument &quot;namedTypeSymbol.Name&quot; is injected into that &quot;{0}&quot; placeholder.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Every analyser needs to declare a &quot;SupportedDiagnostics&quot; value that lists all of the types of rule&lt;/strong&gt; that it is possible for the analyser to raise. This is vital in order for the analyser to work correctly at runtime. (If you create an analyser that has three different types of rule that it can report but you forget to declare one of the types in the &quot;SupportedDiagnostics&quot; property, there is actually an analyser that is installed with the template that points out the mistake to you - which is a great example of how analysers can protect you at compile time from potential runtime problems!)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Every analyser needs an &quot;Initialize&quot; method that registers what type of symbol (more on what this actually means in a moment) it&#39;s interested in&lt;/strong&gt; and provides a reference to a method that will perform the actual analysis&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The simple task of the class above is to look at any &quot;named type&quot; (ie. classes and structs) and inspect their name to ensure that they consist entirely of capital letters (remember, this example included in the &quot;Analyzer with Code Fix (NuGet + VSIX)&quot; template is simply for educational purposes and &lt;em&gt;not&lt;/em&gt; because it&#39;s believed that all class names should be SHOUTING_FORMAT! :) Any class that doesn&#39;t have an all-caps name will result in a warning in the Error List.&lt;/p&gt;

&lt;p&gt;To illustrate how this should work, the test project includes the following test method -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[TestMethod]
public void TestMethod2()
{
    var test = @&quot;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

namespace ConsoleApplication1
{
    class TypeName
    {   
    }
}&quot;;
    var expected = new DiagnosticResult
    {
        Id = &quot;ExampleAnalyser&quot;,
        Message = String.Format(&quot;Type name &#39;{0}&#39; contains lowercase letters&quot;, &quot;TypeName&quot;),
        Severity = DiagnosticSeverity.Warning,
        Locations = new[] {
            new DiagnosticResultLocation(&quot;Test0.cs&quot;, 11, 15)
        }
    };

    VerifyCSharpDiagnostic(test, expected);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes it clear to see precisely what sort of thing the analyser is looking for but it also gives us another immediate benefit - we can actually execute the analyser and step through it in the debugger if we want to have a poke around with exactly what is in the &lt;strong&gt;SymbolAnalysisContext&lt;/strong&gt; reference or if we want to look at the properties of a particular &lt;strong&gt;INamedTypeSymbol&lt;/strong&gt; instance. This is as easy as putting a breakpoint into the &quot;AnalyzeSymbol&quot; method in the example analyser and then going back into the test class, right-clicking within &quot;TestMethod2&quot; and selecting &quot;Debug Tests&quot;.&lt;/p&gt;

&lt;p&gt;I want to introduce one other useful technique before moving on - the use of the &quot;Syntax Visualizer&quot;. An analyser works on an in-memory tree of nodes that represent the source code of the file that you&#39;re looking at*. In the unit test above, the named symbol &quot;TypeName&quot; is a child node of the &quot;TypeName&quot; class declaration, which is a child node of the &quot;ConsoleApplication1&quot; namespace, which is a child of a top-level construct called the &quot;CompilationUnit&quot;. Understanding the various types of node will be key to writing analysers and the Syntax Visualizer makes this a little bit easier.&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;(Although an analyser starts by examining source code in a particular file, it&#39;s also possible to look up types and values that are referenced in that code that live elsewhere - to find out what namespace a class that is referenced exists in, for example, or to determine what arguments a method that is called that exists in a different library. These lookups are more expensive than looking solely at the content in the current file, however, and so should only be done if strictly necessary. We will see how to do this shortly. When looking only at content parsed from the current file, we are looking at the &quot;syntax tree&quot;. When looking up references elsewhere in the solution we accessing the &quot;semantic model&quot;).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Having installed the &quot;.NET Compiler Platform SDK&quot; earlier, you will now have access to this tool - go to View / Other Windows / Syntax Visualizer. This shows the syntax tree for any code within your project. So, if you click on the name &quot;TestMethod2&quot; then you will see that it is an &lt;strong&gt;IdentifierToken&lt;/strong&gt; (which is the name &quot;TestMethod2&quot;) that is a child node of a &lt;strong&gt;MethodDeclaration&lt;/strong&gt; which is a child node of a &lt;strong&gt;ClassDeclaration&lt;/strong&gt; which is a child node of a &lt;strong&gt;NamespaceDeclaration&lt;/strong&gt;, which is a child node of a &lt;strong&gt;CompilationUnit&lt;/strong&gt;. You can click on any of these nodes in the Syntax Visualiser to inspect some of the properties of the node and you can open further branches to inspect more - for example, there is a &quot;Block&quot; node that will appear shortly after the &lt;strong&gt;IdentifierToken&lt;/strong&gt; that you may click to reveal the nodes that represent the statements within the method.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.productiverage.com/Content/Images/Posts/SyntaxVisualizer.png&quot; alt=&quot;The Syntax Visualizer&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Writing a real analyser&lt;/h3&gt;

&lt;p&gt;I&#39;m going to walk through an analyser that I created recently - starting from scratch and, hopefully, encountering the same problems that I did last time so that I can illustrate how to find out how to solve them.&lt;/p&gt;

&lt;p&gt;The analyser is part of my &lt;a href=&quot;https://www.nuget.org/packages/Bridge.React&quot;&gt;Bridge.React&lt;/a&gt; library but you won&#39;t need to know anything about React or Bridge to follow along.&lt;/p&gt;

&lt;p&gt;The root of the problem relates to the rendering of html &quot;select&quot; elements. There are three related properties to consider when rendering a &quot;select&quot; element; &quot;Multiple&quot;, &quot;Value&quot; and &quot;Values&quot;. Multiple is a boolean that indicates whether the elements supports only single selections (false) or zero, one or more selections (true). If rendering an element with pre-selected items then the &quot;Value&quot; or &quot;Values&quot; properties must be used. &quot;Value&quot; is a string while &quot;Values&quot; is a string array. If &quot;Multiple&quot; is false and &quot;Values&quot; is set then React will display a warning at runtime and ignore the value, similarly if &quot;Multiple&quot; is true and &quot;Value&quot; is set.&lt;/p&gt;

&lt;p&gt;I wanted an analyser that handled these simple cases -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// This is fine
return DOM.Select(new SelectAttributes { Multiple = false, Value = &quot;x&quot; };

// This is fine
return DOM.Select(new SelectAttributes { Multiple = true, Values = new [] { &quot;x&quot;, &quot;y&quot; } };

// Wrong (shouldn&#39;t use &quot;Value&quot; when &quot;Multiple&quot; is true)
return DOM.Select(new SelectAttributes { Multiple = true, Value = &quot;x&quot; };

// Wrong (shouldn&#39;t use &quot;Values&quot; when &quot;Multiple&quot; is false)
return DOM.Select(new SelectAttributes { Multiple = false, Values = new [] { &quot;x&quot;, &quot;y&quot; } };

// Wrong (shouldn&#39;t use &quot;Values&quot; when &quot;Multiple&quot; defaults to false)
return DOM.Select(new SelectAttributes { Values = new [] { &quot;x&quot;, &quot;y&quot; } };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&#39;s worth mentioning that I&#39;m &lt;em&gt;only&lt;/em&gt; considering these simple cases so this analyser won&#39;t be &quot;perfect&quot;. If &quot;Multiple&quot; is set according to a variable then I&#39;m not going to try to follow all possible code paths to ensure that it is never true/false if Values/Value is set. I&#39;m also not going to cater for the technically-valid case where someone instantiates a &lt;strong&gt;SelectAttributes&lt;/strong&gt; and sets &quot;Values&quot; on it initially (but leaves &quot;Multiple&quot; as false) and then sets &quot;Multiple&quot; to true on a later line of code. While this would be valid (there would be no runtime warning), I think that it would be clearer to set &quot;Multiple&quot; &lt;em&gt;and&lt;/em&gt; &quot;Values&quot; together. In this case, I&#39;m imposing what I believe to be a best practice on the consumer of my library - some analysers do this, some don&#39;t.&lt;/p&gt;

&lt;p&gt;To keep things as simple as possible for now, instead of trying to pull in the real Bridge.React library, we&#39;ll just create another class library project in the solution to work against - call it &quot;Bridge.React&quot; and rename the &quot;Class1.cs&quot; file that is automatically created as part of a class library project to &quot;SelectAttributes.cs&quot;. Change its contents to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace Bridge.React
{
    public sealed class SelectAttributes
    {
        public bool Multiple { private get; set; }
        public string Value { private get; set; }
        public string[] Values { private get; set; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will be enough to start writing the analyser.&lt;/p&gt;

&lt;p&gt;What I want to do is to take the example analyser from the &quot;Analyzer with Code Fix (NuGet + VSIX)&quot; and change it to ensure that &lt;strong&gt;SelectAttributes&lt;/strong&gt; properties are always configured according to the rule outlined above. Before getting started on that, though, it seems like a good time to formalise the rules by decribing them with unit tests. We get many bonuses here - writing individual tests may help guide us through fixing them up one at a time and so help us focus on individual problems that the analyser has to solve. It will also provide us with a way to exercise the analyser and step through it with the debugger (which I find invaluable when I&#39;m not very familiar with a library or object model - when I &lt;em&gt;do&lt;/em&gt; have a good grasp on code then stepping through a debugger can feel very time-consuming but it can be helpful in cases like this, as I&#39;ll demonstrate shortly). Finally, the tests will help avoid regressions creeping in if I decide to refactor the analyser or extend its functionality in the future.&lt;/p&gt;

&lt;p&gt;So, replace the contents of &quot;UnitTest.cs&quot; with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using TestHelper;

namespace ExampleAnalyser.Test
{
    [TestClass]
    public class UnitTest : DiagnosticVerifier
    {
        [TestMethod]
        public void DoNotUseValueWhenMultipleIsTrue()
        {
            var testContent = @&quot;
                using Bridge.React;

                namespace TestCase
                {
                    public class Example
                    {
                        public void Go()
                        {
                            new SelectAttributes { Multiple = true, Value = &quot;&quot;1&quot;&quot; };
                        }
                    }
                }&quot;;

            var expected = new DiagnosticResult
            {
                Id = ExampleAnalyserAnalyzer.DiagnosticId,
                Message = &quot;If &#39;Multiple&#39; is true then the &#39;Values&#39; property should be used instead of &#39;Value&#39;&quot;,
                Severity = DiagnosticSeverity.Warning,
                Locations = new[]
                {
                    new DiagnosticResultLocation(&quot;Test0.cs&quot;, 10, 29)
                }
            };

            VerifyCSharpDiagnostic(testContent, expected);
        }

        [TestMethod]
        public void DoNotUseValuesWhenMultipleIsFalse()
        {
            var testContent = @&quot;
                using Bridge.React;

                namespace TestCase
                {
                    public class Example
                    {
                        public void Go()
                        {
                            new SelectAttributes { Multiple = false, Values = new[] { &quot;&quot;1&quot;&quot; } };
                        }
                    }
                }&quot;;

            var expected = new DiagnosticResult
            {
                Id = ExampleAnalyserAnalyzer.DiagnosticId,
                Message = &quot;If &#39;Multiple&#39; is false then the &#39;Value&#39; property should be used instead of &#39;Values&#39;&quot;,
                Severity = DiagnosticSeverity.Warning,
                Locations = new[]
                {
                    new DiagnosticResultLocation(&quot;Test0.cs&quot;, 10, 29)
                }
            };

            VerifyCSharpDiagnostic(testContent, expected);
        }

        [TestMethod]
        public void DoNotUseValueWhenMultipleDefaultsToFalse()
        {
            var testContent = @&quot;
                using Bridge.React;

                namespace TestCase
                {
                    public class Example
                    {
                        public void Go()
                        {
                            var x = new SelectAttributes { Values = new[] { &quot;&quot;1&quot;&quot; } };
                            x.Multiple = True;
                        }
                    }
                }&quot;;

            var expected = new DiagnosticResult
            {
                Id = ExampleAnalyserAnalyzer.DiagnosticId,
                Message = &quot;If &#39;Multiple&#39; is false then the &#39;Value&#39; property should be used instead of &#39;Values&#39;&quot;,
                Severity = DiagnosticSeverity.Warning,
                Locations = new[]
                {
                    new DiagnosticResultLocation(&quot;Test0.cs&quot;, 10, 37)
                }
            };

            VerifyCSharpDiagnostic(testContent, expected);
        }

        protected override DiagnosticAnalyzer GetCSharpDiagnosticAnalyzer()
        {
            return new ExampleAnalyserAnalyzer();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now there&#39;s one more important thing to do before actually writing the analyser. When those unit tests run, the &quot;.NET Compiler Platform&quot; (referred to as &quot;Roslyn&quot;) will parse and compile those code snippets in memory. This means that the code snippets need to actually be able to compile! Currently they won&#39;t because Roslyn won&#39;t know how to resolve the &quot;Bridge.React&quot; namespace that is referenced.&lt;/p&gt;

&lt;p&gt;This is quite easily fixed - the &lt;strong&gt;DiagnosticVerifier&lt;/strong&gt; class (which is part of the template that we started with) configures some environment options. That&#39;s why each test checks a file called &quot;Test0.cs&quot; - because Roslyn wants a filename to work with and that&#39;s what the &lt;strong&gt;DiagnosticVerifier&lt;/strong&gt; tells it to use. It also specifies what assemblies to include when building the project. So, if the code snippets referenced &quot;System&quot; or &quot;Sytem.Collections.Generic&quot; then those references will work fine. However, it doesn&#39;t initially know about the &quot;Bridge.React&quot; project, so we need to tell it to support it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a reference to the &quot;Bridge.React&quot; project to the &quot;ExampleAnalayser.Test&quot; project&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Edit the file &quot;Helpers/DiagnosticVerifier.Helper.cs&quot; in the &quot;ExampleAnalayser.Test&quot; project and add the following near the top, where other &lt;strong&gt;MetadataReference&lt;/strong&gt; instances are created:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static readonly MetadataReference CSharpBridgeReactReference
    = MetadataReference.CreateFromFile(typeof(Bridge.React.SelectAttributes).Assembly.Location);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open all of the code regions in that file and add pass &quot;CSharpBridgeReactReference&quot; into the solution by adding an additional &quot;AddMetadataReference&quot; call. The &quot;CreateProject&quot; method should now look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static Project CreateProject(string[] sources, string language = LanguageNames.CSharp)
{
    string fileNamePrefix = DefaultFilePathPrefix;
    string fileExt = language == LanguageNames.CSharp
        ? CSharpDefaultFileExt
        : VisualBasicDefaultExt;
    var projectId = ProjectId.CreateNewId(debugName: TestProjectName);
    var solution = new AdhocWorkspace()
    .CurrentSolution
        .AddProject(projectId, TestProjectName, TestProjectName, language)
        .AddMetadataReference(projectId, CorlibReference)
        .AddMetadataReference(projectId, SystemCoreReference)
        .AddMetadataReference(projectId, CSharpSymbolsReference)
        .AddMetadataReference(projectId, CodeAnalysisReference)
        .AddMetadataReference(projectId, CSharpBridgeReactReference);
    int count = 0;
    foreach (var source in sources)
    {
        var newFileName = fileNamePrefix + count + &quot;.&quot; + fileExt;
        var documentId = DocumentId.CreateNewId(projectId, debugName: newFileName);
        solution = solution.AddDocument(documentId, newFileName, SourceText.From(source));
        count++;
    }
    return solution.GetProject(projectId);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;&lt;em&gt;Really&lt;/em&gt; writing the analyser&lt;/h3&gt;

&lt;p&gt;Now that the groundwork is done and we&#39;ve decided what precisely needs doing (and documented it with tests), we need to write the actual code.&lt;/p&gt;

&lt;p&gt;Although I can use the debugger to inspect the syntax tree for the code snippets in the unit tests, at this point I think even that would be information overload. To begin with, just add the following line to one of the unit test methods - it doesn&#39;t matter which one because it will be deleted very shortly, it&#39;s just to have a bit of a poke around with the Syntax Visualizer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = new Bridge.React.SelectAttributes { Multiple = true, Value = &quot;x&quot; };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ensuring that the Syntax Visualizer is visible (View / Other Windows / Syntax Visualizer), clicking on &quot;Multiple&quot; shows the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.productiverage.com/Content/Images/Posts/ObjectInitializerExpression.png&quot; alt=&quot;ObjectInitializerExpression&quot;&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;IdentifierToken&lt;/strong&gt; is the &quot;Multiple&quot; property, which is part of a &lt;strong&gt;SimpleAssignment&lt;/strong&gt; (ie. &quot;Multiple = 1&quot;) which is a child of an &lt;strong&gt;ObjectInitializerExpression&lt;/strong&gt; (which is the curly brackets around the two properties being set) which is a child of an &lt;strong&gt;ObjectCreationExpression&lt;/strong&gt; (which is the entire statement that includes &quot;new Bridge.React.SelectAttributes&quot; &lt;em&gt;and&lt;/em&gt; the setting of the two properties) and that itself is part of a &lt;strong&gt;VariableDeclaration&lt;/strong&gt; (which sets &quot;x&quot; to be the result of the object creation). With the Syntax Visualizer, we could go all the way up to the top of the method and then to the class and then to the namespace and then to the top-level CompilationUnit. However, what we&#39;re most interested in is the &lt;strong&gt;ObjectInitializerExpression&lt;/strong&gt;, since that contains the properties that we want to verify.&lt;/p&gt;

&lt;p&gt;So, how do we alter the analyser class that we currently have in order to identify object initialisers such as this?&lt;/p&gt;

&lt;p&gt;Currently the example analyser class has an &quot;Initialize&quot; method that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public override void Initialize(AnalysisContext context)
{
    context.RegisterSymbolAction(AnalyzeSymbol, SymbolKind.NamedType);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing to try would be to see what other options are in the &quot;SymbolKind&quot; enum. However, this contains things like &quot;Alias&quot;, &quot;Event&quot;, &quot;Method&quot;, &quot;NamedType&quot;, &quot;Property&quot; which don&#39;t bear much resemblance to &lt;strong&gt;ObjectInitializerExpression&lt;/strong&gt;. Without any better plan, I recommend turning to Google. If &quot;SymbolKind&quot; doesn&#39;t seem to have what we want, maybe there&#39;s something else that we can extract from the &lt;strong&gt;AnalysisContext&lt;/strong&gt; instance that the &quot;Initialize&quot; method has.&lt;/p&gt;

&lt;p&gt;Googling for &lt;a href=&quot;https://www.google.co.uk/search?q=AnalysisContext+ObjectInitializerExpression&quot;&gt;&quot;AnalysisContext ObjectInitializerExpression&quot;&lt;/a&gt; doesn&#39;t actually return that many results. However, the second one &lt;a href=&quot;https://github.com/mjsabby/RoslynClrHeapAllocationAnalyzer/blob/master/ClrHeapAllocationsAnalyzer/ExplicitAllocationAnalyzer.cs&quot;&gt;RoslynClrHeapAllocationAnalyzer/ExplicitAllocationAnalyzer.cs&lt;/a&gt; has some code that looks promising:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public override void Initialize(AnalysisContext context)
{
    var kinds = new[]
    {
        SyntaxKind.ObjectCreationExpression,
        SyntaxKind.AnonymousObjectCreationExpression,
        SyntaxKind.ArrayInitializerExpression,
        SyntaxKind.CollectionInitializerExpression,
        SyntaxKind.ComplexElementInitializerExpression,
        SyntaxKind.ObjectInitializerExpression,
        SyntaxKind.ArrayCreationExpression,
        SyntaxKind.ImplicitArrayCreationExpression,
        SyntaxKind.LetClause
    };
    context.RegisterSyntaxNodeAction(AnalyzeNode, kinds);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of calling &quot;RegisterSymbolAction&quot; and passing a &quot;SymbolKind&quot; value, we can call &quot;RegisterSyntaxNodeAction&quot; and pass it an array of &quot;SyntaxKind&quot; values - where &quot;SyntaxKind&quot; is an enum that has an &quot;ObjectInitializerExpression&quot; value.&lt;/p&gt;

&lt;p&gt;Actually, by starting to change the &quot;Initialize&quot; method to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public override void Initialize(AnalysisContext context)
{
    context.RegisterSyntaxNodeAction(AnalyzeSymbol,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. it becomes clear that the method actually takes a params array and so it will be perfectly happy for us to specify only a single &quot;SyntaxKind&quot; value. &quot;Initialize&quot; now becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public override void Initialize(AnalysisContext context)
{
    context.RegisterSyntaxNodeAction(
        AnalyzeSymbol,
        SyntaxKind.ObjectInitializerExpression
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But the analyser project doesn&#39;t compile now - it complains about the type of one of the arguments of the call to &quot;SymbolAnalysisContext&quot;. It definitely takes a &quot;SyntaxKind&quot; enum as its second argument so it must be the first that is wrong. Intellisense indicates that it wants the first argument to be of type &lt;strong&gt;Action&amp;lt;SymbolAnalysisContext&amp;gt;&lt;/strong&gt; but the &quot;AnalyzeSymbol&quot; method currently takes a &lt;strong&gt;SyntaxNodeAnalysisContext&lt;/strong&gt; (and so is an &lt;strong&gt;Action&amp;lt;SymbolAnalysisContext&amp;gt;&lt;/strong&gt;, rather than an &lt;strong&gt;Action&amp;lt;SyntaxNodeAnalysisContext&amp;gt;&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;This is easily fixed by changing the argument of the &quot;AnalyzeSymbol&quot; method. Doing so, however, will mean that &lt;em&gt;it&lt;/em&gt; causes a compile error because the example code was expecting a &lt;strong&gt;SymbolAnalysisContext&lt;/strong&gt; and we want to give it a &lt;strong&gt;SyntaxNodeAnalysisContext&lt;/strong&gt;. No matter, that code doesn&#39;t do what we want anyway! So change the method argument, delete its body and - while we&#39;re making changes - rename it to something better than &quot;AnalyzeSymbol&quot;, such as &quot;LookForInvalidSelectAttributeProperties&quot; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public override void Initialize(AnalysisContext context)
{
    context.RegisterSyntaxNodeAction(
        LookForInvalidSelectAttributeProperties,
        SyntaxKind.ObjectInitializerExpression
    );
}

private static void LookForInvalidSelectAttributeProperties(SyntaxNodeAnalysisContext context)
{
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the basic structure is there, we can start work on the new &quot;LookForInvalidSelectAttributeProperties&quot; implementation. The &quot;context&quot; reference that is passed in has a &quot;Node&quot; property and this will match the SyntaxKind value that we passed to &quot;RegisterSyntaxNodeAction&quot;. So &quot;context.Node&quot; will be a reference to a node that represents an &quot;object initialisation&quot;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sanity check: The &lt;strong&gt;SyntaxNode&lt;/strong&gt; class (which is the base node class) has a &quot;Kind()&quot; method that will return the &quot;SyntaxKind&quot; enum value that applies to the current node - so calling &quot;Kind()&quot; on &quot;context.Node&quot; here will return the &quot;ObjectInitializerExpression&quot; option from the &quot;SyntaxKind&quot; enum.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a reference to an object initialisation node, we can go one of two ways. We want to ensure that the type being initialised is the &lt;strong&gt;SelectAttributes&lt;/strong&gt; class from the &quot;Bridge.React&quot; assembly and we want to check whether any invalid property combinations are being specified. The first task will involve getting the type name and then doing a lookup in the rest of the solution to work out where that type name comes from (to ensure that it is actually the &quot;Bridge.React&quot; &lt;strong&gt;SelectAttributes&lt;/strong&gt; class and not another class that exists somewhere with the same name). The second task only requires us to look at what properties are set by code in the syntax tree that we already have. This means that the first task is more expensive to perform than the second task and so we should try to deal with &quot;step two&quot; first since we will be able to avoid &quot;step one&quot; altogether if no invalid property combinations appear.&lt;/p&gt;

&lt;p&gt;So, to look for invalid property combinations first.. The Syntax Visualizer (as seen in the last image) shows that each individual property-setting is represented by a &quot;SimpleAssignmentExpression&quot; and that each of these is a direct child of the object initialisation. The &lt;strong&gt;SyntaxNode&lt;/strong&gt; class has a ChildNodes() method that will return all of the children, which seems like a good place to start. So, we might be able to do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// This doesn&#39;t work,SimpleAssignmentExpressionSyntax isn&#39;t a real class :(
var propertyInitialisers = context.Node.ChildNodes()
    .OfType&amp;lt;SimpleAssignmentExpressionSyntax&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. however, &quot;SimpleAssignmentExpressionSyntax&quot; is not a real type. I tried starting to type  out &quot;Simple&quot; to see if intellisense would pick up what the correct name was - but that didn&#39;t get me anywhere.&lt;/p&gt;

&lt;p&gt;Next, I resorted to deleting those last few lines (since they don&#39;t compile) and to just putting a breakpoint at the top of &quot;LookForInvalidSelectAttributeProperties&quot;. I then used Debug Tests on &quot;DoNotUseValueWhenMultipleIsTrue&quot;. The breakpoint is hit.. but I can&#39;t see the child nodes with QuickWatch because &quot;ChildNodes()&quot; is a method, not a property, and QuickWatch only shows you property values (it doesn&#39;t offter to execute methods and show you what is returned). So I go to the Immediate Window (Debug / Windows / Immediate), type the following and hit [Enter] -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;context.Node.ChildNodes().First().GetType().Name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This displays &quot;AssignmentExpressionSyntax&quot;.&lt;/p&gt;

&lt;p&gt;This clue is enough to stop the debugger and go back to trying to populate the &quot;LookForInvalidSelectAttributeProperties&quot;. It may now start with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var propertyInitialisers = context.Node.ChildNodes()
    .OfType&amp;lt;AssignmentExpressionSyntax&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using Go To Definition on &lt;strong&gt;AssignmentExpressionSyntax&lt;/strong&gt; shows that it has a &quot;Left&quot; and a &quot;Right&quot; property. These are the expressions that come either side of the operator, which is always an Equals sign when considering object property initialisations.&lt;/p&gt;

&lt;p&gt;The Syntax Visualizer shows that each &quot;SimpleAssignmentExpression&quot; has an &quot;IdentifierName&quot; on the left, so we should be able to get the property name from that.&lt;/p&gt;

&lt;p&gt;To try to work out what type &quot;IdentifierName&quot; relates to, I start typing &quot;Identifier&quot; and intellisense suggests &lt;strong&gt;IdentifierNameSyntax&lt;/strong&gt; (if it hadn&#39;t suggested anything helpful then I would have resorted to using Debug Tests again and inspecting types in the debugger). Having a poke around the &lt;strong&gt;IdentifierNameSyntax&lt;/strong&gt; class, I see that it has a property &quot;Identifier&quot; and that has a string property &quot;ValueText&quot;. This looks like the name of the property being set. Things are coming together. The start of the &quot;LookForInvalidSelectAttributeProperties&quot; can now look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var propertyInitialisers = context.Node.ChildNodes()
    .OfType&amp;lt;AssignmentExpressionSyntax&amp;gt;()
    .Select(propertyInitialiser =&amp;gt; new
    {
        PropertyName = ((IdentifierNameSyntax)propertyInitialiser.Left).Identifier.ValueText,
        ValueExpression = propertyInitialiser.Right
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&#39;s worth noting that we don&#39;t have to worry about the &quot;Left&quot; property ever being anything other than a simple identifier because assignments in object initialisers are only ever allow to be simple assignments. For example, the following would not compile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = new MyClass { Name.Value = &quot;Ted };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. because attempting to set nested properties in object initialisers does not compile in C#. Because it&#39;s not valid C#, we don&#39;t have to worry about it being passed through the analyser.&lt;/p&gt;

&lt;p&gt;Maybe it&#39;s worth adding another unit test around this - to ensure that invalid C# can&#39;t result in a load of edge cases that we need to be concerned about:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[TestMethod]
public void IgnoreInvalidPropertySetting()
{
    var testContent = @&quot;
        using Bridge.React;

        namespace TestCase
        {
            public class Example
            {
                public void Go()
                {
                    new SelectAttributes { Nested.Multiple = true };
                }
            }
        }&quot;;

    VerifyCSharpDiagnostic(testContent);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: Calling the &quot;VerifyCSharpDiagnostic&quot; with no &quot;expected&quot; value means that the test expects that the analyser will not report any violated rules.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now we can really move things along. We&#39;re interested in property initialisers where &quot;Multiple&quot; is clearly true or false (meaning it is set specifically to true or false &lt;em&gt;or&lt;/em&gt; it&#39;s not specified at all, leaving it with its default value of false). So, again using the Syntax Visualizer to work out how to tell whether an expression means a &quot;true&quot; constant or a &quot;false&quot; constant, I&#39;ve come up with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var propertyInitialisers = context.Node.ChildNodes()
    .OfType&amp;lt;AssignmentExpressionSyntax&amp;gt;()
    .Select(propertyInitialiser =&amp;gt; new
    {
        PropertyName = ((IdentifierNameSyntax)propertyInitialiser.Left).Identifier.ValueText,
        ValueExpression = propertyInitialiser.Right
    });

var multiplePropertyInitialiser = propertyInitialisers.FirstOrDefault(
    propertyInitialiser =&amp;gt; propertyInitialiser.PropertyName == &quot;Multiple&quot;
);
bool multiplePropertyValue;
if (multiplePropertyInitialiser == null)
    multiplePropertyValue = false; // Defaults to false if not explicitlt set
else
{
    var multiplePropertyValueKind = multiplePropertyInitialiser.ValueExpression.Kind();
    if (multiplePropertyValueKind == SyntaxKind.TrueLiteralExpression)
        multiplePropertyValue = true;
    else if (multiplePropertyValueKind == SyntaxKind.FalseLiteralExpression)
        multiplePropertyValue = false;  
    else
    {
        // Only looking for very simple cases - where explicitly set to true or to false or not set at
        // all (defaulting to false). If it&#39;s set according to a method return value or a variable then
        // give up (this is just intended to catch obvious mistakes, not to perform deep and complex
        // analysis)
        return;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next thing to do is to look for a &quot;Value&quot; or &quot;Values&quot; property being specified that is not appropriate for the &quot;Multiple&quot; value that we&#39;ve found.&lt;/p&gt;

&lt;p&gt;From the above code, it should be fairly clear that the way to do this is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var valuePropertyIsSpecified = propertyInitialisers.Any(
    propertyInitialiser =&amp;gt; propertyInitialiser.PropertyName == &quot;Value&quot;
);
var valuesPropertyIsSpecified = propertyInitialisers.Any(
    propertyInitialiser =&amp;gt; propertyInitialiser.PropertyName == &quot;Values&quot;
);
if (!valuePropertyIsSpecified &amp;amp;&amp;amp; !valuesPropertyIsSpecified)
    return;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final step is to ensure that the object initialisation that we&#39;re looking at is indeed for a &lt;strong&gt;SelectAttributes&lt;/strong&gt; instance. This is the bit that requires a lookup into the &quot;SemanticModel&quot; and which is more expensive than just looking at the current syntax tree because it needs the project to compile and to then work out what references to external code there may be.&lt;/p&gt;

&lt;p&gt;Knowing that I&#39;m going to be dealing with the full semantic model, I&#39;ll start by looking through the methods available on &quot;context.SemanticModel&quot; to see what might help me. Using the intellisense / documentation, it doesn&#39;t take long to find a &quot;GetTypeInfo&quot; method that takes an &lt;strong&gt;ObjectCreationExpression&lt;/strong&gt; instance - this is ideal because we have an &lt;strong&gt;ObjectInitializerExpressionSyntax&lt;/strong&gt; and we know that an &lt;strong&gt;ObjectInitializerExpressionSyntax&lt;/strong&gt; is a child of an &lt;strong&gt;ObjectCreationExpressionSyntax&lt;/strong&gt;, so it&#39;s easy for us to get an &lt;strong&gt;ObjectCreationExpression&lt;/strong&gt; (it&#39;s just the parent of &lt;strong&gt;ObjectInitializerExpressionSyntax&lt;/strong&gt; that we have).&lt;/p&gt;

&lt;p&gt;&quot;GetTypeInfo&quot; returns a &lt;strong&gt;TypeInfo&lt;/strong&gt; instance which has two properties; &quot;Type&quot; and &quot;ConvertedType&quot;. &quot;ConvertedType&quot; is (taken from the xml summary documentation):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The type of the expression after it has undergone an implicit conversion&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;which shouldn&#39;t apply here, so we&#39;ll just look at &quot;Type&quot;. Note, though, that the documentation for &quot;Type&quot; says that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For expressions that do not have a type, null is returned. If the type could not be determined due to an error, than an IErrorTypeSymbol is returned.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since this is an object creation expression, there should &lt;em&gt;always&lt;/em&gt; be a type returned (the type of the object being instantiated) but we do need to be careful about the error response. Here, it&#39;s fine to stop processing if there&#39;s an error - it might mean that there is a &quot;new SelectAttributes&quot; statements in the code being analysed but no &quot;Using Bridge.React;&quot; at the top of the file. We&#39;ll ignore these error cases and plan to only analyse valid code.&lt;/p&gt;

&lt;p&gt;This is the code that needs adding to ensure that the properties that we&#39;re looking at are for a Bridge.React.SelectAttributes -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var objectCreation = (ObjectCreationExpressionSyntax)context.Node.Parent;
var objectCreationTypeInfo = context.SemanticModel.GetTypeInfo(objectCreation);
if ((objectCreationTypeInfo.Type is IErrorTypeSymbol)
|| (objectCreationTypeInfo.Type.ContainingAssembly.Identity.Name != &quot;Bridge.React&quot;)
|| (objectCreationTypeInfo.Type.Name != &quot;SelectAttributes&quot;))
    return;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having written this code, it strikes me as a good idea to add another test - one that ensures that we don&#39;t raise false positives about &quot;Multiple&quot; and &quot;Value&quot; / &quot;Values&quot; in cases where it&#39;s a different &lt;strong&gt;SelectAttributes&lt;/strong&gt; class, that is declared somewhere other than in &quot;Bridge.React&quot;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// Don&#39;t analyse a SelectAttributes initialisation that is for a different SelectAttributes class
/// (only target the SelectAttributes class that is part of the Bridge.React library)
/// &amp;lt;/summary&amp;gt;
[TestMethod]
public void OnlyTargetBridgeReactSelectAttributes()
{
    var testContent = @&quot;
        namespace TestCase
        {
            public class Example
            {
                public void Go()
                {
                    new SelectAttributes { Multiple = true, Value = &quot;&quot;x&quot;&quot; };
                }
            }

            public class SelectAttributes
            {
                public bool Multiple { get; set; }
                public string Value { get; set; }
            }
        }&quot;;

    VerifyCSharpDiagnostic(testContent);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have all of the required information to display a warning for invalid &quot;Multiple&quot; / &quot;Value&quot; / &quot;Values&quot; combinations. What we &lt;em&gt;don&#39;t&lt;/em&gt; have is appropriate message content to display - we&#39;ve only got the warning content from the example analyser in the project template.&lt;/p&gt;

&lt;p&gt;So delete all of the code at the top of the analyser - the const and static strings, the &quot;Rule&quot; reference and the &quot;SupportedDiagnostics&quot; property and replace them with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public const string DiagnosticId = &quot;Bridge.React&quot;;
private static readonly LocalizableString Title
    = &quot;Be careful to use the appropriate &#39;Value&#39; or &#39;Values&#39; property for the &#39;Multiple&#39; setting&quot;;
private static readonly LocalizableString MultipleWithValueMessage
    = &quot;If &#39;Multiple&#39; is true then the &#39;Values&#39; property should be used instead of &#39;Value&#39;&quot;;
private static readonly LocalizableString NoMultipleWithValuesMessage
    = &quot;If &#39;Multiple&#39; is false then the &#39;Value&#39; property should be used instead of &#39;Values&#39;&quot;;
private const string Category = &quot;Configuration&quot;;

private static DiagnosticDescriptor MultipleWithValueRule = new DiagnosticDescriptor(
    DiagnosticId,
    Title,
    MultipleWithValueMessage,
    Category,
    DiagnosticSeverity.Warning,
    isEnabledByDefault: true
);
private static DiagnosticDescriptor NoMultipleWithValuesRule = new DiagnosticDescriptor(
    DiagnosticId,
    Title,
    NoMultipleWithValuesMessage,
    Category,
    DiagnosticSeverity.Warning,
    isEnabledByDefault: true
);

public override ImmutableArray&amp;lt;DiagnosticDescriptor&amp;gt; SupportedDiagnostics
{
    get { return ImmutableArray.Create(MultipleWithValueRule, NoMultipleWithValuesRule); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final step, then, is to report rules when they are broken. The following needs adding to the end of the &quot;LookForInvalidSelectAttributeProperties&quot; method in order to complete it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ((multiplePropertyValue == true) &amp;amp;&amp;amp; valuePropertyIsSpecified)
{
    context.ReportDiagnostic(Diagnostic.Create(
        MultipleWithValueRule,
        context.Node.GetLocation()
    ));
}
else if ((multiplePropertyValue == false) &amp;amp;&amp;amp; valuesPropertyIsSpecified)
{
    context.ReportDiagnostic(Diagnostic.Create(
        NoMultipleWithValuesRule,
        context.Node.GetLocation()
    ));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Localisation support&lt;/h3&gt;

&lt;p&gt;There&#39;s just one final thing to do now, which is more of a good practice than an essential - that is to replace the hard-coded strings in the analyser class with resources (that may potentially be translated into different languages one day). The project template includes a &quot;Resources.resx&quot; file, which is where we should move these strings to. Edit that file in Visual Studio and delete the existing entries and then add the following Name and Value pairs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; SelectAttributesAnalyserTitle&lt;/p&gt;
  
  &lt;p&gt;&lt;strong&gt;Value:&lt;/strong&gt; Be careful to use the appropriate &#39;Value&#39; or &#39;Values&#39; property for the &#39;Multiple&#39; setting&lt;/p&gt;
  
  &lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; SelectAttributesAnalyserMultipleWithValueMessage&lt;/p&gt;
  
  &lt;p&gt;&lt;strong&gt;Value:&lt;/strong&gt; If &#39;Multiple&#39; is true then the &#39;Values&#39; property should be used instead of &#39;Value&#39;&lt;/p&gt;
  
  &lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; SelectAttributesAnalyserNoMultipleWithValuesTitle&lt;/p&gt;
  
  &lt;p&gt;&lt;strong&gt;Value:&lt;/strong&gt; If &#39;Multiple&#39; is false then the &#39;Value&#39; property should be used instead of &#39;Values&#39;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To make accessing these resources a little easier, add the following method to the bottom of the analyser class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static LocalizableString GetLocalizableString(string nameOfLocalizableResource)
{
    return new LocalizableResourceString(
        nameOfLocalizableResource,
        Resources.ResourceManager,
        typeof(Resources)
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, replace the three hard-coded string property initialisers with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    private static readonly LocalizableString Title = GetLocalizableString(
        nameof(Resources.SelectAttributesAnalyserTitle)
    );
    private static readonly LocalizableString MultipleWithValueTitle = GetLocalizableString(
        nameof(Resources.SelectAttributesAnalyserMultipleWithValueMessage)
    );
    private static readonly LocalizableString NoMultipleWithValuesTitle = GetLocalizableString(
        nameof(Resources.SelectAttributesAnalyserNoMultipleWithValuesTitle)
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;That completes the analyser. I&#39;ve included the complete source code for the final implementation below - now that it&#39;s written it doesn&#39;t look like much, which hopefully illustrates how powerful and complete the Roslyn library is. And, hopefully, it&#39;s shown that this powerful library doesn&#39;t need to be daunting because there&#39;s many resources out there for helping you understand how to use it; people have written a lot about it and so Googling for terms relating to what you want to do often yields helpful results, people have answered a lot of questions about it on Stack Overflow and so you will often find example and sample code there.&lt;/p&gt;

&lt;p&gt;If you&#39;re not sure what terms to use to try to search for help then using the Syntax Visualizer to explore your code can set you on the right path, as can writing a test or two and then examining the &quot;context.Node&quot; reference in the debugger (if you do this then ensure that you are building your project in Debug mode since Release builds may prevent your breakpoints from being hit and may optimise some of the variable references away, which will mean that you won&#39;t be able to use QuickWatch on them). Finally, don&#39;t forget that there is a lot of helpful information in the xml summary documentation that&#39;s available in Visual Studio when you examine the Roslyn classes and their methods - often the names of methods are descriptive enough to help you choose the appropriate one or, at least, give you a clue as to what direction to go in.&lt;/p&gt;

&lt;p&gt;This has really only scraped the surface of what analysers are capable of, it&#39;s a technology with huge capability and potential. I might talk about other uses for analysers (or talk about how particular analysers may be implemented) another day but two topics that I definitely &lt;em&gt;will&lt;/em&gt; talk about soon are &quot;code fixes&quot; and how to get analysers to work with &lt;a href=&quot;http://bridge.net/&quot;&gt;Bridge.NET&lt;/a&gt; libraries.&lt;/p&gt;

&lt;p&gt;Code fixes are interesting because they allow you to go beyond just saying &quot;this is wrong&quot; to saying &quot;this is how it may be fixed (automatically, by the IDE)&quot;. For example, if someone changed a &lt;strong&gt;SelectAttributes&lt;/strong&gt; instantiation to enable multiple selections - eg. started with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DOM.Select(
    new SelectAttributes { Value = selectedId },
    options
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. and changed it to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DOM.Select(
    new SelectAttributes { Multiple = true, Value = selectedId },
    options
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. then the analyser could point out that the &quot;Value&quot; property should not be used now that &quot;Multiple&quot; is true but it could also offer to fix it up to the following &lt;em&gt;automatically&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DOM.Select(
    new SelectAttributes { Multiple = true, Values = new[] { selectedId } },
    options
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There will be times that the warning from an analyser will require manual intervention to correct but there will also be times where the computer could easily correct it, so it&#39;s great having the ability to explain to the computer &lt;em&gt;how&lt;/em&gt; to do so and thus make life that bit easier for the person consuming your library.&lt;/p&gt;

&lt;p&gt;The reason that I also want to spend a little bit of time talking about making analysers work with Bridge.NET libraries soon is that it&#39;s something of a special case since Bridge projects don&#39;t have references to the standard .net System, System.Collections, etc.. assemblies because they are replaced by special versions of those libraries that have JavaScript translations. This means that you can&#39;t reference a Bridge library from a project that relies on the standard .net assemblies, which is a bit of a problem when you want to write a Roslyn analyser for types in a Bridge library (since the analyser project will rely on standard .net assemblies and the analyser will want to reference the Bridge library whose rules are to be applied by the analyser). But there are ways to get around it and I&#39;ll go through that another time.&lt;/p&gt;

&lt;h3&gt;The complete analyser&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;using System.Collections.Immutable;
using System.Linq;
using System.Reflection;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Diagnostics;

namespace ExampleAnalyser
{
    [DiagnosticAnalyzer(LanguageNames.CSharp)]
    public sealed class ExampleAnalyserAnalyzer : DiagnosticAnalyzer
    {
        public const string DiagnosticId = &quot;Bridge.React&quot;;
        private static readonly LocalizableString Title = GetLocalizableString(
            nameof(Resources.SelectAttributesAnalyserTitle)
        );
        private static readonly LocalizableString MultipleWithValueTitle = GetLocalizableString(
            nameof(Resources.SelectAttributesAnalyserMultipleWithValueMessage)
        );
        private static readonly LocalizableString NoMultipleWithValuesTitle = GetLocalizableString(
            nameof(Resources.SelectAttributesAnalyserNoMultipleWithValuesTitle)
        );
        private const string Category = &quot;Configuration&quot;;

        private static DiagnosticDescriptor MultipleWithValueRule = new DiagnosticDescriptor(
            DiagnosticId,
            Title,
            MultipleWithValueTitle,
            Category,
            DiagnosticSeverity.Warning,
            isEnabledByDefault: true
        );
        private static DiagnosticDescriptor NoMultipleWithValuesRule = new DiagnosticDescriptor(
            DiagnosticId,
            Title,
            NoMultipleWithValuesTitle,
            Category,
            DiagnosticSeverity.Warning,
            isEnabledByDefault: true
        );

        public override ImmutableArray&amp;lt;DiagnosticDescriptor&amp;gt; SupportedDiagnostics
        {
            get { return ImmutableArray.Create(MultipleWithValueRule, NoMultipleWithValuesRule); }
        }

        public override void Initialize(AnalysisContext context)
        {
            context.RegisterSyntaxNodeAction(
                LookForInvalidSelectAttributeProperties,
                SyntaxKind.ObjectInitializerExpression
            );
        }

        private static void LookForInvalidSelectAttributeProperties(SyntaxNodeAnalysisContext context)
        {
            var propertyInitialisers = context.Node.ChildNodes()
                .OfType&amp;lt;AssignmentExpressionSyntax&amp;gt;()
                .Select(propertyInitialiser =&amp;gt; new
                {
                    PropertyName = ((IdentifierNameSyntax)propertyInitialiser.Left).Identifier.ValueText,
                    ValueExpression = propertyInitialiser.Right
                });

            var multiplePropertyInitialiser = propertyInitialisers.FirstOrDefault(
                propertyInitialiser =&amp;gt; propertyInitialiser.PropertyName == &quot;Multiple&quot;
            );
            bool multiplePropertyValue;
            if (multiplePropertyInitialiser == null)
                multiplePropertyValue = false; // Defaults to false if not explicitlt set
            else
            {
                var multiplePropertyValueKind = multiplePropertyInitialiser.ValueExpression.Kind();
                if (multiplePropertyValueKind == SyntaxKind.TrueLiteralExpression)
                    multiplePropertyValue = true;
                else if (multiplePropertyValueKind == SyntaxKind.FalseLiteralExpression)
                    multiplePropertyValue = false;
                else
                {
                    // Only looking for very simple cases - where explicitly set to true or to false or
                    // not set at all (defaulting to false). If it&#39;s set according to a method return
                    // value or a variable then give up (this is just intended to catch obvious
                    // mistakes, not to perform deep and complex analysis)
                    return;
                }
            }

            var valuePropertyIsSpecified = propertyInitialisers.Any(
                propertyInitialiser =&amp;gt; propertyInitialiser.PropertyName == &quot;Value&quot;
            );
            var valuesPropertyIsSpecified = propertyInitialisers.Any(
                propertyInitialiser =&amp;gt; propertyInitialiser.PropertyName == &quot;Values&quot;
            );
            if (!valuePropertyIsSpecified &amp;amp;&amp;amp; !valuesPropertyIsSpecified)
                return;

            var objectCreation = (ObjectCreationExpressionSyntax)context.Node.Parent;
            var objectCreationTypeInfo = context.SemanticModel.GetTypeInfo(objectCreation);
            if ((objectCreationTypeInfo.Type is IErrorTypeSymbol)
            || (objectCreationTypeInfo.Type.ContainingAssembly.Identity.Name != &quot;Bridge.React&quot;)
            || (objectCreationTypeInfo.Type.Name != &quot;SelectAttributes&quot;))
                return;

            if ((multiplePropertyValue == true) &amp;amp;&amp;amp; valuePropertyIsSpecified)
            {
                context.ReportDiagnostic(Diagnostic.Create(
                    MultipleWithValueRule,
                    context.Node.GetLocation()
                ));
            }
            else if ((multiplePropertyValue == false) &amp;amp;&amp;amp; valuesPropertyIsSpecified)
            {
                context.ReportDiagnostic(Diagnostic.Create(
                    NoMultipleWithValuesRule,
                    context.Node.GetLocation()
                ));
            }
        }

        private static LocalizableString GetLocalizableString(string nameOfLocalizableResource)
        {
            return new LocalizableResourceString(
                nameOfLocalizableResource,
                Resources.ResourceManager,
                typeof(Resources)
            );
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
			<pubDate>Tue, 28 Jun 2016 07:49:00 GMT</pubDate>
		</item>
		<item>
			<title>A static type system is a wonderful message to the present and future - Supplementary</title>
            <link>http://www.productiverage.com/a-static-type-system-is-a-wonderful-message-to-the-present-and-future-supplementary</link>
			<guid>http://www.productiverage.com/a-static-type-system-is-a-wonderful-message-to-the-present-and-future-supplementary</guid>
			<description>&lt;p&gt;This is an extension of my post &quot;&lt;a href=&quot;http://www.productiverage.com/a-static-type-system-is-a-wonderful-message-to-the-present-and-future&quot;&gt;A static type system is a wonderful message to the present and future&lt;/a&gt;. I initially rolled this all together into a single article but then decided to break it into two to make the first part easier to consume.&lt;/p&gt;

&lt;p&gt;So, what else did I want to say? Rather than just saying &quot;static typing is better&quot;, I want to express some more detailed &quot;for&quot; and &quot;against&quot; arguments. Spoiler alert: despite the negatives, I still believe that static typing is worth the effort.&lt;/p&gt;

&lt;h3&gt;FTW&lt;/h3&gt;

&lt;p&gt;I find that the more that I take advantage of the type system, the more reliable that my code becomes - not only in terms of how well it lasts over the years, but how likely that it is to work the first time that it compiles. Going back to some code that I wrote a few years ago, there are various parts of a particular project that deal with internationalisation - some parts want to know what language that particular content is in while some parts of more specific and want to know what language &lt;em&gt;culture&lt;/em&gt; it&#39;s in; the difference between &quot;English&quot; (the language) and &quot;English UK&quot; / &quot;en-GB&quot; (the language culture). I wish now that, for that project, I&#39;d created a type (in C#, a struct would have been the natural choice) to represent a &lt;strong&gt;LanguageKey&lt;/strong&gt; and another for a &lt;strong&gt;LanguageCultureKey&lt;/strong&gt; as I encountered several places where it was confusing which was required - some parts of the code had method arguments named &quot;language&quot; that wanted a language key while others had arguments named &quot;language&quot; that wanted a language culture key. The two parts of the project were written by different people at different times and, in both cases, it seemed natural to them to presume that &quot;language&quot; could mean a language key (since nothing more specific was required) or could mean a language culture (since they presumed that nothing &lt;em&gt;less&lt;/em&gt; specific would ever be required). This is an example of a place where better argument naming would have helped because it would have been easier to spot if a language culture key was being passed where a language key was required. However, it would have been better again if the compiler would spot the wrong key type being passed - a human might miss it if a naming convention is relied upon, but the compiler will never miss an invalid type.&lt;/p&gt;

&lt;p&gt;Another example that I&#39;ve used in the past is that of React &quot;props&quot; validation - when creating React components (which are used to render DOM elements.. or OS components, if you&#39;re using &lt;a href=&quot;http://www.reactnative.com&quot;&gt;React Native&lt;/a&gt;), you must provide specific information for the component; if it&#39;s a Label, for example, then you must provide a text string and maybe a class name string. If you&#39;re using JavaScript with React then you will probably be providing the props reference using simple object notation, so you will have to be careful that you remember that the text string is named &quot;text&quot; and not &quot;labelText&quot;. The React library includes support for a &quot;propTypes&quot; object to be defined for a component - this performs validation at runtime, ensuring that required properties have values and that they are of the correct type. If a &lt;a href=&quot;http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-from-first-principles&quot;&gt;strongly-typed language (such as C#)&lt;/a&gt; was used to create and consume React components, then this additional runtime validation would not be required as the component&#39;s &quot;props&quot; class would be declared as a class and all properties would have the appropriate types specified there. These would be validated at compile time, rather than having to wait until runtime. Returning to the &quot;&lt;a href=&quot;https://m.signalvnoise.com/provide-sharp-knives-cc0a22bf7934#.yv2771vf7&quot;&gt;Sharp Knives&lt;/a&gt;&quot; quote, this may be construed as being validation written for &quot;other programmers&quot; - as in, &quot;I don&#39;t want other programmers to try to use my component incorrectly&quot; - but, again, I&#39;m very happy to be the one of the &quot;other programmers&quot; in this case, it allows the type system to work as very-welcome documentation.&lt;/p&gt;

&lt;p&gt;While we&#39;re talking about React and component props, the React library always treats the props reference for a component as being immutable. If the props data needs to change then the component needs to be re-rendered with a new props reference. If you are writing your application in JavaScript then you need to respect this convention. However, if you choose to write your React application in a strongly-typed language then you may have your props classes represented by immutable types. This enforces this convention through the type system - &lt;em&gt;you&lt;/em&gt; (and anyone reviewing your code) don&#39;t have to keep a constant vigil against accidental mutations, the compiler will tell you if this is attempted (by refusing to build and pointing out where the mistake made).&lt;/p&gt;

&lt;p&gt;The common thread, for me, in all of the reasons why static typing is a good thing is that it enforces things that I want (or that I require) to be enforced, while providing invaluable information and documentation through the types. This makes code easier to reason about and code that is easier to reason about is easier to maintain and extend.&lt;/p&gt;

&lt;h3&gt;What static typing can&#39;t solve&lt;/h3&gt;

&lt;p&gt;It&#39;s not a silver bullet. But, then, nothing is. Static typing is a valuable tool that should be used &lt;em&gt;with&lt;/em&gt; automated test in order to create a reliable product.&lt;/p&gt;

&lt;p&gt;To take a simple example that will illustrate a variety of principles, the following is a LINQ call made in C# to take a set of &lt;strong&gt;EmployeeDetails&lt;/strong&gt; instances and determine the average age (we&#39;ll assume that &lt;strong&gt;EmployeeDetails&lt;/strong&gt; is a class with an integer Age property) -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var averageAge = employees.Average(employee =&amp;gt; employee.Age);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we were implementing the &quot;Average&quot; function ourselves, then we would need to populate the following -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static int Average&amp;lt;T&amp;gt;(this IEnumerable&amp;lt;T&amp;gt; source, Func&amp;lt;T, int&amp;gt; selector)
{
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Static typing gives us a lot of clues here. It ensures that anyone calling &quot;Average&quot; has to provide a set of values that may be enumerated and they have to provide a lambda that extracts an integer from each of those values. If the caller tried to provide a lambda that extracted a string (eg. the employee&#39;s name) from the values then it wouldn&#39;t compile. The type signature documents many of the the requirements of the method.&lt;/p&gt;

&lt;p&gt;However, the type system does not ensure that the implementation of &quot;Average&quot; is correct. It would be entirely possible to write an &quot;Average&quot; function that returned the &lt;em&gt;highest&lt;/em&gt; value, rather than the &lt;a href=&quot;https://en.wikipedia.org/wiki/Arithmetic_mean&quot;&gt;mean&lt;/a&gt; value.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is what unit tests are for.&lt;/em&gt; Unit tests will ensure that the logic within a method is correct. It will ensure that 30 is returned from &quot;Average&quot; if a set of employees with ages 20, 30 and 40 are provided.&lt;/p&gt;

&lt;p&gt;The type system ensures that the code is not called with inappropriate data. If you didn&#39;t have a static type system then it would still be possible to write more unit tests around the code that called &quot;Average&quot; to ensure that it was always dealing with appropriate data - but this is an entire class of tests that are not required if you leverage static analysis*.&lt;/p&gt;

&lt;p&gt;Unfortunately, there &lt;em&gt;are&lt;/em&gt; limitations to what may be expressed in the type system. In the &quot;Average&quot; example above, there is no way (in C#) to express the fact that it&#39;s invalid for a null &quot;source&quot; or &quot;selector&quot; reference to be passed or a &quot;source&quot; reference that has zero elements (since there is no such thing as an average value if there are zero values) or a set of items where one of more of the values is null. Any of these cases of bad data will result in a runtime error. However, I believe that the solution to this is not to run away screaming from static typing because it&#39;s not perfect - in fact, I think that the answer is &lt;em&gt;more&lt;/em&gt; static analysis. &lt;a href=&quot;https://github.com/Microsoft/CodeContracts&quot;&gt;Code Contracts&lt;/a&gt; is a way to include these additional requirements in the type system; to say that &quot;source and selector may not be null&quot; and &quot;source may not be empty&quot; and &quot;source may not contain any null references&quot;. Again, this will be a way for someone consuming the code to have greater visibility of its requirements &lt;em&gt;and&lt;/em&gt; for the compiler to enforce them. I will be able to write stricter code to stop other people from making mistakes with it, and other people will be able to write stricter code to make it clearer to me how it should be used and prevent me from making mistakes or trying to use it in ways that is not supported. &lt;em&gt;I don&#39;t want the power to try to use code incorrectly&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I think that there are two other obvious ways that static typing can&#39;t help and protect you..&lt;/p&gt;

&lt;p&gt;Firstly, when dealing with an external system there may be additional rules that you can not (and would not want to, for the sake of preventing duplication) describe in your code. Perhaps you have a data store that you pass updates to in order to persist changes made by a user - say the user wants to change the name of an employee in the application, so an &lt;strong&gt;UpdateEmployeeName&lt;/strong&gt; action must be sent to the data service. This action will have an integer &quot;Key&quot; property and a string &quot;Name&quot; property. This class structure ensures that data of the appropriate form is provided but it can &lt;em&gt;not&lt;/em&gt; ensure that the Key itself is valid - only the data store will know that. The type system is not an all-seeing-all-knowing magician, so it &lt;em&gt;will&lt;/em&gt; allow some invalid states to be represented (such as an update action for an entity key that doesn&#39;t exist). But the more invalid states that may &lt;em&gt;not&lt;/em&gt; be represented (such as not letting the key, which the data service requires to be an integer, be the string &quot;abc&quot; - for example) means that there are less possible errors states to test against and the code is more reliable (making it harder to write incorrect code will make the code more correct overall and hence more reliable).&lt;/p&gt;

&lt;p&gt;Secondly, if the type system is not taken advantage to the fullest extent then it can&#39;t help you to the fullest extent. I have worked on code in the past where a single class was used in many places to represent variations on the same data. Sometimes a &quot;Hotel&quot; instance would describe the entity key, the name, the description. Sometimes the &quot;Hotel&quot; instance would contain detailed information about the rooms in the hotel, sometimes the &quot;Rooms&quot; property would be null. Sometimes it would have its &quot;Address&quot; value populated, other times it would be null. It would depend upon the type of request that the &quot;Hotel&quot; instance was returned for.  This is a poor use of the type system - different response types should have been used, it should have been clear from the returned type what data would be present. The more often we&#39;re in a &quot;sometimes this, sometimes that&quot; situation, the less reliable that the code will be as it becomes easier to forget one of &quot;sometimes&quot; cases (again, I&#39;m talking from personal experience and not just worrying about how this may or may not affect &quot;other programmers&quot;). Unfortunately, not even the potential for a strong type system can make shitty code good.&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;(It&#39;s probably worth stating that a static type system is one way that tooling can automatically identify mistakes for you but it&#39;s not the only way - &lt;a href=&quot;https://github.com/Microsoft/CodeContracts&quot;&gt;code contracts&lt;/a&gt; are a way to go beyond what C# can support &quot;out of the box&quot; but there are other approaches, such as what &lt;a href=&quot;http://www.gamasutra.com/view/news/128836/InDepth_Static_Code_Analysis.php&quot;&gt;John Carmark has written about static analysis of C++&lt;/a&gt; or how &lt;a href=&quot;http://flowtype.org/&quot;&gt;Facebook is analysing JavaScript without even requiring types to be explicitly declared&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;

&lt;h3&gt;Code Reviews&lt;/h3&gt;

&lt;p&gt;Another quote that stuck out for me in the &quot;&lt;a href=&quot;https://m.signalvnoise.com/provide-sharp-knives-cc0a22bf7934#.yv2771vf7&quot;&gt;Sharp Knives&lt;/a&gt;&quot; post was that&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We enforce such good senses by convention, by nudges, and through education&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is very sensible advice. I think that one of the best ways for code quality to remain high is through developers working together - learning from each other and supporting each other. This is something that I&#39;ve found code reviews to be very effective for. If all code is reviewed, then all code is guaranteed to have been read by at least two people; the author and the reviewer. If the code is perfect, then that&#39;s where the review ends - on a high note. If the code needs work then any mistakes or improvements can be highlighted and addressed. As the recipient of a review that identifies a mistake that I&#39;ve made, I&#39;m happy! Well.. I&#39;m generally a bit annoyed with myself for making the mistake but I&#39;m glad that a colleague has identified it rather than it getting to an end user.&lt;/p&gt;

&lt;p&gt;As a code reviewer, I will be happy with code that I think requires no changes or if code needs to be rejected only once. I&#39;ve found that code that is rejected and then fixed up is much harder to re-review and that bugs more often slip through the re-review process. It&#39;s similar to the way in which you can more easily become blind to bugs in code that you&#39;ve just written than you are to someone else&#39;s code - you have a familarity with the code that you are reviewing for a second time &lt;em&gt;and&lt;/em&gt; someone has just told you that they have fixed it; I&#39;ve found that there is something psychological about that that makes it just that little bit harder to pick up on any subsequent mistakes. Thusly, I would prefer to limit the number of times that reviews bounce back and forth.&lt;/p&gt;

&lt;p&gt;I have found that a static type system encourages a stricter structure on the code and that conventions are clearer, not to mention the fact that the compiler can identify more issues - meaning that there should be fewer types of mistake that can get through to a review. There is, of course, a limit to what the type system can contribute on this front but &lt;em&gt;any&lt;/em&gt; mechanical checks that a computer could perform leave the reviewer more time (and mental capacity) to provide deeper insight; to offer guidance to a more junior developer or to suggest implementation tweaks to a peer.&lt;/p&gt;

&lt;h3&gt;A &quot;wonderful message&quot;&lt;/h3&gt;

&lt;p&gt;It&#39;s a theme that has picked up more and more weight for me over the years, that the computer should be able to help me tell it what to do - I should be able to leverage its strengths in order to multiply mine. As a developer, there is a lot of creativity required but also a huge quantity of seemingly banal details. The strength of a good abstraction comes from being able to &quot;hide away&quot; details that don&#39;t matter, leaving you with larger and more useful shapes to deal with, allowing you to think closer to the big picture. The more details that may be automatically verified, the less that you need to worry about them; freeing up more valuable mental space. Leaning on static analysis aids this, it allows the computer to do what it&#39;s good at and concentrate on the simple-and-boring rules, allowing you to become more effective. It&#39;s an incredibly powerful tool, the ability to actually limit certain things from being done allows you to do &lt;em&gt;more&lt;/em&gt; of what you should be doing.&lt;/p&gt;

&lt;p&gt;It can also be an invaluable form of documentation for people using your code (including you, in six months, when you&#39;ve forgotten the finer details). Good use of the type system allows for the requirements and the intent of code to be clearer. It&#39;s not just a way of communicating with the compiler, it&#39;s also a very helpful way to communicate with human consumers of your code.&lt;/p&gt;

&lt;p&gt;On a personal note, this marks my 100th post on this blog. The first (&lt;a href=&quot;http://www.productiverage.com/i-love-immutable-data&quot;&gt;I love Immutable Data&lt;/a&gt;) was written about five years ago and was &lt;em&gt;also&lt;/em&gt; (basically) about leveraging the type system - by defining immutable types and the benefits that they could have. I find it reassuring that, with all that I&#39;ve seen since then (and thinking back over the time since I first started writing code.. over 25 years ago) that this still feels like a good thing. In a time where it seems like everyone&#39;s crying about JavaScript fatigue (and the frequent off-the-cuff comments about React being &quot;&lt;a href=&quot;https://camo.githubusercontent.com/a85f7c2c03b36655323ec7a3250057233e82ef55/68747470733a2f2f692e696d6775722e636f6d2f695549497571622e6a7067&quot;&gt;so hot right now&lt;/a&gt;&quot;*), I&#39;m glad that there are still plenty of principles that stand the test of time.&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;(Since I&#39;m feeling so brave and self-assured, I&#39;m going to say that I think that React *will* still be important five years from now - maybe I&#39;ll look back in 2021 and see how this statement has fared!)&lt;/em&gt;&lt;/p&gt;
</description>
			<pubDate>Tue, 31 May 2016 21:34:00 GMT</pubDate>
		</item>
		<item>
			<title>A static type system is a wonderful message to the present and future</title>
            <link>http://www.productiverage.com/a-static-type-system-is-a-wonderful-message-to-the-present-and-future</link>
			<guid>http://www.productiverage.com/a-static-type-system-is-a-wonderful-message-to-the-present-and-future</guid>
			<description>&lt;p&gt;Last week, I read the article &quot;&lt;a href=&quot;http://solnic.eu/2016/05/22/my-time-with-rails-is-up.html&quot;&gt;My time with Rails is up&lt;/a&gt;&quot; (by &lt;a href=&quot;https://twitter.com/_solnic_&quot;&gt;Piotr Solnica&lt;/a&gt;) which resulted in me reading some of &lt;a href=&quot;https://medium.com/@dhh&quot;&gt;DHH&lt;/a&gt;&#39;s latest posts and re-reading some of his  older ones.&lt;/p&gt;

&lt;p&gt;Some people write articles that I enjoy reading because they have similar ideas and feelings about development that I do, that they manage to express in a new or particularly articulate way that helps me clarify it in my own head or that helps me think about whether I really do still agree with the principle. Some people write articles that come from a completely different point of view and experience to me and these also can have a lot of benefit, in that they make me reconsider where I stand on things or inspire me to try something different to see how it feels. DHH is, almost without fail, interesting to read and I like his passion and conviction.. but he&#39;s definitely not in that first category of author. There was one thing in particular, though, that really stuck out for me in his post &quot;&lt;a href=&quot;https://m.signalvnoise.com/provide-sharp-knives-cc0a22bf7934#.yv2771vf7&quot;&gt;Provide sharp knives&lt;/a&gt;&quot; -&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ruby includes a lot of sharp knives in its drawer of features.. The most famous is monkey patching: The power to change existing classes and methods. .. it offered a different and radical perspective on the role of the programmer: That they could be trusted with sharp knives. .. That’s an incredibly aspirational idea, and one that runs counter to a lot of programmer’s intuition about other programmers.&lt;/p&gt;
  
  &lt;p&gt;Because it’s always about other programmers when the value of sharp knives is contested. &lt;strong&gt;I’ve yet to hear a single programmer put up their hand and say &quot;I can’t trust myself with this power, please take it away from me!&quot;. It’s always &quot;I think other programmers would abuse this&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The highlighted section of the quote is what I disagree with most - because I absolutely &lt;em&gt;do&lt;/em&gt; want to be able to write code in a way that limits how I (as well as others) may use it.&lt;/p&gt;

&lt;h3&gt;And I strongly disagree with it because..&lt;/h3&gt;

&lt;p&gt;The harsh reality is that all code is created according to a particular set of limitations and compromises that are present at the time of writing. The more complex the task that the code must perform, the more likely that there will be important assumptions that are &quot;baked into&quot; the code and that it would be beneficial for someone using the code to be aware of. A good type system can be an excellent way to communicate some of these assumptions. And, unlike documentation, convention or code review, a good type system can allow these assumptions to be &lt;em&gt;enforced&lt;/em&gt; by the computer - rather than a principle that &lt;em&gt;should be treated as unbreakable&lt;/em&gt; being allowed to be ignored. Computers are excellent at verifying simple sets of rules, which allow them to help identify common mistakes (or miscomprehensions).&lt;/p&gt;

&lt;p&gt;At the very simplest level, specifying types for a method&#39;s arguments makes it much less likely that I&#39;ll refactor my code by swapping two of the arguments and then miss one of the call sites and not find out that something now fails until runtime (the example sounds contrived but, unfortunately, it &lt;em&gt;is&lt;/em&gt; something that I&#39;ve done from time to time). Another simple example is that having descriptive classes reminds me precisely what the minimum requirements are for a method without having to poke around &lt;em&gt;inside&lt;/em&gt; the method - if there is an argument named &quot;employeeSummaries&quot; in a language without type annotations, I can presume that it&#39;s some sort of collection type.. but should each value in the collection include just the key and name of each employee or should it be key, name and some other information that the method requires such as, say, a list of reporting employees that the employee is responsible for managing? With a type system, if the argument is &lt;strong&gt;IEnumerable&amp;lt;EmployeeSummary&amp;gt;&lt;/strong&gt; then I can see what information I have to provide by looking at the &lt;strong&gt;EmployeeSummary&lt;/strong&gt; class.&lt;/p&gt;

&lt;p&gt;A more complex example might involve data that is shared across multiple threads, whether for parallel processing or just for caching. The simplest way to write this sort of code reliably is to prevent mutation of the data from occurring on multiple threads and one way to achieve that is for the data to be represented by immutable data types. If the multi-threaded code requires that the data passed in be immutable then it&#39;s hugely beneficial for the type system to be able to specify that immutable types be used, so that the internal code may be written in the simplest way - based on the requirement that the data not be mutable.&lt;/p&gt;

&lt;p&gt;I want to reinforce here that this is not just about me trying to stop other people from messing up when they use my code, &lt;em&gt;this is just as much about me&lt;/em&gt;. Being able to represent these sorts of key decisions in the type system means that I can actually be a little bit less obsessive with how much I worry about them, easing the mental burden. This, in turn, leaves me more mental space to concentrate on solving the real problem at hand. I won&#39;t be able to forget to pass data in an immutable form to methods that require it in an immutable form, because the compiler won&#39;t let me do so.&lt;/p&gt;

&lt;h3&gt;Isn&#39;t this what automated tests are for?&lt;/h3&gt;

&lt;p&gt;An obvious rebuttal is that these sorts of errors (particular the mixing-up-the-method-arguments example) can (and should) be caught by unit tests.&lt;/p&gt;

&lt;p&gt;In my opinion: no.&lt;/p&gt;

&lt;p&gt;I believe that unit tests &lt;em&gt;are&lt;/em&gt; required to test logic in an application and it &lt;em&gt;is&lt;/em&gt; possible to write unit tests that show how methods work when given the correct data and that show how they will fail when given invalid data but it&#39;s difficult (and arduous) to prove, using automated tests, that the same guarantees that a type system could enforce are not being broken anywhere in your code. The only-allow-immutable-data-types-to-be-passed-into-this-thread-safe-method example is a good one here since multi-threaded code will often appear to work fine when only executed within a single thread, meaning that errors will only surface when multiple threads are working with it simultaneously. Writing unit tests to try to detect race conditions is not fun. You could have 100% code coverage and not always pick up on all of the horrible things that can happen when multiple threads deal with mutable data. If the data passed around within those code paths is &lt;em&gt;immutable&lt;/em&gt;, though (which may be enforced through the types passed around), then these potential races are prevented.&lt;/p&gt;

&lt;p&gt;Good use of static typing means that an entire class of unit tests are not required.&lt;/p&gt;

&lt;p&gt;The fact that static typing is not enough to confirm that your code is correct, and that unit tests should be written as well, does not mean that &lt;em&gt;only&lt;/em&gt; units tests should be used.&lt;/p&gt;

&lt;p&gt;I&#39;ve kept this post deliberately short because I would love for it to have some impact and experience has taught me that it&#39;s much more difficult for that to be the case with a long format post. I&#39;ve expanded on this further at &quot;&lt;a href=&quot;http://www.productiverage.com/a-static-type-system-is-a-wonderful-message-to-the-present-and-future-supplementary&quot;&gt;A static type system is a wonderful message to the present and future - Supplementary&lt;/a&gt;&quot;. There&#39;s more about the benefits, more about the limitations, more examples of me saying &quot;I don&#39;t want the power to do try to do something that this code has been explicitly written not to have to deal with&quot; and &lt;em&gt;no more&lt;/em&gt; mentions of multi-threading because static typing&#39;s benefits are not restricted to especially complicated problem domains, applications may benefit regardless of their complexity.&lt;/p&gt;
</description>
			<pubDate>Tue, 31 May 2016 21:33:00 GMT</pubDate>
		</item>
		<item>
			<title>Using Roslyn code fixes to make the &quot;Friction-less immutable objects in Bridge&quot; even easier</title>
            <link>http://www.productiverage.com/using-roslyn-code-fixes-to-make-the-frictionless-immutable-objects-in-bridge-even-easier</link>
			<guid>http://www.productiverage.com/using-roslyn-code-fixes-to-make-the-frictionless-immutable-objects-in-bridge-even-easier</guid>
			<description>&lt;p&gt;This is going to be a short post about a Roslyn (or &quot;The .NET Compiler Platform&quot;, if you&#39;re from Microsoft) analyser and code fix that I&#39;ve added to a library. I&#39;m not going to try to take you through the steps required to create an analyser nor how the Roslyn object model describes the code that you&#39;ve written in the IDE* but I want to talk about the analyser itself because it&#39;s going to be very useful if you&#39;re one of the few people using my &lt;a href=&quot;https://www.nuget.org/packages/ProductiveRage.Immutable&quot;&gt;ProductiveRage.Immutable&lt;/a&gt; library. Also, I feel like the inclusion of analysers with libraries is something that&#39;s going to become increasingly common (and I want to be able to have something to refer back to if I get the chance to say &quot;told you!&quot; in the future).&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;(This is largely because I&#39;m still struggling with it a bit myself; my current process is to start with &lt;a href=&quot;https://msdn.microsoft.com/en-gb/magazine/dn879356.aspx&quot;&gt;Use Roslyn to Write a Live Code Analyzer for Your API&lt;/a&gt; and the &quot;Analyzer with Code Fix (NuGet + VSIX)&quot; Visual Studio template. I then tinker around a bit and try running what I&#39;ve got so far, so that I can use the &quot;Syntax Visualizer&quot; in the Visual Studio instance that is being debugged. Then I tend to do a lot of Google searches when I feel like I&#39;m getting close to something useful.. how do I tell if a &lt;strong&gt;FieldDeclarationSyntax&lt;/strong&gt; is for a readonly field or not? Oh, good, someone else has already written some code doing something like what  I want to do - I look at the &quot;Modifiers&quot; property on the &lt;strong&gt;FieldDeclarationSyntax&lt;/strong&gt; instance).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As new .net libraries get written, some of them will have guidelines and rules that can&#39;t easily be described through the type system. In the past, the only option for such rules would be to try to ensure that the documentation (whether this be the project README and / or more in-depth online docs and / or the xml summary comment documentation for the types, methods, properties and fields that intellisense can bring to your attention in the IDE). The support that Visual Studio 2015 introduced for customs analysers* allows these rules to be communicated in a different manner.&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;(I&#39;m being English and stubborn, hence my use of &quot;analysers&quot; rather than &quot;analyzers&quot;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In short, they allow these library-specific guidelines and rules to be higlighted in the Visual Studio Error List, just like any error or warning raised by Visual Studio itself (even refusing to allow the project to be built, if an error-level message is recorded).&lt;/p&gt;

&lt;p&gt;An excellent example that I&#39;ve seen recently was encountered when I was writing some of my own analyser code. To do this, you can start with the &quot;Analyzer with Code Fix (NuGet + VSIX)&quot; template, which pulls in a range of NuGet packages and includes some template code of its own. You then need to write a class that is derived from &lt;strong&gt;DiagnosticAnalyzer&lt;/strong&gt;. Your class will declare one of more &lt;strong&gt;DiagnosticDescriptor&lt;/strong&gt; instances - each will be a particular rule that is checked. You then override an &quot;Initialize&quot; method, which allows your code to register for syntax changes and to raise any rules that have been broken. You must also override a &quot;SupportedDiagnostics&quot; property and return the set of &lt;strong&gt;DiagnosticDescriptor&lt;/strong&gt; instances (ie. rules) that your analyser will cover. If the code that the &quot;Initialize&quot; method hooks up tries to raise a rule that &quot;SupportedDiagnostics&quot; did not declare, the rule will be ignored by the analysis engine. This would be a kind of (silent) runtime failure and it&#39;s something that is documented - but it&#39;s still a very easy mistake to make; you might create a new &lt;strong&gt;DiagnosticDescriptor&lt;/strong&gt; instance and raise it from your &quot;Initialize&quot; method but forget to add it to the &quot;SupportedDiagnostics&quot; set.. whoops. In the past, you may not realise until runtime that you&#39;d made a mistake and, as a silent failure, you might end up getting very frustrated and be stuck wondering what had gone wrong. But, mercifully (and I say this as I made this very mistake), there is an analyser in the &quot;Microsoft.CodeAnalysis.CSharp&quot; NuGet package that brings this error immediately to your attention with the message:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RS1005 ReportDiagnostic invoked with an unsupported DiagnosticDescriptor&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The entry in the Error List links straight to the code that called &quot;context.ReportDiagnostic&quot; with the unexpected rule. This is fantastic - instead of suffering a runtime failure, you are informed at compile time precisely what the problem is. Compile time is &lt;em&gt;always&lt;/em&gt; better than run time (for many reasons - it&#39;s more immediate, so you don&#39;t have to &lt;em&gt;wait&lt;/em&gt; until runtime, and it&#39;s more thorough; a runtime failure may only happen if a particular code path is followed, but static analysis such as this is like having &lt;em&gt;every possible&lt;/em&gt; code path tested).&lt;/p&gt;

&lt;h3&gt;The analysers already in ProductiveRage.Immutable&lt;/h3&gt;

&lt;p&gt;The ProductiveRage uber-fans (who, surely exist.. yes? ..no? :D) may be thinking &quot;doesn&#39;t the ProductiveRage.Immutable library already have some analysers built into it?&quot;&lt;/p&gt;

&lt;p&gt;And they would be correct, for some time now it has included a few analysers that try to prevent some simple mistakes. As a quick reminder, the premise of the library is that it will make creating immutable types in &lt;a href=&quot;http://www.bridge.net&quot;&gt;Bridge.NET&lt;/a&gt; easier.&lt;/p&gt;

&lt;p&gt;Instead of writing something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public sealed class EmployeeDetails
{
  public EmployeeDetails(PersonId id, NameDetails name)
  {
    if (id == null)
      throw new ArgumentNullException(&quot;id&quot;);
    if (name == null)
      throw new ArgumentNullException(&quot;name&quot;);

    Id = id;
    Name = name;
  }

  /// &amp;lt;summary&amp;gt;
  /// This will never be null
  /// &amp;lt;/summary&amp;gt;
  public PersonId Id { get; private set; }

  /// &amp;lt;summary&amp;gt;
  /// This will never be null
  /// &amp;lt;/summary&amp;gt;
  public NameDetails Name { get; private set; }

  public EmployeeDetails WithId(PersonId id)
  {
    return Id.Equals(id) ? this : return new EmployeeDetails(id, Name);
  }
  public EmployeeDetails WithName(NameDetails name)
  {
    return Name.Equals(name) ? this : return new EmployeeDetails(Id, name);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. you can express it just as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public sealed class EmployeeDetails : IAmImmutable
{
  public EmployeeDetails(PersonId id, NameDetails name)
  {
    this.CtorSet(_ =&amp;gt; _.Id, id);
    this.CtorSet(_ =&amp;gt; _.Name, name);
  }
  public PersonId Id { get; private set; }
  public NameDetails Name { get; private set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The if-null-then-throw validation is encapsulated in the CtorSet call (since the library takes the view that no value should ever be null - it introduces an &lt;strong&gt;Optional&lt;/strong&gt; struct so that you can identify properties that may be without a value). And it saves you from having to write &quot;With&quot; methods for the updates as &lt;strong&gt;IAmImmutable&lt;/strong&gt; implementations may use the &quot;With&quot; extension method whenever you want to create a new instance with an altered property - eg.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var updatedEmployee = employee.With(_ =&amp;gt; _.Name, newName);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The library can only work if certain conditions are met. For example, every property must have a getter and a setter - otherwise, the &quot;CtorSet&quot; extension method won&#39;t know how to actually set the value &quot;under the hood&quot; when populating the initial instance (nor would the &quot;With&quot; method know how to set the value on the new instance that it would create).&lt;/p&gt;

&lt;p&gt;If you forgot this and wrote the following (note that the &quot;Name&quot; property now has no setter) -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public sealed class EmployeeDetails : IAmImmutable
{
  public EmployeeDetails(PersonId id, NameDetails name)
  {
    this.CtorSet(_ =&amp;gt; _.Id, id);
    this.CtorSet(_ =&amp;gt; _.Name, name);
  }
  public PersonId Id { get; private set; }
  public NameDetails Name { get; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. then you would see the following errors reported by Visual Studio (presuming you are using 2015 or later) -&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.productiverage.com/Content/Images/Posts/ProductiveRageImmutableAnalyserError1.png&quot; alt=&quot;Example analyser errors raised by the ProductiveRage.Immutable library&quot;&gt;&lt;/p&gt;

&lt;p&gt;.. which is one of the &quot;common IAmImmutable mistakes&quot; analysers identifying the problem for you.&lt;/p&gt;

&lt;h3&gt;Getting Visual Studio to write code for you, using code fixes&lt;/h3&gt;

&lt;p&gt;I&#39;ve been writing more code with this library and I&#39;m still, largely, happy with it. Making the move to assuming never-allow-null (which is baked into the &quot;CtorSet&quot; and &quot;With&quot; calls) means that the classes that I&#39;m writing are a lot shorter and that type signatures are more descriptive. (I wrote about all this in my post at the end of last year &quot;&lt;a href=&quot;http://www.productiverage.com/frictionless-immutable-objects-in-bridge-c-sharp-javascript-applications&quot;&gt;Friction-less immutable objects in Bridge (C# / JavaScript) applications&lt;/a&gt;&quot; if you&#39;re curious for more details).&lt;/p&gt;

&lt;p&gt;However.. I &lt;em&gt;still&lt;/em&gt; don&#39;t really like typing out as much code for each class as I have to. Each class has to repeat the property names four times - once in the constructor, twice in the &quot;CtorSet&quot; call and a fourth time in the public property. Similarly, the type name has to be repeated twice - once in the constructor and once in the property.&lt;/p&gt;

&lt;p&gt;This is better than the obvious alternative, which is to not bother with immutable types. I will gladly take the extra lines of code (and the effort required to write them) to get the additional confidence that a &quot;stronger&quot; type system offers - I wrote about this recently in my &quot;&lt;a href=&quot;http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-from-first-principles&quot;&gt;Writing React with Bridge.NET - The Dan Way&lt;/a&gt;&quot; posts; I think that it&#39;s really worthwhile to bake assumptions into the type system where possible. For example, the Props types of React components are assumed, by the React library, to be immutable - so having them defined as immutable types represents this requirement in the type system. If the Props types are &lt;em&gt;mutable&lt;/em&gt; then it would be possible to write code that tries to change that data and then bad things could happen (you&#39;re doing something that library expects not to happen). If the Props types are &lt;em&gt;immutable&lt;/em&gt; then it&#39;s not even possible to write this particular kind of bad-things-might-happen code, which is a positive thing.&lt;/p&gt;

&lt;p&gt;But &lt;em&gt;still&lt;/em&gt; I get a niggling feeling that things could be better. And now they are! With Roslyn, you can not only identify particular patterns but you can also offer automatic fixes for them. So, if you were to start writing the &lt;strong&gt;EmployeeDetails&lt;/strong&gt; class from scratch and got this far:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public sealed class EmployeeDetails : IAmImmutable
{
  public EmployeeDetails(PersonId id, NameDetails name)
  {
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. then an analyser could identify that you were writing an &lt;strong&gt;IAmImmutable&lt;/strong&gt; implementation and that you have an empty constructor - it could then offer to fix that for you by filling in the rest of the class.&lt;/p&gt;

&lt;p&gt;The latest version of the ProductiveRage.Immutable library (1.7.0) does just that. The empty constructor will not only be identified with a warning but a light bulb will also appear alongside the code. Clicking this (or pressing [Ctrl]-[.] while within the empty constructor, for fellow keyboard junkies) will present an option to &quot;Populate class from constructor&quot; -&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.productiverage.com/Content/Images/Posts/ProductiveRageImmutableAnalyserCodeFix1.png&quot; alt=&quot;Screenshot showing the analyser identifying an empty constructor on an IAmImmutable implementation&quot;&gt;&lt;/p&gt;

&lt;p&gt;Selecting the &quot;Populate class from constructor&quot; option -&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.productiverage.com/Content/Images/Posts/ProductiveRageImmutableAnalyserCodeFix2.png&quot; alt=&quot;Screenshot showing the code fix that may auto-populate the incomplete IAmImmutable implementation&quot;&gt;&lt;/p&gt;

&lt;p&gt;.. will take the constructor arguments and generate the &quot;CtorSet&quot; calls and the public properties automatically. Now you can have all of the safety of the immutable type with no more typing effort than the mutable version!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// This is what you have to type of the immutable version,
// then the code fix will expand it for you
public sealed class EmployeeDetails : IAmImmutable
{
  public EmployeeDetails(PersonId id, NameDetails name)
  {
  }
}

// This is what you would have typed if you were feeling
// lazy and creating mutable types because you couldn&#39;t
// be bothered with the typing overhead of immutability
public sealed class EmployeeDetails
{
  public PersonId Id;
  public NameDetails name;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;To summarise&lt;/h3&gt;

&lt;p&gt;If you&#39;re already using the library, then all you need to do to start taking advantage of this code fix is update your NuGet reference* (presuming that you&#39;re using VS 2015 - analysers weren&#39;t supported in previous versions of Visual Studio).&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;(Sometimes you have to restart Visual Studio after updating, you will know that this is the case if you get a warning in the Error List about Visual Studio not being able to load the Productive.Immutable analyser)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you&#39;re writing your own library that has any guidelines or common gotchas that you have to describe in documentation somewhere (that the users of your library may well not read unless they have a problem - at which point they may even abandon the library, if they&#39;re only having an investigative play around with it) then I highly recommend that you consider using analysers to surface some of these assumptions and best practices. While I&#39;m aware that I&#39;ve not offered much concrete advice on &lt;em&gt;how&lt;/em&gt; to write these analysers, the reason is that I&#39;m still very much a beginner at it - but that puts me in a good position to be able to say that it really is fairly easy if you read a few articles about it (such as &lt;a href=&quot;https://msdn.microsoft.com/en-gb/magazine/dn879356.aspx&quot;&gt;Use Roslyn to Write a Live Code Analyzer for Your API&lt;/a&gt;) and then just get stuck in. With some judicious Google&#39;ing, you&#39;ll be making progress in no time!&lt;/p&gt;

&lt;p&gt;I guess that only time will tell whether library-specific analysers become as prevelant as I imagine. It&#39;s very possible that I&#39;m biased because I&#39;m such a believer in static analysis. Let&#39;s wait and see*!&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;Unless YOU are a library writer that this might apply to - in which case, make it happen rather than just sitting back to see what MIGHT happen! :)&lt;/em&gt;&lt;/p&gt;
</description>
			<pubDate>Wed, 04 May 2016 22:33:00 GMT</pubDate>
		</item>
		<item>
			<title>Writing React apps using Bridge.NET - The Dan Way (Part Three)</title>
            <link>http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-part-three</link>
			<guid>http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-part-three</guid>
			<description>&lt;p&gt;In parts &lt;a href=&quot;http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-from-first-principles&quot;&gt;One&lt;/a&gt; and &lt;a href=&quot;http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-part-two&quot;&gt;Two&lt;/a&gt;, I described how to create a simple application using React and a Flux-like architecture, written in &lt;a href=&quot;http://bridge.net/&quot;&gt;Bridge.NET&lt;/a&gt; - it covered where and how to deal with validation, how to integrate with a persistence layer, how to deal with asynchronous interactions (and how they don&#39;t need to be scary) and how the approach made the code easy to test and easy to reason about.&lt;/p&gt;

&lt;p&gt;The components created using the &lt;a href=&quot;https://www.nuget.org/packages/Bridge.React&quot;&gt;React / Bridge bindings&lt;/a&gt; have their requirements / dependencies described in a strongly-typed manner since each component&#39;s &quot;props&quot; reference is a nested class with properties for each value or reference that will be needed in order for it to render.&lt;/p&gt;

&lt;p&gt;This combination of technologies has the potential to be really powerful for writing client-side / browser-based applications, particularly with the ability to leverage C#&#39;s proven strength in allowing the writing of large and reliable systems. However, I&#39;m not happy with the example application yet. Although the way that it&#39;s written makes a lot of it easy to understand and, hopefully, makes the &lt;em&gt;intent&lt;/em&gt; of the code clear, it still could be &lt;em&gt;even easier&lt;/em&gt; to understand and the intent and the requirements &lt;em&gt;even clearer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;People often like to talk as if a language is dynamically-typed (or &quot;non-typed&quot; or &quot;uni-typed&quot;, depending upon the language, their vocabulary and their knowledge and opinion of the language) or statically-typed; as if it is a binary choice. Really, it is a sliding scale. C# definitely sits on the &quot;statically-typed &lt;em&gt;side&lt;/em&gt;&quot;, but the way that you write C# dictates how far along the scale that &lt;em&gt;your C#&lt;/em&gt; is.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(C# can also be written to act as a dynamically-typed language, particularly if you use the &quot;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dd264741.aspx&quot;&gt;dynamic&lt;/a&gt;&quot; keyword - but it&#39;s principally a statically-typed language).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I&#39;m going to describe some ways to improve the example application and, in doing so, extrapolate some rules as to how to make the code clearer (and, &lt;em&gt;again&lt;/em&gt;, easier to reason about, write and maintain - since these are extremely important qualities of code to me, that I strive for when developing and that appealed to me when I first encountered React). These will be my opinions (based upon my experiences) and you might disagree with them - but this is where we really get into &quot;The Dan Way&quot; of working with Bridge and React. If you &lt;em&gt;do&lt;/em&gt; choose to disagree, then hopefully parts &lt;a href=&quot;http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-from-first-principles&quot;&gt;One&lt;/a&gt; and &lt;a href=&quot;http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-part-two&quot;&gt;Two&lt;/a&gt; will continue to be useful (but I&#39;m afraid we can never be friends*).&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;(Only joking**)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;** &lt;em&gt;(I&#39;m not)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Clarification through a richer type system&lt;/h3&gt;

&lt;p&gt;Let&#39;s jump straight in with a simple example. We have a &lt;strong&gt;TextInput&lt;/strong&gt; component that renders a text input element and passes up any requests by the user that the input&#39;s content be changed. The main primary purpose of this class is to provide a simple interface. Many of the html attributes that &lt;em&gt;may&lt;/em&gt; be applied to a text input are not relevant (this exposes only the basics, such as &quot;ClassName&quot;). Similarly, the &quot;OnChange&quot; that a text input raises has a relatively complicated event reference (it allows you to identify the element that changed and then get the requested &quot;new value&quot; from it, but I want a &lt;strong&gt;TextInput&lt;/strong&gt;&#39;s &quot;OnChange&quot; event to simply provide the new string and nothing else).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.Html5;
using Bridge.React;

namespace BridgeReactTutorial.Components
{
  public class TextInput : StatelessComponent&amp;lt;TextInput.Props&amp;gt;
  {
    public TextInput(Props props) : base(props) { }

    public override ReactElement Render()
    {
      return DOM.Input(new InputAttributes
      {
        Type = InputType.Text,
        ClassName = props.ClassName,
        Disabled = props.Disabled,
        Value = props.Content,
        OnChange = e =&amp;gt; props.OnChange(e.CurrentTarget.Value)
      });
    }

    public class Props
    {
      public string ClassName;
      public bool Disabled;
      public string Content;
      public Action&amp;lt;string&amp;gt; OnChange;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the context of this small class, looking at the code, I would say that it&#39;s fairly clear what each line of code does and what each of the properties of the &lt;strong&gt;Props&lt;/strong&gt; class is required for and how it will be used. However, even within such a small class, there are several implicit assumptions that are being made - eg.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ClassName is optional, it may be null.. or it may be blank - React will actually treat these two cases differently, do we really want that? If it&#39;s null then no &quot;class&quot; attribute will be present on the input element, but if it&#39;s blank then a &quot;class&quot; attribute &lt;em&gt;will&lt;/em&gt; be added (but with no value).&lt;/li&gt;
&lt;li&gt;Content is treated in the same way but probably shouldn&#39;t be - does it really make sense for Content to potentially be null? Blank, yes; if there&#39;s no user-entered content. But null? Probably not.&lt;/li&gt;
&lt;li&gt;OnChange is &lt;em&gt;not&lt;/em&gt; optional - if it&#39;s null then a null reference exception is going to be thrown when the user attempts to change the value in the input box (because &quot;props.OnChange&quot; will be called like a function, which will fail if it&#39;s null).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First off, I don&#39;t like the should-or-shouldn&#39;t-be-allowed-to-be-null confusion around the &quot;ClassName&quot; and &quot;Content&quot; values. Secondly, I don&#39;t like the fact that, as it stands, you need to read (or already be familiar with) the code inside the &lt;strong&gt;TextInput&lt;/strong&gt; component. One way to try to address these issues would be to consider using summary comments on the &lt;strong&gt;Props&lt;/strong&gt; class - eg.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Props
{
  /// &amp;lt;summary&amp;gt;
  /// This is optional and so may be null (if non-null, then it should be a valid class
  /// name - ie. non-blank)
  /// &amp;lt;/summary&amp;gt;
  public string ClassName;

  public bool Disabled;

  /// &amp;lt;summary&amp;gt;
  /// An input may not always have a value and so this may be blank (but it should never
  /// be null)
  /// &amp;lt;/summary&amp;gt;
  public string Content;

  /// &amp;lt;summary&amp;gt;
  /// This is mandatory and may never be null
  /// &amp;lt;/summary&amp;gt;
  public Action&amp;lt;string&amp;gt; OnChange;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem with this approach is that, if the comments are ignored, runtime problems will occur at some point and it may not be very easy to trace them back to where they originated. If the &quot;OnChange&quot; value is null, for example, then the problem won&#39;t be noticed until the user interacts with the input box - and the code that raises the exception (the &quot;props.OnChange&quot; call with &lt;strong&gt;TextInput&lt;/strong&gt;&#39;s &quot;Render&quot; method) will be completely removed from the code that incorrectly set the null value (the code that instantiated and populated &lt;strong&gt;Props&lt;/strong&gt; instance).&lt;/p&gt;

&lt;p&gt;So another alternative would be to combine these comments with some validation - eg.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Props
{
  private string _className, _content;
  private Action&amp;lt;string&amp;gt; _onChange;

  /// &amp;lt;summary&amp;gt;
  /// This is optional and so may be null (if non-null, then it should be a valid class
  /// name - ie. non-blank)
  /// &amp;lt;/summary&amp;gt;
  public string ClassName
  {
    get { return _className; }
    set
    {
      if (value == &quot;&quot;)
        throw new ArgumentException(&quot;ClassName should not be set to a blank string&quot;);
      _className = value;
    }
  }

  public bool Disabled { get; set; }

  /// &amp;lt;summary&amp;gt;
  /// An input may not always have a value and so this may be blank (but it should never
  /// be null)
  /// &amp;lt;/summary&amp;gt;
  public string Content
  {
    get { return _content; }
    set
    {
      if (value == null)
        throw new ArgumentNullException(&quot;Content should not be set to null&quot;);
      _content = value;
    }
  }

  /// &amp;lt;summary&amp;gt;
  /// This is mandatory and may never be null
  /// &amp;lt;/summary&amp;gt;
  public Action&amp;lt;string&amp;gt; OnChange
  {
    get { return _onChange; }
    set
    {
      if (value == null)
        throw new ArgumentNullException(&quot;OnChange should not be set to null&quot;);
      _onChange = value;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, it would not be possible to explicitly set &quot;OnChange&quot; to null - if this was attempted then an exception would be thrown immediately, right at the point in the code that was attempting to assign this invalid value. This is much better than it failing later on, at some point that depends upon how the user does or doesn&#39;t interact with the UI component. This is potentially the sort of mistake that goes unnoticed for some time. For cases that are clearly a &quot;programmer error&quot; bug like this, I much prefer to &quot;fail fast&quot;.&lt;/p&gt;

&lt;p&gt;There&#39;s still a problem, though, because the initial state of the &lt;strong&gt;Props&lt;/strong&gt; class is invalid, since &quot;OnChange&quot; will start as null. If the initialisation code explicitly tries to set it to null then it will fail fast, but if it doesn&#39;t set it at all then it remain null and we&#39;ll be back to where we started in terms of where and when the exception is raised compared to where the programming mistake was made.&lt;/p&gt;

&lt;p&gt;Attempt three could be to set appropriate defaults - eg.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Props
{
  private string _className = null;
  private string _content = &quot;&quot;;
  private Action&amp;lt;string&amp;gt; _onChange = newValue =&amp;gt; { };

  /// &amp;lt;summary&amp;gt;
  /// This is optional and so may be null (if non-null, then it should be a valid class
  /// name - ie. non-blank)
  /// &amp;lt;/summary&amp;gt;
  public string ClassName
  {
    get { return _className; }
    set
    {
      if (value == &quot;&quot;)
        throw new ArgumentException(&quot;ClassName should not be set to a blank string&quot;);
      _className = value;
    }
  }

  public bool Disabled { get; set; }

  /// &amp;lt;summary&amp;gt;
  /// An input may not always have a value and so this may be blank (but it should never
  /// be null)
  /// &amp;lt;/summary&amp;gt;
  public string Content
  {
    get { return _content; }
    set
    {
      if (value == null)
        throw new ArgumentNullException(&quot;Content should not be set to null&quot;);
      _content = value;
    }
  }

  /// &amp;lt;summary&amp;gt;
  /// This is mandatory and may never be null
  /// &amp;lt;/summary&amp;gt;
  public Action&amp;lt;string&amp;gt; OnChange
  {
    get { return _onChange; }
    set
    {
      if (value == null)
        throw new ArgumentNullException(&quot;OnChange should not be set to null&quot;);
      _onChange = value;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&#39;s &lt;em&gt;not&lt;/em&gt; possible for &quot;OnChange&quot; to be null, so a null reference exception can &lt;em&gt;not&lt;/em&gt; be thrown when the user tries to interact with the component.&lt;/p&gt;

&lt;p&gt;This still isn&#39;t fantastic, though. Is it really likely that there&#39;s ever a time where no &quot;OnChange&quot; value should have been set? Changes are that, in that case, there is still a programmer error (a &lt;strong&gt;TextInput&lt;/strong&gt; is useless without an &quot;OnChange&quot; callback and so one &lt;em&gt;should&lt;/em&gt; be set).. but now the error is being silently swallowed.&lt;/p&gt;

&lt;p&gt;So, maybe most properties should &lt;em&gt;have&lt;/em&gt; to be specified in order to get a new &lt;strong&gt;Props&lt;/strong&gt; instance. Since values have to be provided at the point of initialisation, they may as well be validated at that point. This is a very good argument for making the &lt;strong&gt;Props&lt;/strong&gt; class immutable - eg.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Props
{
  public Props(string className, string content, bool disabled, Action&amp;lt;string&amp;gt; onChange)
  {
    if (className == &quot;&quot;)
      throw new ArgumentException(&quot;className should not be set to a blank string&quot;);
    if (content == null)
      throw new ArgumentNullException(&quot;content&quot;);
    if (onChange == null)
      throw new ArgumentNullException(&quot;onChange&quot;);

    ClassName = className;
    Content = content;
    Disabled = disabled;
    OnChange = onChange;
  }

  /// &amp;lt;summary&amp;gt;
  /// This is optional and so may be null (if non-null, then it will never be blank)
  /// &amp;lt;/summary&amp;gt;
  public string ClassName { get; private set; }

  public bool Disabled { get; private set; }

  /// &amp;lt;summary&amp;gt;
  /// An input may not always have a value and so this may be blank (but it should never
  /// be null)
  /// &amp;lt;/summary&amp;gt;
  public string Content { get; private set; }

  /// &amp;lt;summary&amp;gt;
  /// This is mandatory and will never be null
  /// &amp;lt;/summary&amp;gt;
  public Action&amp;lt;string&amp;gt; OnChange { get; private set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(Note: Since Bridge does not yet support C# 6 syntax, the new readonly auto-property syntax can&#39;t be used, hence the use of &quot;get; private set;&quot;).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Two nice benefits arise from this. Firstly, the comments may be tighted up - so &quot;OnChange&quot; is no longer described as&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is mandatory and should never be null&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;now it is&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is mandatory and will never be null&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&#39;s a seemingly small change, but I&#39;m looking for confidence in the code and this is a positive step from &quot;hopefully this won&#39;t happen&quot; to &quot;this can not happen (because an ArgumentNullException would have been instantly thrown if an attempt was made to create a &lt;strong&gt;Props&lt;/strong&gt; instance in this manner)&quot;.&lt;/p&gt;

&lt;p&gt;The second benefit is that the &lt;strong&gt;Props&lt;/strong&gt; class now communicates one of the React guidelines - the React documentation states that props data should be considered immutable; once a component has a props reference, it should not try to change its data, nor should it expect any other code to be able to change it. Now, that commandment is baked into the code - this is a great example of what I mean when I talk about using a &quot;richer type system&quot;, there&#39;s more information that may be encoded than just &quot;this class has a property that is of type string&quot;.&lt;/p&gt;

&lt;p&gt;One final tweak to this sort of approach is to enable optional values to truly be optional. In this example, I&#39;m talking about &quot;className&quot;. The constructor may be changed from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Props(string className, string content, bool disabled, Action&amp;lt;string&amp;gt; onChange)
{
  if (className == &quot;&quot;)
    throw new ArgumentException(&quot;className should not be set to a blank string&quot;);
  if (content == null)
    throw new ArgumentNullException(&quot;content&quot;);
  if (onChange == null)
    throw new ArgumentNullException(&quot;onChange&quot;);

  ClassName = className;
  Content = content;
  Disabled = disabled;
  OnChange = onChange;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Props(
  string content,
  bool disabled,
  Action&amp;lt;string&amp;gt; onChange,
  string className = &quot;&quot;)
{
  if (content == null)
    throw new ArgumentNullException(&quot;content&quot;);
  if (onChange == null)
    throw new ArgumentNullException(&quot;onChange&quot;);
  if (className == &quot;&quot;)
    throw new ArgumentException(&quot;className should not be set to a blank string&quot;);

  Content = content;
  Disabled = disabled;
  OnChange = onChange;
  ClassName = className;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that an instance of &lt;strong&gt;TextInput.Props&lt;/strong&gt; may be created, if no class name is required, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new TextInput.Props(title, isSaveInProgress, onTitleChange)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, if a class name &lt;em&gt;is&lt;/em&gt; required:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new TextInput.Props(title, isSaveInProgress, onTitleChange, &quot;title&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Personally, I like to use named constructor arguments when creating &lt;strong&gt;Props&lt;/strong&gt; instances, so I would probably write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new TextInput.Props(
  className: &quot;title&quot;,
  value: title,
  disabled: isSaveInProgress,
  onChange: onTitleChange
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think that this makes the code easier to read (I don&#39;t need to resort to looking at the &lt;strong&gt;Props&lt;/strong&gt; constructor to see that &quot;title&quot; is a class name and not an ID or any other use for a string) &lt;em&gt;and&lt;/em&gt; means that it doesn&#39;t matter that the &quot;className&quot; argument moved from the start of the constructor argument list to the end, since the position of arguments doesn&#39;t matter when their names are used. (As an added benefit, this makes the code slightly more similar to the React component initialisation code that you might see in non-Bridge/C# projects, where JSON objects are used to set properties - but, here, we have the added benefit that&#39;s it all typed).&lt;/p&gt;

&lt;p&gt;This is a big step forward in terms of including additional information in the type system (and in terms of catching errors quickly - and as close to the root cause of the error as possible), meaning that I can more reliably use a component without having to know everything about how it works (which, in a lot of ways, is like the idea of coding against an interface - you want to know about how to communicate with an interface to get the desired result without having to know all of the details of its implementation).&lt;/p&gt;

&lt;p&gt;I&#39;m not completely happy with the code at this point, though. It feels like the &lt;strong&gt;Props&lt;/strong&gt; class has ballooned considerably from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Props
{
  public string ClassName;
  public bool Disabled;
  public string Content;
  public Action&amp;lt;string&amp;gt; OnChange;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Props
{
  public Props(
    string content,
    bool disabled,
    Action&amp;lt;string&amp;gt; onChange,
    string className = &quot;&quot;)
  {
    if (content == null)
      throw new ArgumentNullException(&quot;content&quot;);
    if (onChange == null)
      throw new ArgumentNullException(&quot;onChange&quot;);
    if (className == &quot;&quot;)
      throw new ArgumentException(&quot;className should not be set to a blank string&quot;);

    Content = content;
    Disabled = disabled;
    OnChange = onChange;
    ClassName = className;
  }

  /// &amp;lt;summary&amp;gt;
  /// This is optional and so may be null (if non-null, then it will never be blank)
  /// &amp;lt;/summary&amp;gt;
  public string ClassName { get; private set; }

  public bool Disabled { get; private set; }

  /// &amp;lt;summary&amp;gt;
  /// An input may not always have a value and so this may be blank (but it should never
  /// be null)
  /// &amp;lt;/summary&amp;gt;
  public string Content { get; private set; }

  /// &amp;lt;summary&amp;gt;
  /// This is mandatory and will never be null
  /// &amp;lt;/summary&amp;gt;
  public Action&amp;lt;string&amp;gt; OnChange { get; private set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While I am willing to make a certain trade-off between the cost of writing the code to begin with against the long term benefits of it being easier to quickly understand and then reason about*, I don&#39;t want to have to write any more of this monotonous form of code than absolutely necessary - in particular, I think I would get bored of writing &quot;This is mandatory and will never be null&quot; over and over again on different properties on different classes**.&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;(Since &quot;&lt;a href=&quot;https://blogs.msdn.microsoft.com/oldnewthing/20070406-00/?p=27343&quot;&gt;Code is read much more often than it is written, so plan accordingly&lt;/a&gt;&quot;, I strongly believe that a little extra writing effort is worth it to reduce the more-often-incurred reading effort).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;** &lt;em&gt;(I have personally written a lot of code that uses immutable, always-valid types and that was littered with these sorts of comments - while I definitely think it was worth it, I definitely HAVE gotten bored with writing &quot;This will never be null&quot; time after time after time).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But what alternative is there?&lt;/p&gt;

&lt;h3&gt;Working on the basis that null is &lt;em&gt;never&lt;/em&gt; allowed&lt;/h3&gt;

&lt;p&gt;Since this whole series is about &quot;The Dan Way&quot;, I think that it is entirely reasonable to introduce a library that I&#39;ve written at this point. It&#39;s a NuGet package for Bridge that makes it easier to write immutable types, such as the &lt;strong&gt;Props&lt;/strong&gt; class above: &quot;&lt;a href=&quot;https://www.nuget.org/packages/ProductiveRage.Immutable&quot;&gt;ProductiveRage.Immutable&lt;/a&gt;&quot;.&lt;/p&gt;

&lt;p&gt;If a class implements an empty interface &lt;strong&gt;IAmImmutable&lt;/strong&gt; then it may access extension methods that make the constructor easier to write. Something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Props : IAmImmutable
{
  public Props(
    string content,
    bool disabled,
    Action&amp;lt;string&amp;gt; onChange,
    string className = &quot;&quot;)
  {
    this.CtorSet(_ =&amp;gt; _.Content, content);
    this.CtorSet(_ =&amp;gt; _.Disabled, disabled);
    this.CtorSet(_ =&amp;gt; _.OnChange, onChange);
    this.CtorSet(_ =&amp;gt; _.ClassName, className);
  }
  public string ClassName { get; private set; }
  public bool Disabled { get; private set; }
  public string Content { get; private set; }
  public Action&amp;lt;string&amp;gt; OnChange { get; private set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The extension method is &quot;CtorSet&quot; and it takes a lambda that specifies a property on the class and it takes a new value for that property. The type of the property and the type of the new value must be consistent - so, although there&#39;s apparently a little magic involved, we&#39;re not sacrificing any type safety.&lt;/p&gt;

&lt;p&gt;One interesting feature of &quot;CtorSet&quot; is that it will never allow a null value. This means the comments from the &lt;strong&gt;Props&lt;/strong&gt; class along the lines of &quot;This will never be null&quot; are unnecessary because an &lt;strong&gt;IAmImmutable&lt;/strong&gt;-implementing class that sets all of its properties in its constructor will never have any null property values.&lt;/p&gt;

&lt;p&gt;This actually doesn&#39;t work for the &lt;strong&gt;Props&lt;/strong&gt; class we&#39;re looking at here since we want &quot;ClassName&quot; to be allowed to be null. To enable that, the library comes with a new struct - &lt;strong&gt;Optional&amp;lt;T&amp;gt;&lt;/strong&gt;. Any time that you want to have a constructor argument be null, you have to wrap its type in this struct - ie.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Props : IAmImmutable
{
  public Props(
    string content,
    bool disabled,
    Action&amp;lt;string&amp;gt; onChange,
    Optional&amp;lt;string&amp;gt; className = new Optional&amp;lt;string&amp;gt;())
  {
    this.CtorSet(_ =&amp;gt; _.Content, content);
    this.CtorSet(_ =&amp;gt; _.Disabled, disabled);
    this.CtorSet(_ =&amp;gt; _.OnChange, onChange);
    this.CtorSet(_ =&amp;gt; _.ClassName, className);
  }
  public Optional&amp;lt;string&amp;gt; ClassName { get; private set; }
  public bool Disabled { get; private set; }
  public string Content { get; private set; }
  public Action&amp;lt;string&amp;gt; OnChange { get; private set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once again, we&#39;ve made a step forward to encoding additional information in the class itself. In terms of being able to more easily reason about the code, this is a great win - classes such as these will never have null values to worry about; any property that may or may not have a value will be of type &lt;strong&gt;Optional&amp;lt;T&amp;gt;&lt;/strong&gt;, which has properties &quot;IsDefined&quot; (a boolean indicating whether or not it has a value) and &quot;Value&quot; (which is the value itself, so long as &quot;IsDefined&quot; is true).&lt;/p&gt;

&lt;p&gt;If you were in an argumentative mood, then you might say that &lt;strong&gt;Optional&amp;lt;T&amp;gt;&lt;/strong&gt; can&#39;t save you from nulls in all cases since any code that deals with them could choose not to check &quot;IsDefined&quot; and to just try to access &quot;className.Value&quot; in all cases. This is true, but this faulty style of calling code had to be explicitly written to &quot;work around&quot; the &lt;strong&gt;Optional&amp;lt;T&amp;gt;&lt;/strong&gt; wrapper. If the person who wrote it had sufficiently little interest to try to understand why &lt;strong&gt;Optional&amp;lt;T&amp;gt;&lt;/strong&gt; was used then they may need some help in getting back on to the right path in their programming. This wrapper type acts as a sign post at each point where a null may be encountered, if the sign posts are ignored then that&#39;s unfortunate (but the benefit remains that there &lt;em&gt;is&lt;/em&gt; a sign post for every potentially-null value whereas, in normal C# code, you need to be wary that nulls may leap out at you at any point, without warning).&lt;/p&gt;

&lt;p&gt;This change doesn&#39;t affect how you call the constructor if you used the named arguments approach from above, so the following works fine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new TextInput.Props(
  className: &quot;title&quot;,
  value: title,
  disabled: isSaveInProgress,
  onChange: onTitleChange
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as does:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new TextInput.Props(
  value: title,
  disabled: isSaveInProgress,
  onChange: onTitleChange
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wanted to really deliberately indicate that a &lt;strong&gt;TextInput&lt;/strong&gt; should have no title then you could use any of the following three -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// The explicit way
new TextInput.Props(
  className: Optional&amp;lt;string&amp;gt;.Missing,
  value: title,
  disabled: isSaveInProgress,
  onChange: onTitleChange
)

// The implicit way (there is an implicit cast from T to Optional&amp;lt;T&amp;gt;, which is why passing
// the string &quot;title&quot; in the earlier example works, because the &quot;title&quot; string is implicitly
// cast to an Optional&amp;lt;string&amp;gt; with value &quot;title&quot; - similarly null is implicitly cast to
// an Optional&amp;lt;string&amp;gt; with value null, which is the same as Optional&amp;lt;string&amp;gt;.Missing)
new TextInput.Props(
  className: null,
  value: title,
  disabled: isSaveInProgress,
  onChange: onTitleChange
)

// Using the struct&#39;s constructor - the most verbose and least-prefered way. Note that this
// is the only way that a &quot;Missing&quot; value may be specified as a constructor argument&#39;s
// default value, as may be seen in the Props constructor above (this is because default
// argument values must be compile time constants, which a new instance of a struct is but
// the static &quot;Missing&quot; property is not. Null can&#39;t be used as a constructor argument&#39;s
// default value for an Optional as the implicit cast is a runtime operation and so is
// not available at compile time).
new TextInput.Props(
  className: new Optional&amp;lt;string&amp;gt;(),
  value: title,
  disabled: isSaveInProgress,
  onChange: onTitleChange
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&#39;m &lt;em&gt;still&lt;/em&gt; not happy with this, though. I talked earlier about the ambiguity between null and blank string - for the &quot;Value&quot; property, this is solved since it can never be null now. It&#39;s valid for it to be a blank string (if there is no content in the input box) but it&#39;s not valid for it to be null (an &lt;strong&gt;ArgumentNullException&lt;/strong&gt; will be raised in the constructor for a null &quot;value&quot;). Problem solved. However, the &quot;ClassName&quot; property can be &quot;&lt;strong&gt;Optional&amp;lt;string&amp;gt;&lt;/strong&gt;.Missing&quot; (which is similar to null) or it can be a value that is a blank string. It would be much better to say that &quot;ClassName&quot; is &quot;Missing&quot; (meaning that it has no value and that the DOM element should have a &quot;class&quot; attribute at all) &lt;em&gt;or&lt;/em&gt; that it has a value that is not blank.&lt;/p&gt;

&lt;p&gt;One way to try to address this would be with &lt;em&gt;another&lt;/em&gt; type -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class NonBlankTrimmedString
{
  public NonBlankTrimmedString(string value)
  {
    if (string.IsNullOrWhiteSpace(value))
      throw new ArgumentException(&quot;Null, blank or whitespace-only value specified&quot;);
    Value = value.Trim();
  }

  /// &amp;lt;summary&amp;gt;
  /// This will never be null, blank or have any leading or trailing whitespace
  /// &amp;lt;/summary&amp;gt;
  public string Value { get; private set; }

  /// &amp;lt;summary&amp;gt;
  /// It&#39;s convenient to be able to pass a NonBlankTrimmedString instance as any argument
  /// that requires a string
  /// &amp;lt;/summary&amp;gt;
  public static implicit operator string(NonBlankTrimmedString value)
  {
    if (value == null)
      throw new ArgumentNullException(&quot;value&quot;);
    return value.Value;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I said that I wasn&#39;t keen on writing out more of this type of &quot;This will never be null..&quot; summary comment if I could avoid it, but the idea with this class it that it will be applicable in multiple places. So I have had to type &quot;This will never be null, blank or have any leading or trailing whitespace&quot; &lt;em&gt;once again&lt;/em&gt; but I will take advantage of this one comment over and over again throughout my code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now&lt;/em&gt; the &lt;strong&gt;TextInput.Props&lt;/strong&gt; class becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Props : IAmImmutable
{
  public Props(
    string content,
    bool disabled,
    Action&amp;lt;string&amp;gt; onChange,
    Optional&amp;lt;NonBlankTrimmedString&amp;gt; className = new Optional&amp;lt;NonBlankTrimmedString&amp;gt;())
  {
    this.CtorSet(_ =&amp;gt; _.Content, content);
    this.CtorSet(_ =&amp;gt; _.Disabled, disabled);
    this.CtorSet(_ =&amp;gt; _.OnChange, onChange);
    this.CtorSet(_ =&amp;gt; _.ClassName, className);
  }
  public Optional&amp;lt;NonBlankTrimmedString&amp;gt; ClassName { get; private set; }
  public bool Disabled { get; private set; }
  public string Content { get; private set; }
  public Action&amp;lt;string&amp;gt; OnChange { get; private set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wanted to instantiate one then you would need to change the calling code slightly - eg.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new TextInput.Props(
  className: new NonBlankTrimmedString(&quot;title&quot;),
  value: title,
  disabled: isSaveInProgress,
  onChange: onTitleChange
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;em&gt;does&lt;/em&gt; make this code a little more verbose. But we have the benefit that the &lt;strong&gt;Props&lt;/strong&gt; class contains more information about what is and isn&#39;t acceptable for its property values. Also, making the calling code more explicit like this forces the writer to consider whether an appropriate value will always be passed to it - they should be careful to pass null or &quot;&lt;strong&gt;Optional&amp;lt;NonBlankTrimmedString&amp;gt;&lt;/strong&gt;.Missing&quot; if they don&#39;t want to set a class name and to provide a populated, non-blank string if they &lt;em&gt;do&lt;/em&gt; want a class name.&lt;/p&gt;

&lt;p&gt;At this point, I&#39;m finally satisifed with the &lt;strong&gt;TextInput.Props&lt;/strong&gt; class!&lt;/p&gt;

&lt;p&gt;Note: This is probably the most controversial part of my recommended approach - if you&#39;re happy to consider making your classes immutable like this, for the reasons I outlined above (which, by the way, can be applied to &lt;em&gt;all&lt;/em&gt; classes in your code, not just props types for React components) and you&#39;re willing to consider the benefits and trade-offs of building up a more detailed type system (such as using &lt;strong&gt;Optional&amp;lt;NonBlankOrTrimmedString&amp;gt;&lt;/strong&gt; instead of just &quot;string&quot; and only using &quot;string&quot; to mean &quot;non-nullable string&quot;) then I think that you&#39;ll enjoy the rest of what I&#39;ve got to say.&lt;/p&gt;

&lt;p&gt;I want to extend this ostracising of nulls to the &lt;strong&gt;TextInput&lt;/strong&gt; class itself, though. At the end of &lt;a href=&quot;http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-part-two&quot;&gt;Part Two&lt;/a&gt;, the component looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.Html5;
using Bridge.React;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Components
{
  public class TextInput : StatelessComponent&amp;lt;TextInput.Props&amp;gt;
  {
    public TextInput(Props props) : base(props) { }

    public override ReactElement Render()
    {
      return DOM.Input(new InputAttributes
      {
        Type = InputType.Text,
        ClassName = props.ClassName,
        Disabled = props.Disabled,
        Value = props.Content,
        OnChange = e =&amp;gt; props.OnChange(e.CurrentTarget.Value)
      });
    }

    public class Props : IAmImmutable
    {
      public string ClassName;
      public bool Disabled;
      public string Content;
      public Action&amp;lt;string&amp;gt; OnChange;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My problem with this is that it&#39;s possible to call the constructor with a null &quot;props&quot; value - but, if you do so, then the &quot;Render&quot; method will throw a null reference exception. Unfortunately, it&#39;s not possible to check for a null &quot;props&quot; value in the component&#39;s constructor due to the way that the Bridge / React bindings work with the React library; the constructor is never actually executed and so a null-check in there would never run. What I suggest is that the &lt;strong&gt;Props&lt;/strong&gt; constructor arguments be repeated in the component&#39;s constructor -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.Html5;
using Bridge.React;
using BridgeReactTutorial.API;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Components
{
  public class TextInput : StatelessComponent&amp;lt;TextInput.Props&amp;gt;
  {
    public TextInput(
      string content,
      bool disabled,
      Action&amp;lt;string&amp;gt; onChange,
      Optional&amp;lt;NonBlankTrimmedString&amp;gt; className = new Optional&amp;lt;NonBlankTrimmedString&amp;gt;())
      : base(new Props(content, disabled, onChange, className)) { }

    public override ReactElement Render()
    {
      return DOM.Input(new InputAttributes
      {
        Type = InputType.Text,
        ClassName = props.ClassName.IsDefined ? props.ClassName.Value : null,
        Disabled = props.Disabled,
        Value = props.Content,
        OnChange = e =&amp;gt; props.OnChange(e.CurrentTarget.Value)
      });
    }

    public class Props : IAmImmutable
    {
      public Props(
        string content,
        bool disabled,
        Action&amp;lt;string&amp;gt; onChange,
        Optional&amp;lt;NonBlankTrimmedString&amp;gt; className)
      {
        this.CtorSet(_ =&amp;gt; _.Content, content);
        this.CtorSet(_ =&amp;gt; _.Disabled, disabled);
        this.CtorSet(_ =&amp;gt; _.OnChange, onChange);
        this.CtorSet(_ =&amp;gt; _.ClassName, className);
      }
      public Optional&amp;lt;NonBlankTrimmedString&amp;gt; ClassName { get; private set; }
      public bool Disabled { get; private set; }
      public string Content { get; private set; }
      public Action&amp;lt;string&amp;gt; OnChange { get; private set; }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, this &lt;em&gt;has&lt;/em&gt; expanded the amount of code that is required within the component class. But the real effect is magnified by the line-wrapping that I use on my blog post code samples - in Visual Studio, I would likely have the constructor arguments all on one line.&lt;/p&gt;

&lt;p&gt;If we can get past the cost of additional code within the component then we get two benefits. The first is that it&#39;s no longer possible for the &lt;strong&gt;TextInput&lt;/strong&gt; to ever have a null &quot;props&quot; reference as a &lt;strong&gt;Props&lt;/strong&gt; reference is no longer passed in, but is created in the call to the base constructor by using the individual arguments passed to the &lt;strong&gt;TextInput&lt;/strong&gt; constructor. The second benefit is more marginal, but still nice (especially since it partially offsets the additional code added above) - the way that a new &lt;strong&gt;TextInput&lt;/strong&gt; was declared previously required duplication of the word &quot;&lt;strong&gt;TextInput&lt;/strong&gt;&quot; (with &quot;new &lt;strong&gt;TextInput&lt;/strong&gt;&quot; and &quot;new &lt;strong&gt;TextInput.Props&lt;/strong&gt;&quot;) -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new TextInput(new TextInput.Props
{
  ClassName = &quot;title&quot;
  Disabled = props.Disabled,
  Content = props.Content,
  OnChange = props.OnChange
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the updated &lt;strong&gt;TextInput&lt;/strong&gt; implementation, this duplication is avoided -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new TextInput(
  className: new NonBlankTrimmedString(&quot;title&quot;),
  disabled: props.Disabled,
  content: props.Content,
  onChange: props.OnChange
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even without this (admittedly minor) second benefit, I would still be much happier with the new version of &lt;strong&gt;TextInput&lt;/strong&gt;. The additional code (the final version is definitely somewhat longer than the previous version) pays for itself in what it communicates to someone who wishes to consume that component. However, one of the themes that I&#39;ve been pushing in this series is that components should be dumb and that the real logic of the application should be outside of any UI classes; in the application code that will deal with the complications of the business logic and how to deal with user interactions.. if there is a way to move some of the syntactic noise around component creation away from the complicated library code and into the dumb components, then that seems a sensible trade-off. And that&#39;s what has been done here!&lt;/p&gt;

&lt;p&gt;There&#39;s actually a &lt;em&gt;third&lt;/em&gt; benefit to using this &quot;&lt;strong&gt;IAmImmutable&lt;/strong&gt; style&quot; for writing these data types, when it comes to passing events from the simple components all the way up to the top of the component tree, where each &quot;OnChange&quot; (or whatever) adds increasing detail on the way up - but I&#39;ll come to that later on, first I want to address a burning question:&lt;/p&gt;

&lt;h3&gt;If it&#39;s so effective to work on the basis that null should not be allowed anywhere in components and their Props, why not use this approach elsewhere in the application?&lt;/h3&gt;

&lt;p&gt;Trick question! I am convinced that it &lt;em&gt;does&lt;/em&gt; make sense to use &lt;strong&gt;IAmImmutable&lt;/strong&gt; for data types &lt;em&gt;throughout&lt;/em&gt; the application and to make null arguments and properties unacceptable in &lt;em&gt;all&lt;/em&gt; places.&lt;/p&gt;

&lt;p&gt;One obvious example is in the &quot;SaveMessage&quot; method in the &lt;strong&gt;MessageApi&lt;/strong&gt; class. Currently, it starts like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private RequestId SaveMessage(MessageDetails message, Action optionalSaveCompletedCallback)
{
  if (message == null)
    throw new ArgumentNullException(&quot;message&quot;);
  if (string.IsNullOrWhiteSpace(message.Title))
    throw new ArgumentException(&quot;A title value must be provided&quot;);
  if (string.IsNullOrWhiteSpace(message.Content))
    throw new ArgumentException(&quot;A content value must be provided&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not accepting a null &lt;strong&gt;MessageDetails&lt;/strong&gt; instance is good - if someone tried to call this method with a null &quot;message&quot; argument then it should be rejected immediately. However, it feels wrong that it&#39;s necesary to then check the &quot;Title&quot; and &quot;Content&quot; properties - should there ever be a case where a &lt;strong&gt;MessageDetails&lt;/strong&gt; instance exists &lt;em&gt;without&lt;/em&gt; these values being populated? In this application, the answer is no - the &lt;strong&gt;MessageEditor&lt;/strong&gt; component only allows a new message to be saved if both its Title and Content have values.&lt;/p&gt;

&lt;p&gt;This is another opportunity to encode this additional information into the type system. Instead of &lt;strong&gt;MessageDetails&lt;/strong&gt; being implemented like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace BridgeReactTutorial.ViewModels
{
  public class MessageDetails
  {
    public string Title;
    public string Content;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should be rewritten thusly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using BridgeReactTutorial.API;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.ViewModels
{
  public class MessageDetails : IAmImmutable
  {
    public MessageDetails(NonBlankTrimmedString title, NonBlankTrimmedString content)
    {
      this.CtorSet(_ =&amp;gt; _.Title, title);
      this.CtorSet(_ =&amp;gt; _.Content, content);
    }
    public NonBlankTrimmedString Title { get; private set; }
    public NonBlankTrimmedString Content { get; private set; }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the &quot;SaveMessage&quot; validation is much simpler - all that is required is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private RequestId SaveMessage(MessageDetails message, Action optionalSaveCompletedCallback)
{
  if (message == null)
    throw new ArgumentNullException(&quot;message&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since a &lt;strong&gt;MessageDetails&lt;/strong&gt; instance may no longer exist with missing Title or Content values, the property validation in &quot;SaveMessage&quot; is unnecessary. This has the benefit that there is less code at the point at which data is retrieved from a &lt;strong&gt;MessageDetails&lt;/strong&gt; instance, which goes some way to offsetting the additional code required in defining the type. The real benefit, though, to removing that code is not just reducing line count but in removing potential duplication (the property validation code may have appeared elsewhere in the application if there were other methods that processed &lt;strong&gt;MessageDetails&lt;/strong&gt; instances) &lt;em&gt;and&lt;/em&gt; baking assumptions into the type system, rather than leaving them be implicit. Before, it was probably safe to assume that Title and Content would always have values since the code that would create a &lt;strong&gt;MessageDetails&lt;/strong&gt; instance would always give them values - however, that was &lt;em&gt;only&lt;/em&gt; an assumption and you would have had to have read all of the code that created &lt;strong&gt;MessageDetails&lt;/strong&gt; instances to be confident. With this arrangement, you &lt;em&gt;know&lt;/em&gt; that a &lt;strong&gt;MessageDetails&lt;/strong&gt; has both Title and Content values at all times, since it&#39;s not possible for an instance to be created that doesn&#39;t!&lt;/p&gt;

&lt;p&gt;When I talk about code being easy to reason about, it&#39;s not usually in terms of the dozen or so lines of code that are directly in front of you, it&#39;s how the objects and methods that you&#39;re dealing with may interact with the rest of the system and what assumptions are being made. Knowing that a &lt;strong&gt;MessageDetails&lt;/strong&gt; instance will always be valid is extremely helpful. Knowing that any code that attempts to create a &lt;strong&gt;MessageDetails&lt;/strong&gt; with invalid data will fail immeditely, rather than cause an error later on (when the instance is presumed to be valid but turns out not to be) is extremely helpful. Knowing that a type is immutable and that it won&#39;t be changed &quot;behind the scenes&quot; when you pass it off to another method is extremely helpful - when types are mutable and you pass an instance to another method to read, you can&#39;t be sure whether the method will &lt;em&gt;only&lt;/em&gt; read it or whether it will manipulate it; there&#39;s no way to tell from the method signature. Making mutations explicit by making types immutable is another big win for being able to reason about code.&lt;/p&gt;

&lt;p&gt;Speaking of dealing with mutation brings me smoothly onto the third benefit of &lt;strong&gt;IAmImmutable&lt;/strong&gt; that I hinted at earlier. Currently, the &lt;strong&gt;MessageEditor&lt;/strong&gt; component in our example app looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.React;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Components
{
  public class MessageEditor : StatelessComponent&amp;lt;MessageEditor.Props&amp;gt;
  {
    public MessageEditor(Props props) : base(props) { }

    public override ReactElement Render()
    {
      var formIsInvalid =
        !string.IsNullOrWhiteSpace(props.Message.Title.ValidationError) ||
        !string.IsNullOrWhiteSpace(props.Message.Content.ValidationError);

      return DOM.FieldSet(new FieldSetAttributes { ClassName = props.ClassName },
        DOM.Legend(null, props.Message.Caption),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Title&quot;),
        new ValidatedTextInput(new ValidatedTextInput.Props
        {
          ClassName = &quot;title&quot;,
          Disabled = props.Message.IsSaveInProgress,
          Content = props.Message.Title.Text,
          OnChange = newTitle =&amp;gt; props.OnChange(new MessageEditState
          {
            Title = new TextEditState { Text = newTitle },
            Content = props.Message.Content
          }),
          ValidationMessage = props.Message.Title.ValidationError
        }),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Content&quot;),
        new ValidatedTextInput(new ValidatedTextInput.Props
        {
          ClassName = &quot;content&quot;,
          Disabled = props.Message.IsSaveInProgress,
          Content = props.Message.Content.Text,
          OnChange = newContent =&amp;gt; props.OnChange(new MessageEditState
          {
            Title = props.Message.Title,
            Content = new TextEditState { Text = newContent },
          }),
          ValidationMessage = props.Message.Content.ValidationError
        }),
        DOM.Button(
        new ButtonAttributes
        {
          Disabled = formIsInvalid || props.Message.IsSaveInProgress,
          OnClick = e =&amp;gt; props.OnSave()
        },
        &quot;Save&quot;
        )
      );
    }

    public class Props
    {
      public string ClassName;
      public MessageEditState Message;
      public Action&amp;lt;MessageEditState&amp;gt; OnChange;
      public Action OnSave;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing I&#39;m going to do is change the &lt;strong&gt;Props&lt;/strong&gt; type and the component&#39;s constructor in the same way as I did for the &lt;strong&gt;TextInput&lt;/strong&gt; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.React;
using BridgeReactTutorial.API;
using BridgeReactTutorial.ViewModels;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Components
{
  public class MessageEditor : StatelessComponent&amp;lt;MessageEditor.Props&amp;gt;
  {
    public MessageEditor(
      MessageEditState message,
      Action&amp;lt;MessageEditState&amp;gt; onChange,
      Action onSave,
      Optional&amp;lt;NonBlankTrimmedString&amp;gt; className = new Optional&amp;lt;NonBlankTrimmedString&amp;gt;())
      : base(new Props(className, message, onChange, onSave)) { }

    public override ReactElement Render()
    {
      var formIsInvalid =
        !string.IsNullOrWhiteSpace(props.Message.Title.ValidationError) ||
        !string.IsNullOrWhiteSpace(props.Message.Content.ValidationError);

      return DOM.FieldSet(
        new FieldSetAttributes {
          ClassName = props.ClassName.IsDefined ? props.ClassName.Value : null
        },
        DOM.Legend(null, props.Message.Caption),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Title&quot;),
        new ValidatedTextInput(new ValidatedTextInput.Props
        {
          ClassName = &quot;title&quot;,
          Disabled = props.Message.IsSaveInProgress,
          Content = props.Message.Title.Text,
          OnChange = newTitle =&amp;gt; props.OnChange(new MessageEditState
          {
            Title = new TextEditState { Text = newTitle },
            Content = props.Message.Content
          }),
          ValidationMessage = props.Message.Title.ValidationError
        }),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Content&quot;),
        new ValidatedTextInput(new ValidatedTextInput.Props
        {
          ClassName = &quot;content&quot;,
          Disabled = props.Message.IsSaveInProgress,
          Content = props.Message.Content.Text,
          OnChange = newContent =&amp;gt; props.OnChange(new MessageEditState
          {
            Title = props.Message.Title,
            Content = new TextEditState { Text = newContent },
          }),
          ValidationMessage = props.Message.Content.ValidationError
        }),
        DOM.Button(
        new ButtonAttributes
        {
          Disabled = formIsInvalid || props.Message.IsSaveInProgress,
          OnClick = e =&amp;gt; props.OnSave()
        },
        &quot;Save&quot;
        )
      );
    }

    public class Props : IAmImmutable
    {
      public Props(
        Optional&amp;lt;NonBlankTrimmedString&amp;gt; className,
        MessageEditState message,
        Action&amp;lt;MessageEditState&amp;gt; onChange,
        Action onSave)
      {
        this.CtorSet(_ =&amp;gt; _.ClassName, className);
        this.CtorSet(_ =&amp;gt; _.Message, message);
        this.CtorSet(_ =&amp;gt; _.OnChange, onChange);
        this.CtorSet(_ =&amp;gt; _.OnSave, onSave);
      }
      public Optional&amp;lt;NonBlankTrimmedString&amp;gt; ClassName { get; private set; }
      public MessageEditState Message { get; private set; }
      public Action&amp;lt;MessageEditState&amp;gt; OnChange { get; private set; }
      public Action OnSave { get; private set; }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that the &lt;strong&gt;MessageEditor&lt;/strong&gt; instantiation code changes slightly from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new MessageEditor(new MessageEditor.Props
{
  ClassName = &quot;message&quot;,
  Message = state.Message,
  OnChange = newState =&amp;gt; props.Dispatcher.HandleViewAction(
    UserEditRequested.For(newState)
  ),
  OnSave = () =&amp;gt; props.Dispatcher.HandleViewAction(
    SaveRequested.For(
      new MessageDetails(
        new NonBlankTrimmedString(state.Message.Title.Text),
        new NonBlankTrimmedString(state.Message.Content.Text)
      )
    )
  )
}),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new MessageEditor(
  className: new NonBlankTrimmedString(&quot;message&quot;),
  message:  state.Message,
  onChange: newState =&amp;gt; props.Dispatcher.HandleViewAction(
    UserEditRequested.For(newState)
  ),
  onSave: () =&amp;gt; props.Dispatcher.HandleViewAction(
    SaveRequested.For(
      new MessageDetails(
        new NonBlankTrimmedString(state.Message.Title.Text),
        new NonBlankTrimmedString(state.Message.Content.Text)
      )
    )
  )
),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are several steps that need following now until I can reveal my point,  so bear with me. I&#39;m going to change the &lt;strong&gt;MessageEditState&lt;/strong&gt; data type, in the same way as I did the &lt;strong&gt;MessageDetails&lt;/strong&gt; - from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace BridgeReactTutorial.ViewModels
{
  public class MessageEditState
  {
    public string Caption;
    public TextEditState Title;
    public TextEditState Content;
    public bool IsSaveInProgress;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using BridgeReactTutorial.API;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.ViewModels
{
  public class MessageEditState : IAmImmutable
  {
    public MessageEditState(
      NonBlankTrimmedString caption,
      TextEditState title,
      TextEditState content,
      bool isSaveInProgress)
    {
      this.CtorSet(_ =&amp;gt; _.Caption, caption);
      this.CtorSet(_ =&amp;gt; _.Title, title);
      this.CtorSet(_ =&amp;gt; _.Content, content);
      this.CtorSet(_ =&amp;gt; _.IsSaveInProgress, isSaveInProgress);
    }
    public NonBlankTrimmedString Caption { get; private set; }
    public TextEditState Title { get; private set; }
    public TextEditState Content { get; private set; }
    public bool IsSaveInProgress { get; private set; }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And do the same with &lt;strong&gt;TextEditState&lt;/strong&gt;, from -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace BridgeReactTutorial.ViewModels
{
    public class TextEditState
    {
        public string Text;
        public string ValidationError;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using BridgeReactTutorial.API;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.ViewModels
{
  public class TextEditState : IAmImmutable
  {
    public TextEditState(
      string text,
      Optional&amp;lt;NonBlankTrimmedString&amp;gt; validationError = new Optional&amp;lt;NonBlankTrimmedString&amp;gt;())
    {
      this.CtorSet(_ =&amp;gt; _.Text, text);
      this.CtorSet(_ =&amp;gt; _.ValidationError, validationError);
    }
    public string Text { get; private set; }
    public Optional&amp;lt;NonBlankTrimmedString&amp;gt; ValidationError { get; private set; }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&#39;m going to change the &lt;strong&gt;ValidatedTextInput&lt;/strong&gt; to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.React;
using BridgeReactTutorial.API;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Components
{
  public class ValidatedTextInput : StatelessComponent&amp;lt;ValidatedTextInput.Props&amp;gt;
  {
    public ValidatedTextInput(
      bool disabled,
      string content,
      Action&amp;lt;string&amp;gt; onChange,
      Optional&amp;lt;NonBlankTrimmedString&amp;gt; validationMessage,
      Optional&amp;lt;NonBlankTrimmedString&amp;gt; className = new Optional&amp;lt;NonBlankTrimmedString&amp;gt;())
      : base(new Props(className, disabled, content, onChange, validationMessage)) { }

    public override ReactElement Render()
    {
      var className = props.ClassName;
      if (props.ValidationMessage.IsDefined)
        className = className.Add(&quot; &quot;, new NonBlankTrimmedString(&quot;invalid&quot;));
      return DOM.Span(new Attributes { ClassName = className.ToStringIfDefined() },
        new TextInput(
          className: props.ClassName,
          disabled: props.Disabled,
          content: props.Content,
          onChange: props.OnChange
        ),
        props.ValidationMessage.IsDefined
        ? DOM.Span(
          new Attributes { ClassName = &quot;validation-message&quot; },
          props.ValidationMessage.ToStringIfDefined()
        )
        : null
      );
    }

    public class Props : IAmImmutable
    {
      public Props(
        Optional&amp;lt;NonBlankTrimmedString&amp;gt; className,
        bool disabled,
        string content,
        Action&amp;lt;string&amp;gt; onChange,
        Optional&amp;lt;NonBlankTrimmedString&amp;gt; validationMessage)
      {
        this.CtorSet(_ =&amp;gt; _.ClassName, className);
        this.CtorSet(_ =&amp;gt; _.Disabled, disabled);
        this.CtorSet(_ =&amp;gt; _.Content, content);
        this.CtorSet(_ =&amp;gt; _.OnChange, onChange);
        this.CtorSet(_ =&amp;gt; _.ValidationMessage, validationMessage);
      }
      public Optional&amp;lt;NonBlankTrimmedString&amp;gt; ClassName { get; private set; }
      public bool Disabled { get; private set; }
      public string Content { get; private set; }
      public Action&amp;lt;string&amp;gt; OnChange { get; private set; }
      public Optional&amp;lt;NonBlankTrimmedString&amp;gt; ValidationMessage { get; private set; }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. which requires a new class be added to the &quot;API&quot; folder with some extension methods to make dealing with &lt;strong&gt;Optional&amp;lt;NonBlankTrimmedString&amp;gt;&lt;/strong&gt; a little nicer -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.API
{
  public static class OptionalNonBlankTrimmedStringExtensions
  {
    /// &amp;lt;summary&amp;gt;
    /// If the Optional NonBlankTrimmedString has a value then it will be unwrapped directly
    /// into a string - if not, the null will be returned (this is one of the few places
    /// where null will be an acceptable value in the app and it should be only used when
    /// integrating with code that expects nulls - such as when setting attributes via
    /// React html element factories)
    /// &amp;lt;/summary&amp;gt;
    public static string ToStringIfDefined(this Optional&amp;lt;NonBlankTrimmedString&amp;gt; source)
    {
      return source.IsDefined ? source.Value : null;
    }

    /// &amp;lt;summary&amp;gt;
    /// This will join two Optional NonBlankTrimmedString with a specified delimiter if
    /// they both have values. If only one of them has a value then this will be returned
    /// unaltered. If neither of them have a value then a Missing value will be returned.
    /// &amp;lt;/summary&amp;gt;
    public static Optional&amp;lt;NonBlankTrimmedString&amp;gt; Add(
      this Optional&amp;lt;NonBlankTrimmedString&amp;gt; source,
      string delimiter,
      Optional&amp;lt;NonBlankTrimmedString&amp;gt; other)
    {
      if (delimiter == null)
        throw new ArgumentNullException(&quot;delimiter&quot;);

      if (!source.IsDefined &amp;amp;&amp;amp; !other.IsDefined)
        return Optional&amp;lt;NonBlankTrimmedString&amp;gt;.Missing;
      else if (!source.IsDefined)
        return other;
      else if (!other.IsDefined)
        return source;

      return new NonBlankTrimmedString(source.Value.Value + delimiter + other.Value.Value);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and a further implicit operator adding to the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /// &amp;lt;summary&amp;gt;
    /// It&#39;s convenient to be able to pass a NonBlankTrimmedString instance as any argument
    /// that requires a ReactElement-or-string, such as for the children array of the React
    /// DOM component factories
    /// &amp;lt;/summary&amp;gt;
    public static implicit operator Any&amp;lt;ReactElement, string&amp;gt;(NonBlankTrimmedString value)
    {
        if (value == null)
            throw new ArgumentNullException(&quot;value&quot;);
        return value.Value;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, now I&#39;m finally able to demonstrate this mysterious third benefit. The &quot;OnChange&quot; lambdas which were provided as &lt;strong&gt;ValidatedTextInput.Props&lt;/strong&gt; values by the &lt;strong&gt;MessageEditor&lt;/strong&gt;&#39;s &quot;Render&quot; method were previously specified like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OnChange = newTitle =&amp;gt; props.OnChange(new MessageEditState
{
  Title = new TextEditState { Text = newTitle },
  Content = props.Message.Content
})

OnChange = newContent =&amp;gt; props.OnChange(new MessageEditState
{
  Title = props.Message.Title,
  Content = new TextEditState { Text = newContent },
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within each &quot;OnChange&quot;, we want to create a new &lt;strong&gt;MessageEditState&lt;/strong&gt; instance with one of the properties changed. However, it get arduous having to repeat &lt;em&gt;all&lt;/em&gt; of the property names each time that you want to change a single property - here it&#39;s not &lt;em&gt;that&lt;/em&gt; bad because there are only two properties (&quot;Title&quot; and &quot;Content&quot;), but on classes with more properties this is annoying and, worse, error-prone.&lt;/p&gt;

&lt;p&gt;Now that &lt;strong&gt;MessageEditState&lt;/strong&gt; implements &lt;strong&gt;IAmImmutable&lt;/strong&gt;, we can take advantage of another extension method available; &quot;With&quot;. This takes an argument that specifies the property to change and it takes an argument for the new property value. This means that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OnChange = newTitle =&amp;gt; props.OnChange(new MessageEditState
{
  Title = new TextEditState { Text = newTitle },
  Content = props.Message.Content
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is replaced with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OnChange = newTitle =&amp;gt; props.OnChange(
   props.Message.With(_ =&amp;gt; _.Title, new TextEditState(newTitle))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OnChange = newContent =&amp;gt; props.OnChange(new MessageEditState
{
  Title = props.Message.Title,
  Content = new TextEditState { Text = newContent }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is replaced with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OnChange = newContent =&amp;gt; props.OnChange(
  props.Message.With(_ =&amp;gt; _.Content, new TextEditState(newContent))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(Again, I&#39;m only wrapping these lines for the sake of the formatting on my blog - if I was writing this code in Visual Studio then I would make those a single line each).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &quot;With&quot; function takes an instance of an &lt;strong&gt;IAmImmutable&lt;/strong&gt;-implementing class, clones it but changes the specified property value - unless the new value is the same as the old value, in which case it returns the original instance unaltered.&lt;/p&gt;

&lt;p&gt;All of these changes combined mean that the &lt;strong&gt;MessageEditor&lt;/strong&gt; component now becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.React;
using BridgeReactTutorial.API;
using BridgeReactTutorial.ViewModels;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Components
{
  public class MessageEditor : StatelessComponent&amp;lt;MessageEditor.Props&amp;gt;
  {
    public MessageEditor(
      MessageEditState message,
      Action&amp;lt;MessageEditState&amp;gt; onChange,
      Action onSave,
      Optional&amp;lt;NonBlankTrimmedString&amp;gt; className = new Optional&amp;lt;NonBlankTrimmedString&amp;gt;())
      : base(new Props(className, message, onChange, onSave)) { }

    public override ReactElement Render()
    {
      var formIsInvalid =
        props.Message.Title.ValidationError.IsDefined ||
        props.Message.Content.ValidationError.IsDefined;

      return DOM.FieldSet(
        new FieldSetAttributes { ClassName = props.ClassName.ToStringIfDefined() },
        DOM.Legend(null, props.Message.Caption),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Title&quot;),
        new ValidatedTextInput(
          className: new NonBlankTrimmedString(&quot;title&quot;),
          disabled: props.Message.IsSaveInProgress,
          content: props.Message.Title.Text,
          onChange: newTitle =&amp;gt; props.OnChange(
            props.Message.With(_ =&amp;gt; _.Title, new TextEditState(newTitle))
          ),
          validationMessage: props.Message.Title.ValidationError
        ),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Content&quot;),
        new ValidatedTextInput(
          className: new NonBlankTrimmedString(&quot;content&quot;),
          disabled: props.Message.IsSaveInProgress,
          content: props.Message.Content.Text,
          onChange: newContent =&amp;gt; props.OnChange(
            props.Message.With(_ =&amp;gt; _.Content, new TextEditState(newContent))
          ),
          validationMessage: props.Message.Content.ValidationError
        ),
        DOM.Button(
        new ButtonAttributes
        {
          Disabled = formIsInvalid || props.Message.IsSaveInProgress,
          OnClick = e =&amp;gt; props.OnSave()
        },
        &quot;Save&quot;
        )
      );
    }

    public class Props : IAmImmutable
    {
      public Props(
        Optional&amp;lt;NonBlankTrimmedString&amp;gt; className,
        MessageEditState message,
        Action&amp;lt;MessageEditState&amp;gt; onChange,
        Action onSave)
      {
        this.CtorSet(_ =&amp;gt; _.ClassName, className);
        this.CtorSet(_ =&amp;gt; _.Message, message);
        this.CtorSet(_ =&amp;gt; _.OnChange, onChange);
        this.CtorSet(_ =&amp;gt; _.OnSave, onSave);
      }
      public Optional&amp;lt;NonBlankTrimmedString&amp;gt; ClassName { get; private set; }
      public MessageEditState Message { get; private set; }
      public Action&amp;lt;MessageEditState&amp;gt; OnChange { get; private set; }
      public Action OnSave { get; private set; }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;One more example&lt;/h3&gt;

&lt;p&gt;Before moving on, I want to apply these changes to one more component to really drive the point home.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;MessageHistory&lt;/strong&gt; component as it currently stands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Linq;
using Bridge.React;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Components
{
  public class MessageHistory : StatelessComponent&amp;lt;MessageHistory.Props&amp;gt;
  {
    public MessageHistory(Props props) : base(props) { }

    public override ReactElement Render()
    {
      var className = props.ClassName;
      if (!props.Messages.Any())
        className = (className + &quot; zero-messages&quot;).Trim();

      // Any time a set of child components is dynamically-created (meaning that the
      // numbers of items may vary from one render to another), each must have a unique
      // &quot;Key&quot; property set (this may be a int or a string). Here, this is simple as
      // each message tuple is a unique ID and the contents of that message.
      var messageElements = props.Messages
        .Select(idAndMessage =&amp;gt; DOM.Div(new Attributes { Key = idAndMessage.Item1 },
        DOM.Span(new Attributes { ClassName = &quot;title&quot; }, idAndMessage.Item2.Title),
        DOM.Span(new Attributes { ClassName = &quot;content&quot; }, idAndMessage.Item2.Content)
      ));

      // When child components are specified (as they are through the second argument of
      // DOM.Div), the argument is of type Any&amp;lt;ReactElement, string&amp;gt;[] (meaning that each
      // element may be another component or it may be a simple text value)
      // - The React bindings have an extension method that transforms an IEnumerable set
      //   of components (such as &quot;messageElements&quot;) into an Any&amp;lt;ReactElement, string&amp;gt;[]
      return DOM.FieldSet(new FieldSetAttributes { ClassName = className },
        DOM.Legend(null, &quot;Message History&quot;),
        DOM.Div(null, messageElements.ToChildComponentArray())
      );
    }

    public class Props
    {
      public string ClassName;
      public IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; Messages;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despite this appearing very simple at first glance, there are various implicit assumptions that you should be aware of. Firstly, it is assumed that &quot;props&quot; will never be null (&quot;Render&quot; will throw an exception if this is not the case). It is also assumed that &quot;props.ClassName&quot; &lt;em&gt;may&lt;/em&gt; be null (and, technically, it may also be a blank string, though this is not desirable) while &quot;props.Messages&quot; should &lt;em&gt;not&lt;/em&gt; null. Nor should &quot;props.Messages&quot; contain any tuples with a null &lt;strong&gt;MessageDetails&lt;/strong&gt; instance. But these assumptions are neither documented nor enforced.&lt;/p&gt;

&lt;p&gt;By this point, we&#39;ve seen several examples of how to prevent &quot;props&quot; being null (ie. require that the props constructor arguments be passed as the component&#39;s constructor arguments) and we&#39;ve seen how to better represent &lt;strong&gt;Props&lt;/strong&gt; to allow &quot;ClassName&quot; to be optional but for &quot;Messages&quot; to not be (&quot;ClassName&quot; should be an &lt;strong&gt;Optional&amp;lt;NonBlankTrimmedString&amp;gt;&lt;/strong&gt;). But there are two further tricks we can use for the &lt;strong&gt;MessageHistory.Props&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Firstly, &lt;strong&gt;IEnumerable&lt;/strong&gt; is too loose for my liking - technically, there are no guarantees that an &lt;strong&gt;IEnumerable&lt;/strong&gt; will report the same information if enumerated multiple times and there are definitely no guarantees that it won&#39;t contain any null references. I want consistency and I want a life free from null. The &lt;a href=&quot;https://www.nuget.org/packages/ProductiveRage.Immutable&quot;&gt;ProductiveRage.Immutable&lt;/a&gt; library contains another handy class for this sort of thing; &lt;strong&gt;Set&amp;lt;T&amp;gt;&lt;/strong&gt;. This is essentially an ordered list of items of type &quot;T&quot; that is immutable and that will never contain any null values. If you want a set of items that may or may not have values of type &quot;T&quot; then you need the list type to be &lt;strong&gt;Set&amp;lt;Optional&amp;lt;T&amp;gt;&amp;gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(I will confess that this may not be the most-well-named of all classes, since some mathematical circles like a &quot;Set&quot; to be a group of unique items that are likely not ordered.. but I wanted a convenient short name and &lt;strong&gt;List&amp;lt;T&amp;gt;&lt;/strong&gt; already has a well-understood definition - &lt;strong&gt;NonNullImmutableList&amp;lt;T&amp;gt;&lt;/strong&gt; was in the running, but I ideally wanted something shorter).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The second tweak that I want to make is to replace the &lt;strong&gt;Tuple&amp;lt;int, MessageDetails&amp;gt;&lt;/strong&gt; - in part, again, because there is no guarantee that the second item in the pair will not be null but also because I don&#39;t like the &quot;Item1&quot; and &quot;Item2&quot; property names. I think it&#39;s just one more thing to mentally translate (&quot;Oh yes, Item1 means Key and Item2 means Message&quot;). So I&#39;m going to extend the type system again.&lt;/p&gt;

&lt;p&gt;When considering a simple API, the common actions are &quot;Create&quot;, &quot;Read&quot;, &quot;Update&quot;, &quot;Delete&quot;. When creating a new item (like when we save a new message in our example application), we don&#39;t have a unique key for the new message - that will be generated by the persistence layer as part of the save process. When we read values (to display existing messages in the &lt;strong&gt;MessageHistory&lt;/strong&gt;, for example), we &lt;em&gt;will&lt;/em&gt; have access to unique keys - the persistence layer will be reading data from wherever the data is stored and it will be able to draw the keys out along with the data. When updating an existing record, we should know what its key is, since we will have performed a read action in order to get the currently-persisted state for the record. Similarly, when requesting a delete, we will have the key from a previous read action, in order to know what record to remove.&lt;/p&gt;

&lt;p&gt;I&#39;ve seen object models before which try to have a single data type to use in all of the Create, Read and Update cases. This would be like our &lt;strong&gt;MessageDetails&lt;/strong&gt; having a &quot;Key&quot;, &quot;Title&quot; and &quot;Content&quot;. However, sometimes the &quot;Key&quot; would be null because it would be unknown (when generating a brand new &lt;strong&gt;MessageDetails&lt;/strong&gt; instance to pass to &quot;SaveMessage&quot;, for example). I don&#39;t like this. The sometimes-Key-is-null-and-sometimes-it-isn&#39;t is an unnecessary complication and it means that there are places where we require a Key but can&#39;t guarantee (through the type system) that the reference that we have will have a non-null Key value. I think it&#39;s much better to have &lt;em&gt;two&lt;/em&gt; data types; one for a record that has been persisted at some point (and thus has a non-null Key) and another type for a record that may or may not have been persisted. Currently, our &lt;strong&gt;MessageDetails&lt;/strong&gt; class (which has only &quot;Title&quot; and &quot;Content&quot; properties) represents a message that may or may not have been persisted - when a new one is passed to &quot;SaveMessage&quot; when the user attempts to save a new message then we know that it hasn&#39;t been persisted yet, but it&#39;s not difficult to imagine that there could be other code that we add to the application in the future that wants to deal with some message data, but that doesn&#39;t care whether it&#39;s been persisted or not yet; it only wants access to its &quot;Title&quot; and / or &quot;Content&quot; values, it doesn&#39;t need the &quot;Key&quot; for anything.&lt;/p&gt;

&lt;p&gt;So, instead of the &lt;strong&gt;MessageHistory&lt;/strong&gt; using the generic &lt;strong&gt;Tuple&lt;/strong&gt; class to represent a &lt;strong&gt;MessageDetails&lt;/strong&gt;-plus-persisted-Key, I&#39;m going to introduce something new. Create a new file under the &quot;API&quot; folder, &quot;Saved.cs&quot; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using ProductiveRage.Immutable;

namespace BridgeReactTutorial.API
{
  public class Saved&amp;lt;TKey, TValue&amp;gt; : IAmImmutable
  {
    public Saved(TKey key, TValue value)
    {
      this.CtorSet(_ =&amp;gt; _.Key, key);
      this.CtorSet(_ =&amp;gt; _.Value, value);
    }
    public TKey Key { get; private set; }
    public TValue Value { get; private set; }
  }

  public static class Saved
  {
    /// &amp;lt;summary&amp;gt;
    /// This generic method makes code that creates generic Saved instances more succinct
    /// by relying upon type inference (based upon the key and value argument types), so
    /// that the calling code does not have to explicitly declare TKey and TValue
    /// &amp;lt;/summary&amp;gt;
    public static Saved&amp;lt;TKey, TValue&amp;gt; For&amp;lt;TKey, TValue&amp;gt;(TKey key, TValue value)
    {
      return new Saved&amp;lt;TKey, TValue&amp;gt;(key, value);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;Saved&lt;/strong&gt; class makes differentiating between record-that-has-a-persistence-id and record-that-may-or-may-not-have-a-persistence-id simple. If the message has been persisted, then it may be represented as a &lt;strong&gt;Saved&amp;lt;int, MessageDetails&amp;gt;&lt;/strong&gt;. If it&#39;s &lt;em&gt;just&lt;/em&gt; the message data, with no persisted-or-not-persisted state associated with it then it will be simply a &lt;strong&gt;MessageDetails&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I&#39;m &lt;em&gt;still&lt;/em&gt; not happy, though. I think that &lt;strong&gt;Saved&amp;lt;int, MessageDetails&amp;gt;&lt;/strong&gt; could still be more descriptive. This value represents a message with a unique persistence key for that message. Even if the underlying data store is a database which uses an integer column (in our example app, it&#39;s a simple in-browser-memory store, but a database on a server is likely much more common) that doesn&#39;t mean that we have to use such a vague term as &quot;an integer&quot; in our application&#39;s object model. I recommend strongly-typed ID representations. We need to add a new file &quot;MessageId.cs&quot; to the &quot;API&quot; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace BridgeReactTutorial.API
{
  public struct MessageId
  {
    public int Value { get; private set; }

    public static explicit operator MessageId(int value)
    {
      return new MessageId { Value = value };
    }

    public static implicit operator int(MessageId id)
    {
      return id.Value;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the final step in the move away from &lt;strong&gt;IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt;&lt;/strong&gt;, we will now represent this data with the type &lt;strong&gt;Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt;&lt;/strong&gt;. This set will never contain any null &quot;Saved&quot; instances and a &quot;Saved&quot; instance will never contain a null message. This set of messages will never vary, which is another way that React&#39;s &quot;consider props to be immutable&quot; guidelines is described and enforced in the type system.&lt;/p&gt;

&lt;p&gt;Not only do I believe that having strongly-typed IDs makes the code clearer in cases like this but it can also avoid silly mistakes that have a nasty tendency to crop up from time to time - if you&#39;re writing code and having a bad day, then it&#39;s easy to accidentally pass the wrong ID around. For example, if I have a function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void RecordMessageAsHavingBeenReadBy(int messageId, int userId)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then it&#39;s possible in the calling code to mix up the IDs if you&#39;re having a bad day (this isn&#39;t &lt;em&gt;too&lt;/em&gt; contrived an example, I &lt;em&gt;have&lt;/em&gt; done something like this in the past!) - eg.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RecordMessageAsHavingBeenReadBy(user.Id, message.id); // Whoops!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the IDs were strongly-typed, meaning that the method signature would be..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void RecordMessageAsHavingBeenReadBy3(MessageId messageId, UserId userId)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. then that mishap would result in a compile error, rather than runtime confusion that may not get noticed immediately.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note: These changes to how messages are represented will require changes to the &lt;strong&gt;MesageApi&lt;/strong&gt;, which I&#39;ll cover shortly - nothing very complicated, though).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These changes lead the &lt;strong&gt;MessageHistory&lt;/strong&gt; component&#39;s code to now look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Linq;
using Bridge.React;
using BridgeReactTutorial.API;
using BridgeReactTutorial.ViewModels;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Components
{
  public class MessageHistory : StatelessComponent&amp;lt;MessageHistory.Props&amp;gt;
  {
    public MessageHistory(
      Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt; messages,
      Optional&amp;lt;NonBlankTrimmedString&amp;gt; className = new Optional&amp;lt;NonBlankTrimmedString&amp;gt;())
      : base(new Props(className, messages)) { }

    public override ReactElement Render()
    {
      var className = props.ClassName;
      if (!props.Messages.Any())
        className = className.Add(&quot; &quot;, new NonBlankTrimmedString(&quot;zero-messages&quot;));

      // Any time a set of child components is dynamically-created (meaning that the
      // numbers of items may vary from one render to another), each must have a unique
      // &quot;Key&quot; property set (this may be a int or a string)
      var messageElements = props.Messages
        .Select(savedMessage =&amp;gt; DOM.Div(new Attributes { Key = (int)savedMessage.Key },
        DOM.Span(new Attributes { ClassName = &quot;title&quot; }, savedMessage.Value.Title),
        DOM.Span(new Attributes { ClassName = &quot;content&quot; }, savedMessage.Value.Content)
        ));

      // When child components are specified (as they are through the second argument of
      // DOM.Div), the argument is of type Any&amp;lt;ReactElement, string&amp;gt;[] (meaning that each
      // element may be another component or it may be a simple text value)
      // - The React bindings have an extension method that transforms an IEnumerable set
      //   of components (such as &quot;messageElements&quot;) into an Any&amp;lt;ReactElement, string&amp;gt;[]
      return DOM.FieldSet(
        new FieldSetAttributes { ClassName = className.ToStringIfDefined() },
        DOM.Legend(null, &quot;Message History&quot;),
        DOM.Div(null, messageElements.ToChildComponentArray())
      );
    }

    public class Props : IAmImmutable
    {
      public Props(
        Optional&amp;lt;NonBlankTrimmedString&amp;gt; className,
        Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt; messages)
      {
        this.CtorSet(_ =&amp;gt; _.ClassName, className);
        this.CtorSet(_ =&amp;gt; _.Messages, messages);
      }
      public Optional&amp;lt;NonBlankTrimmedString&amp;gt; ClassName { get; private set; }
      public Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt; Messages { get; private set; }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of those implicit assumptions are now explicitly described in the type system. This makes me feel much better. &lt;/p&gt;

&lt;h3&gt;So, EVERYWHERE?&lt;/h3&gt;

&lt;p&gt;I introduced the use of &lt;strong&gt;IAmImmutable&lt;/strong&gt; in terms of a component&#39;s &lt;strong&gt;Props&lt;/strong&gt; class. But I subsequently used it to tighten up the &lt;strong&gt;MessageDetails&lt;/strong&gt; class and then again when the &lt;strong&gt;Saved&lt;/strong&gt; class was added.&lt;/p&gt;

&lt;p&gt;One option in incorporating &lt;strong&gt;IAmImmutable&lt;/strong&gt; and this no-value-or-property-may-be-null behaviour into applications would be to say that any class that implements &lt;strong&gt;IAmImmutable&lt;/strong&gt; will not allow null anywhere. As I&#39;ve already hinted, I strongly suggest going further than that, however, and writing &lt;em&gt;all&lt;/em&gt; code like this. Frankly, I can see no good reason why any public data type should be mutable. I can imagine that, in some special cases, it may be desirable to have some private mutable data structures for convenience, or &lt;em&gt;maybe&lt;/em&gt; performance (in some &lt;em&gt;very&lt;/em&gt; specialised cases) but where the data is shared with other classes, data types being immutable makes the code much easier to reason about. Transformations are explicit and do not occur &quot;in place&quot; for any references. Meaning that a reference that describes some data when a function starts will always describe the same data when the function ends.&lt;/p&gt;

&lt;p&gt;It&#39;s actually worth remembering that JavaScript in the browser is single-threaded. A lot of the time that people talk about the benefits of immutability, they talk about the safety of being able to share references between multiple threads and not having to worry about corruption because one thread can&#39;t manipulate data in a way that another thread doesn&#39;t expect, with unfortunate (and often non-deterministic) results. Here, we are not concerned about multi-threading, I recommend the use of immutable structures solely because they make the code that accesses them and passes them around easier to reason about.&lt;/p&gt;

&lt;p&gt;The largest downside in my eyes, as may have struck you after reading all of the above, is that changing code that doesn&#39;t use &lt;strong&gt;IAmImmutable&lt;/strong&gt; into code that &lt;em&gt;does&lt;/em&gt; use it requires changes not only to that particular class but, in many cases, to code that accesses or initialises that class and then to code that accesses or initialises &lt;em&gt;that&lt;/em&gt; code (the changes to the &lt;strong&gt;MessageEditor&lt;/strong&gt; and &lt;strong&gt;MessageHistory&lt;/strong&gt; components required changes to the &lt;strong&gt;MessageDetails&lt;/strong&gt; and &lt;strong&gt;MessageEditState&lt;/strong&gt; classes and still require more changes to the &lt;strong&gt;AppContainer&lt;/strong&gt;, the &lt;strong&gt;MessageWriterStore&lt;/strong&gt; and the &lt;strong&gt;MessageApi&lt;/strong&gt;). It&#39;s much better to bake this in from the start. The big benefit is that, if you do so, you&#39;ll rarely have to worry about &quot;could this value be null&quot;* and &quot;could this data be changed if I pass it into another function&quot;.&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;(There will still be some places where you have to be alert about potential nulls, but these should largely arise from interacting with other libraries - the &quot;ToStringIfDefined&quot; extension method we saw earlier is an example of a place where nulls may be returned, but it is clearly documented as such and the return value is only intended to be passed to a React element factory method).&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Filling in more gaps&lt;/h3&gt;

&lt;p&gt;If you&#39;ve been following along and creating your own project with the code in this series, you will be all too aware that it doesn&#39;t build at the moment. Let&#39;s go through and fix everything up. Much of the required alterations will be similar to what is presented above, but there are a few other tips and tricks to consider along the way.&lt;/p&gt;

&lt;p&gt;Let&#39;s start with the &lt;strong&gt;AppContainer&lt;/strong&gt;. Last we saw it, it looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.ViewModels;
using BridgeReactTutorial.Stores;
using BridgeReactTutorial.API;

namespace BridgeReactTutorial.Components
{
  public class AppContainer : Component&amp;lt;AppContainer.Props, AppContainer.State&amp;gt;
  {
    public AppContainer(AppContainer.Props props) : base(props) { }

    protected override void ComponentDidMount()
    {
      props.Store.Change += StoreChanged;
    }
    protected override void ComponentWillUnmount()
    {
      props.Store.Change -= StoreChanged;
    }
    private void StoreChanged()
    {
      SetState(new State
      {
        Message = props.Store.Message,
        MessageHistory = props.Store.MessageHistory
      });
    }

    public override ReactElement Render()
    {
      if (state == null)
        return null;

      return DOM.Div(null,
        new MessageEditor(
          className: new NonBlankTrimmedString(&quot;message&quot;),
          message:  state.Message,
          onChange: newState =&amp;gt; props.Dispatcher.HandleViewAction(
            UserEditRequested.For(newState)
          ),
          onSave: () =&amp;gt; props.Dispatcher.HandleViewAction(
            SaveRequested.For(
              new MessageDetails(
                new NonBlankTrimmedString(state.Message.Title.Text),
                new NonBlankTrimmedString(state.Message.Content.Text)
              )
            )
          )
        ),
        new MessageHistory(new MessageHistory.Props
        {
          ClassName = &quot;history&quot;,
          Messages = state.MessageHistory
        })
      );
    }

    public class Props
    {
      public AppDispatcher Dispatcher;
      public MessageWriterStore Store;
    }

    public class State
    {
      public MessageEditState Message;
      public IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; MessageHistory;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&#39;s nice and simple since we moved nearly all of the logic that it contained in &lt;a href=&quot;http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-from-first-principles&quot;&gt;Part One&lt;/a&gt; into the &lt;strong&gt;MessageWriterStore&lt;/strong&gt; in &lt;a href=&quot;http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-part-two&quot;&gt;Part Two&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The obvious thing to do, based on what I&#39;ve been talking about today, is to change its &lt;strong&gt;Props&lt;/strong&gt; and &lt;strong&gt;State&lt;/strong&gt; classes to implement &lt;strong&gt;IAmImmutable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After that, there is one difference between this component and the other components we&#39;ve already looked at - this is stateful and they were state-&lt;em&gt;less&lt;/em&gt;. That means that they only had &quot;props&quot; to think about, while the &lt;strong&gt;AppContainer&lt;/strong&gt; has both &quot;props&quot; and &quot;state&quot;. As with the stateless components, it is presumed that the &quot;props&quot; reference may never be null. This can be enforced by using the same trick as we did for the others - mirror the &lt;strong&gt;Props&lt;/strong&gt; constructor arguments in the &lt;strong&gt;AppContainer&lt;/strong&gt;&#39;s constructor arguments and generate a &lt;strong&gt;Props&lt;/strong&gt; instance from them. However, the &quot;state&quot; reference &lt;em&gt;may&lt;/em&gt; be null some times, as can be seen at the very start of the &quot;Render&quot; method. This means that the &quot;state&quot; type should be &lt;strong&gt;Optional&amp;lt;State&amp;gt;&lt;/strong&gt;, rather than just &lt;strong&gt;State&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These changes result in this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.API;
using BridgeReactTutorial.Stores;
using BridgeReactTutorial.ViewModels;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Components
{
  public class AppContainer : Component&amp;lt;AppContainer.Props, Optional&amp;lt;AppContainer.State&amp;gt;&amp;gt;
  {
    public AppContainer(AppDispatcher dispatcher, MessageWriterStore store)
      : base(new Props(dispatcher, store)) { }

    protected override void ComponentDidMount()
    {
      props.Store.Change += StoreChanged;
    }
    protected override void ComponentWillUnmount()
    {
      props.Store.Change -= StoreChanged;
    }
    private void StoreChanged()
    {
      SetState(new State(
        message: props.Store.Message,
        messageHistory: props.Store.MessageHistory
      ));
    }

    public override ReactElement Render()
    {
      if (!state.IsDefined)
        return null;

      return DOM.Div(null,
        new MessageEditor(
          className: new NonBlankTrimmedString(&quot;message&quot;),
          message:  state.Value.Message,
          onChange: newState =&amp;gt; props.Dispatcher.HandleViewAction(
            UserEditRequested.For(newState)
          ),
          onSave: () =&amp;gt; props.Dispatcher.HandleViewAction(
            SaveRequested.For(
              new MessageDetails(
                new NonBlankTrimmedString(state.Value.Message.Title.Text),
                new NonBlankTrimmedString(state.Value.Message.Content.Text)
              )
            )
          )
        ),
        new MessageHistory(
          className: new NonBlankTrimmedString(&quot;history&quot;),
          messages: state.Value.MessageHistory
        )
      );
    }

    public class Props : IAmImmutable
    {
      public Props(AppDispatcher dispatcher, MessageWriterStore store)
      {
        this.CtorSet(_ =&amp;gt; _.Dispatcher, dispatcher);
        this.CtorSet(_ =&amp;gt; _.Store, store);
      }
      public AppDispatcher Dispatcher { get; private set; }
      public MessageWriterStore Store { get; private set; }
    }

    public class State : IAmImmutable
    {
      public State(
        MessageEditState message,
        Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt; messageHistory)
      {
        this.CtorSet(_ =&amp;gt; _.Message, message);
        this.CtorSet(_ =&amp;gt; _.MessageHistory, messageHistory);
      }
      public MessageEditState Message { get; private set; }
      public Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt; MessageHistory { get; private set; }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That transformation should have felt quite run-of-the-mill and predictable by this point - seen one component-tightening-up, seen them all. Let&#39;s move on to the &lt;strong&gt;MessageWriterStore&lt;/strong&gt;. This is what deals with the events from the application, both from user-initiated events from DOM elements and from new-messages-data-available events from the &lt;strong&gt;MessageApi&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At the bare minimum, it will need some changes since it was written when the &lt;strong&gt;MessageEditState&lt;/strong&gt; type was mutable and so the &quot;ValidateMessage&quot; method was able to mutate it (such as setting or clearing validation warning messages) in-place. I&#39;ve moved away from that so that mutations are &lt;em&gt;always&lt;/em&gt; explicit - there will no longer be a method that may or may not mutate a reference, if a method needs to set values on something then it will take the initial reference as an input and return a new one as its return value. But there are more of those sneaky &quot;implicit assumptions&quot; tucked away in the store that we should address. In the last post, we left it implemented like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.API;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Stores
{
  public class MessageWriterStore
  {
    private RequestId _saveActionRequestId, _lastDataUpdatedRequestId;
    public MessageWriterStore(IReadAndWriteMessages messageApi, AppDispatcher dispatcher)
    {
      if (messageApi == null)
        throw new ArgumentNullException(&quot;messageApi&quot;);
      if (dispatcher == null)
        throw new ArgumentNullException(&quot;dispatcher&quot;);

      Message = GetInitialMessageEditState();
      MessageHistory = new Tuple&amp;lt;int, MessageDetails&amp;gt;[0];

      dispatcher.Register(message =&amp;gt;
      {
        message
          .If&amp;lt;StoreInitialised&amp;gt;(
            condition: action =&amp;gt; (action.Store == this),
            work: action =&amp;gt; { }
          )
          .Else&amp;lt;MessageEditStateChanged&amp;gt;(action =&amp;gt;
          {
            Message = action.NewState;
            ValidateMessage(Message);
          })
          .Else&amp;lt;MessageSaveRequested&amp;gt;(action =&amp;gt;
          {
            _saveActionRequestId = messageApi.SaveMessage(action.Message);
            Message.IsSaveInProgress = true;
          })
          .Else&amp;lt;MessageSaveSucceeded&amp;gt;(
            condition: action =&amp;gt; (action.RequestId == _saveActionRequestId),
            work: action =&amp;gt;
            {
              _saveActionRequestId = null;
              Message = GetInitialMessageEditState();
              _lastDataUpdatedRequestId = messageApi.GetMessages();
            }
          )
          .Else&amp;lt;MessageHistoryUpdated&amp;gt;(
            condition: action =&amp;gt;
              action.RequestId.IsEqualToOrComesAfter(_lastDataUpdatedRequestId),
            work: action =&amp;gt;
            {
              _lastDataUpdatedRequestId = action.RequestId;
              MessageHistory = action.Messages;
            }
          )
          .IfAnyMatched(OnChange);
      });
    }

    public event Action Change;
    public MessageEditState Message;
    public IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; MessageHistory;

    private MessageEditState GetInitialMessageEditState()
    {
      // Note: By using the ValidateMessage here, we don&#39;t need to duplicate the &quot;Untitled&quot;
      // string that should be used for the Caption value when the UI is first rendered
      // or when the user has entered some Title content but then deleted it again.
      // Similarly, we avoid having to repeat the validation messages that should be
      // displayed when the form is empty, since they will be set by ValidateMessage.
      var blankMessage = new MessageEditState
      {
        Caption = &quot;&quot;,
        Title = new TextEditState { Text = &quot;&quot; },
        Content = new TextEditState { Text = &quot;&quot; },
        IsSaveInProgress = false
      };
      ValidateMessage(blankMessage);
      return blankMessage;
    }

    private void ValidateMessage(MessageEditState message)
    {
      if (message == null)
        throw new ArgumentNullException(&quot;message&quot;);

      message.Caption = string.IsNullOrWhiteSpace(message.Title.Text)
        ? &quot;Untitled&quot;
        : message.Title.Text.Trim();
      message.Title.ValidationError = string.IsNullOrWhiteSpace(message.Title.Text)
        ? &quot;Must enter a title&quot;
        : null;
      message.Content.ValidationError = string.IsNullOrWhiteSpace(message.Content.Text)
        ? &quot;Must enter message content&quot;
        : null;
    }

    private void OnChange()
    {
      if (Change != null)
        Change();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three things jump out at me here. Firstly, the &quot;&lt;em&gt;saveActionRequestId&quot; and &quot;&lt;/em&gt;lastDataUpdatedRequestId&quot; references may not always be populated. If there is no save action in progress that we&#39;re waiting to complete, for example, then &quot;_saveActionRequestId&quot; won&#39;t have a value. Let&#39;s explicitly describe this in the type system by changing the type of these two values from &lt;strong&gt;RequestId&lt;/strong&gt; to &lt;strong&gt;Optional&amp;lt;RequestId&amp;gt;&lt;/strong&gt; (even though these values aren&#39;t part of a public API of the store class, there&#39;s still a benefit to indicating what may and may not have a value, for the sake of code clarity).&lt;/p&gt;

&lt;p&gt;The second thing is that the &quot;Message&quot; and &quot;MessageHistory&quot; properties are only intended to be written to internally. They are available for reading by other classes (like the &lt;strong&gt;AppContainer&lt;/strong&gt; component), but not for updating by other classes. It makes sense to change these from being public fields to being properties with public getters and private setters. This wasn&#39;t done originally because I wanted to start from the simplest possible implementations and only stray from that when there was a clear benefit. Today, we&#39;re dealing with the clear benefit of increased code clarity through the reduction of implicit assumptions. Moving to private-setter properties allows the compiler to enforce what was only &lt;em&gt;presumed&lt;/em&gt; to be true before (instead of working on the assumption that no-one would try to update these references, now we can sleep safe that no-one other than the &lt;strong&gt;MessageWriteStore&lt;/strong&gt; itself &lt;em&gt;can&lt;/em&gt; change the references).&lt;/p&gt;

&lt;p&gt;The third thing is that &quot;Change&quot; is an event and so may be null if no-one has subscribed to it. That&#39;s just the way that events work in C#. We could either come up with a new way to represent events or we could accept that a null check is required (and that we can&#39;t use an &lt;strong&gt;Optional&lt;/strong&gt; type to represent it). I think that the pragmatic thing to do is to just accept it - this is basically how events have worked in C# from day one and I don&#39;t think that there would be any improvement to code clarity by trying to shy away from this accepted practice.&lt;/p&gt;

&lt;p&gt;What is really going to be the most interesting part in updating the &lt;strong&gt;MessageWriterStore&lt;/strong&gt; is, I think, how we change the validation / &lt;strong&gt;MessageEditState&lt;/strong&gt;-mutating code -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void ValidateMessage(MessageEditState message)
{
  if (message == null)
    throw new ArgumentNullException(&quot;message&quot;);

  message.Caption = string.IsNullOrWhiteSpace(message.Title.Text)
    ? &quot;Untitled&quot;
    : message.Title.Text.Trim();
  message.Title.ValidationError = string.IsNullOrWhiteSpace(message.Title.Text)
    ? &quot;Must enter a title&quot;
    : null;
  message.Content.ValidationError = string.IsNullOrWhiteSpace(message.Content.Text)
    ? &quot;Must enter message content&quot;
    : null;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Probably the absolute simplest thing that we could do would be to rewrite it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private MessageEditState ValidateMessage(MessageEditState message)
{
  if (message == null)
    throw new ArgumentNullException(&quot;message&quot;);

  if (string.IsNullOrWhiteSpace(message.Title.Text))
    message = message.With(_ =&amp;gt; _.Caption, new NonBlankTrimmedString(&quot;Untitled&quot;));
  else
    message = message.With(_ =&amp;gt; _.Caption, new NonBlankTrimmedString(message.Title.Text));

  if (string.IsNullOrWhiteSpace(message.Title.Text))
    message = message.With(_ =&amp;gt; _.Title, SetValidationMessage(message.Title, new NonBlankTrimmedString(&quot;Must enter a title&quot;)));
  else
    message = message.With(_ =&amp;gt; _.Title, SetValidationMessage(message.Title, null));

  if (string.IsNullOrWhiteSpace(message.Content.Text))
    message = message.With(_ =&amp;gt; _.Content, SetValidationMessage(message.Content, new NonBlankTrimmedString(&quot;Must enter message content&quot;)));
  else
    message = message.With(_ =&amp;gt; _.Content, SetValidationMessage(message.Content, null));

  return message;
}

private TextEditState SetValidationMessage(
  TextEditState textEditState,
  Optional&amp;lt;NonBlankTrimmedString&amp;gt; message)
{
  if (textEditState == null)
    throw new ArgumentNullException(&quot;textEditState&quot;);

  return textEditState.With(_ =&amp;gt; _.ValidationError, message);
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is.. more verbose, I think would be a polite way to describe it. I would normally have wrapped some of the lines in order to fit the horizontal scrolling budget I allow on code samples on my blog but I wanted to give this arrangement the best change at looking succint that it could. And it&#39;s still not looking very good.&lt;/p&gt;

&lt;p&gt;What&#39;s much worse, though, is that I don&#39;t think that this code is very easy to read. I think that there&#39;s quite a lot of noise that masks the actual intent. It&#39;s not complicated, by a long shot, but I think that the actual logic that it&#39;s trying to apply is drowning a little bit in all the code that&#39;s required. The verbosity itself, is not the biggest problem for me - I will take code that is slightly longer if it&#39;s clearer (I&#39;m not just talking about descriptive variable and method names and I&#39;m don&#39;t mean avoiding compact &quot;clever&quot; code, I mean like the changes from mutable classes to &lt;strong&gt;IAmImmutable&lt;/strong&gt; implementations; they are more verbose but they are much more expressive).&lt;/p&gt;

&lt;p&gt;One alternative would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private MessageEditState ValidateMessage(MessageEditState message)
{
  if (message == null)
    throw new ArgumentNullException(&quot;message&quot;);

  var caption = string.IsNullOrWhiteSpace(message.Title.Text)
    ? new NonBlankTrimmedString(&quot;Untitled&quot;)
    : new NonBlankTrimmedString(message.Title.Text);
  var titleEditState = string.IsNullOrWhiteSpace(message.Title.Text)
    ? SetValidationMessage(message.Title, new NonBlankTrimmedString(&quot;Must enter a title&quot;))
    : null;
  var contentEditState = string.IsNullOrWhiteSpace(message.Content.Text)
    ? SetValidationMessage(message.Content, new NonBlankTrimmedString(&quot;Must enter message content&quot;))
    : null;

  return message
    .With(_ =&amp;gt; _.Caption, caption)
    .With(_ =&amp;gt; _.Title, titleEditState)
    .With(_ =&amp;gt; _.Content, contentEditState);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is much improved. The code &lt;em&gt;looks&lt;/em&gt; cleaner at a glance and, crucially, it&#39;s much clearer in its intent.&lt;/p&gt;

&lt;p&gt;However.. the way that we&#39;ve reduced the syntactic noise is by separating the &quot;what should the new values be&quot; from the &quot;set these new values&quot;. This isn&#39;t too bad with only three properties, but if the object being validated was more complex then the new-value-determining code would drift further from the new-value-setting code, which would be a pity since they are intrinsicially linked concepts (and it would be nice - meaning that the code should be easier to understand at a glance - if the two types of code were linked again for each property, with each new-value-determiner being present alongside the new-value-setter).&lt;/p&gt;

&lt;p&gt;Instead of splitting the code up for clarity, we can try to make it clearer by using abstractions.&lt;/p&gt;

&lt;p&gt;Let&#39;s start by introducing a method to abstract the setting-or-removing of validation messages from &lt;strong&gt;TextEditState&lt;/strong&gt; instances -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private TextEditState Validate(
  TextEditState textEditState,
  Predicate&amp;lt;TextEditState&amp;gt; validIf,
  NonBlankTrimmedString messageIfInvalid)
{
  if (textEditState == null)
    throw new ArgumentNullException(&quot;textEditState&quot;);
  if (validIf == null)
    throw new ArgumentNullException(&quot;validIf&quot;);
  if (messageIfInvalid == null)
    throw new ArgumentNullException(&quot;messageIfInvalid&quot;);

  return textEditState.With(_ =&amp;gt; _.ValidationError, validIf(textEditState)
    ? null
    : messageIfInvalid);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will take a &lt;strong&gt;TextEditState&lt;/strong&gt;, a rule that determines whether or not its &quot;Text&quot; value should be considered valid and a message to set if the value is &lt;em&gt;not&lt;/em&gt; valid (if it &lt;em&gt;is&lt;/em&gt; valid then the message will be cleared).&lt;/p&gt;

&lt;p&gt;This would allow us to set (or remove) the validation message on the &quot;Title&quot; property with code such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;message = message.With(
  _ =&amp;gt; _.Title,
  Validate(
    message.Title,
    textEditState =&amp;gt; string.IsNullOrWhiteSpace(textEditState.Text),
    new NonBlankTrimmedString(&quot;Must enter a title&quot;)
  )
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the validation logic for both &quot;Title&quot; and &quot;Content&quot; is the same and &quot;textEditState =&gt; string.IsNullOrWhiteSpace(textEditState.Text)&quot; is quite long and going to be responsible for a lot of the &quot;syntactic noise&quot; that I want to avoid, this could also be abstracted by defining another method -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private bool MustHaveValue(TextEditState textEditState)
{
  if (textEditState == null)
    throw new ArgumentNullException(&quot;textEditState&quot;);

  return !string.IsNullOrWhiteSpace(textEditState.Text);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we also move the constant messages (the two validation warnings and the &quot;Untitled&quot; caption string) into static class members -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private readonly static NonBlankTrimmedString _defaultCaption
  = new NonBlankTrimmedString(&quot;Untitled&quot;);

private readonly static NonBlankTrimmedString _noTitleWarning
  = new NonBlankTrimmedString(&quot;Must enter a title&quot;);

private readonly static NonBlankTrimmedString _noContentWarning
  = new NonBlankTrimmedString(&quot;Must enter message content&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. then we can make the &quot;Title&quot; validation-message-setting/unsetting much clearer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;message = message
  .With(_ =&amp;gt; _.Title, Validate(message.Title, MustHaveValue, _noTitleWarning));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we add a final helper method to make the setting of the &quot;Caption&quot; property simpler -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private NonBlankTrimmedString ToNonBlankTrimmedString(
  TextEditState textEditState,
  NonBlankTrimmedString fallback)
{
  if (textEditState == null)
    throw new ArgumentNullException(&quot;textEditState&quot;);
  if (fallback == null)
    throw new ArgumentNullException(&quot;fallback&quot;);

  return (textEditState.Text.Trim() == &quot;&quot;)
    ? fallback
    : new NonBlankTrimmedString(textEditState.Text);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. then the &quot;ValidateMessage&quot; can be reduced to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private MessageEditState ValidateMessage(MessageEditState message)
{
  if (message == null)
    throw new ArgumentNullException(&quot;message&quot;);

  return message
    .With(_ =&amp;gt; _.Caption, ToNonBlankTrimmedString(message.Title, fallback: _defaultCaption))
    .With(_ =&amp;gt; _.Title, Validate(message.Title, MustHaveValue, _noTitleWarning))
    .With(_ =&amp;gt; _.Content, Validate(message.Content, MustHaveValue, _noContentWarning));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I really think that we have the best of every world. The actual code in &quot;ValidateMessage&quot; is short and to the point. While there are more lines of code in total (when you also consider the &quot;ToNonBlankTrimmedString&quot;, &quot;Validate&quot; and &quot;MustHaveValue&quot; methods), each method is more focused and very easy to fully comprehend at a glance. This is the crux of the matter for me - these changes are all about (say it with, because I&#39;m sure that you know what&#39;s coming by this point): making code easier to reason about and hence easier to read, maintain and extend.&lt;/p&gt;

&lt;h3&gt;Sidebar: Pure functions&lt;/h3&gt;

&lt;p&gt;In the past, I&#39;ve had a tendency to interchange the words &quot;method&quot; and &quot;function&quot;. For the last year or so (and definitely in this series of posts, I hope!) I&#39;ve been more careful not to use &quot;function&quot; when I mean &quot;method&quot;. Having read around, it seems like the accepted difference between the two is (to quote an excellent example from a &lt;a href=&quot;http://stackoverflow.com/a/155655&quot;&gt;StackOverflow answer&lt;/a&gt;) -&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A function is a piece of code that is called by name. It can be passed data to operate on (ie. the parameters) and can optionally return data (the return value).&lt;/p&gt;
  
  &lt;p&gt;All data that is passed to a function is explicitly passed.&lt;/p&gt;
  
  &lt;p&gt;A method is a piece of code that is called by name that is associated with an object. In most respects it is identical to a function except for two key differences.&lt;/p&gt;
  
  &lt;p&gt;It is implicitly passed the object on which it was called.
  It is able to operate on data that is contained within the class (remembering that an object is an instance of a class - the class is the definition, the object is an instance of that data).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That means that C# only has methods since every method is associated with an object. Even static methods are, technically, since they have access to anything else that is static within the type that declares the static method.&lt;/p&gt;

&lt;p&gt;A function will &lt;em&gt;only&lt;/em&gt; consider data passed explicitly in arguments, which is not a concept that is possible to represent with C#.&lt;/p&gt;

&lt;p&gt;The key difference, then, being that a function is absolutely guaranteed to always retun the same value given the same argument(s). Parallels are often drawn to mathematical functions. If you think about the need to &quot;calculate the square root of x&quot;, this is a good example of a function as it will always return the same result for any value of &quot;x&quot;. &quot;x&quot; is the &lt;em&gt;only&lt;/em&gt; thing that matters.&lt;/p&gt;

&lt;p&gt;With C#, you can get no such guarantees. Just to really drive the point home, here are three example - first, an instance method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Adder
{
  private readonly int _amountToIncrement;
  public Adder(int amountToIncrement)
  {
    _amountToIncrement = amountToIncrement;
  }

  public int AddTo(int value)
  {
    return value + _amountToIncrement;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously, the return value from &quot;AddTo&quot; depends on more than the argument passed in - it also depends upon the &quot;_amountToIncrement&quot; that the &lt;strong&gt;Adder&lt;/strong&gt; instance has.&lt;/p&gt;

&lt;p&gt;And a couple of static examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class Adder
{
  private static int _amountToIncrement = 0;

  public static int AddTo(int value)
  {
    _amountToIncrement++;
    return value + _amountToIncrement;
  }
}

public static class DayNameRetriever
{
  public static string GetDayNameForDateThisMonth(int date)
  {
    var today = DateTime.Now;
    var firstDayOfMonth = today.AddDays(-today.Day).AddDays(date);
    return firstDayOfMonth.ToString(&quot;dddd&quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Granted, theses examples are clearly contrived to illustrate a point and are not genuinely useful code. But they are also not totally unlike code that exists in the real world. The point is that, because C# only has methods, the mental burden in fully comprehending any method is increased because you have to be aware of anything else that the method might have access to.&lt;/p&gt;

&lt;p&gt;Which is a pity, because the &quot;ToNonBlankTrimmedString&quot;, &quot;Validate&quot; and &quot;MustHaveValue&quot; methods are perfect examples of genuine &lt;em&gt;functions&lt;/em&gt; - they &lt;em&gt;only&lt;/em&gt; operate on their arguments. The &quot;ValidateMessage&quot; only strays outside of its arguments to access the &quot;default caption&quot;, &quot;missing-title validation message&quot; and &quot;missing-content validation message&quot; values, but since there are effectively constants (since they are static readonly instances of immutable types) then &quot;ValidateMessage&quot; could also be considered to be a true function (in particular, we know that it will always return the same data given the same arguments).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Interestingly, there is a &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.diagnostics.contracts.pureattribute(v=vs.110).aspx&quot;&gt;[Pure]&lt;/a&gt; attribute in the .net framework, which is intended to indicate that a method is a &quot;pure function&quot; (where the phrase &quot;pure function&quot; is effectively consistent with the description of a &quot;function&quot; that I gave above). This seems like a nice idea, but it&#39;s not actually enforced by the compiler and so it&#39;s more of a suggestion, which greatly reduces my enthusiasm. The reason that I want to use immutable types to represent data that should not change (like React components&#39; props types) is that it encodes the &quot;this data is immutable&quot; information into the type system and results in any code that tries to break this requirement (by trying to set a value on an immutable type, for example) as being identified as an error by the compiler. The [Pure] attribute will, alas, not result in any compiler warnings or errors.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The closest that we can get to indicating that a method should be considered a &quot;function&quot;  is by making it static. As I showed above, this does &lt;em&gt;not&lt;/em&gt; mean that the method is truly &quot;pure&quot; (at least, there is no provision for the compiler to confirm that this is so) but making a function static does, at least, mean that it can not access any instance fields, properties or methods and so there is still less to consider when reading one of these methods. If you know that a method is static, then there is less mental burden in reading it since you know that there is less code that you need to consider that may possibly affect the current method.&lt;/p&gt;

&lt;p&gt;What I&#39;m trying to get at is that the &quot;ValidateMessage&quot;, &quot;ToNonBlankTrimmedString&quot;, &quot;Validate&quot; and &quot;MustHaveValue&quot; methods should all be made static and, to go further, it&#39;s worth writing &lt;em&gt;all&lt;/em&gt; methods as static unless you have a compelling reason not to. For a lot of methods, it&#39;s obvious that they have to be instance methods - the &quot;Render&quot; methods on the React component classes have to be instance methods, obviously, because they depend upon the &quot;props&quot; data for that component instance. But, in the final &lt;strong&gt;MessageWriterStore&lt;/strong&gt; implementation (see below), if we pull the &quot;OnChange&quot; method into a lambda then there is no need for &lt;em&gt;any&lt;/em&gt; of the methods to not be static.&lt;/p&gt;

&lt;p&gt;It seems, in general, that people write methods as instance methods by default and then make them static if they encounter a good reason to do so. I suggest that methods be written as static by default and only made into instance methods if there is a good reason to do so.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(To be honest, this is still something that I&#39;m trying to consistently apply to my own work - it&#39;s very easy to unconsciously write instance methods by default by omitting the &quot;static&quot; keyword; old habits die hard!)&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.API;
using BridgeReactTutorial.ViewModels;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Stores
{
  public class MessageWriterStore
  {
    private Optional&amp;lt;RequestId&amp;gt; _saveActionRequestId, _lastDataUpdatedRequestId;
    public MessageWriterStore(IReadAndWriteMessages messageApi, AppDispatcher dispatcher)
    {
      if (messageApi == null)
        throw new ArgumentNullException(&quot;messageApi&quot;);
      if (dispatcher == null)
        throw new ArgumentNullException(&quot;dispatcher&quot;);

      Message = GetInitialMessageEditState();
      MessageHistory = Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt;.Empty;

      dispatcher.Register(message =&amp;gt;
      {
        message
          .If&amp;lt;StoreInitialised&amp;gt;(
            condition: action =&amp;gt; (action.Store == this),
            work: action =&amp;gt; { }
          )
          .Else&amp;lt;UserEditRequested&amp;lt;MessageEditState&amp;gt;&amp;gt;(action =&amp;gt;
            Message = ValidateMessage(action.NewState)
          )
          .Else&amp;lt;SaveRequested&amp;lt;MessageDetails&amp;gt;&amp;gt;(action =&amp;gt;
          {
            _saveActionRequestId = messageApi.SaveMessage(action.Data);
            Message = Message.With(_ =&amp;gt; _.IsSaveInProgress, true);
          })
          .Else&amp;lt;SaveSucceeded&amp;gt;(
            condition: action =&amp;gt; (action.RequestId == _saveActionRequestId),
            work: action =&amp;gt;
            {
              _saveActionRequestId = null;
              Message = GetInitialMessageEditState();
              _lastDataUpdatedRequestId = messageApi.GetMessages();
            }
          )
          .Else&amp;lt;DataUpdated&amp;lt;Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt;&amp;gt;&amp;gt;(
            condition:
              action =&amp;gt; action.RequestId.IsEqualToOrComesAfter(_lastDataUpdatedRequestId),
            work: action =&amp;gt;
            {
              _lastDataUpdatedRequestId = action.RequestId;
              MessageHistory = action.Data;
            }
          )
          .IfAnyMatched(() =&amp;gt; { if (Change != null) Change(); });
      });
    }

    public event Action Change;
    public MessageEditState Message { get; private set; }
    public Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt; MessageHistory { get; private set; }

    private readonly static NonBlankTrimmedString _defaultCaption
      = new NonBlankTrimmedString(&quot;Untitled&quot;);
    private readonly static NonBlankTrimmedString _noTitleWarning
      = new NonBlankTrimmedString(&quot;Must enter a title&quot;);
    private readonly static NonBlankTrimmedString _noContentWarning
      = new NonBlankTrimmedString(&quot;Must enter message content&quot;);

    private static MessageEditState GetInitialMessageEditState()
    {
      return new MessageEditState(
        caption: _defaultCaption,
        title: new TextEditState(&quot;&quot;, _noTitleWarning),
        content: new TextEditState(&quot;&quot;, _noContentWarning),
        isSaveInProgress: false
      );
    }

    private static MessageEditState ValidateMessage(MessageEditState message)
    {
      if (message == null)
        throw new ArgumentNullException(&quot;message&quot;);

      return message
        .With(_ =&amp;gt; _.Caption, ToNonBlankTrimmedString(message.Title, _defaultCaption))
        .With(_ =&amp;gt; _.Title, Validate(message.Title, MustHaveValue, _noTitleWarning))
        .With(_ =&amp;gt; _.Content, Validate(message.Content, MustHaveValue, _noContentWarning));
    }

    private static NonBlankTrimmedString ToNonBlankTrimmedString(
      TextEditState textEditState,
      NonBlankTrimmedString fallback)
    {
      if (textEditState == null)
        throw new ArgumentNullException(&quot;textEditState&quot;);
      if (fallback == null)
        throw new ArgumentNullException(&quot;fallback&quot;);

      return (textEditState.Text.Trim() == &quot;&quot;)
        ? fallback
        : new NonBlankTrimmedString(textEditState.Text);
    }

    private static TextEditState Validate(
      TextEditState textEditState,
      Predicate&amp;lt;TextEditState&amp;gt; validIf,
      NonBlankTrimmedString messageIfInvalid)
    {
      if (textEditState == null)
        throw new ArgumentNullException(&quot;textEditState&quot;);
      if (validIf == null)
        throw new ArgumentNullException(&quot;validIf&quot;);
      if (messageIfInvalid == null)
        throw new ArgumentNullException(&quot;messageIfInvalid&quot;);

      return textEditState.With(_ =&amp;gt; _.ValidationError, validIf(textEditState)
        ? null
        : messageIfInvalid);
    }

    private static bool MustHaveValue(TextEditState textEditState)
    {
      if (textEditState == null)
        throw new ArgumentNullException(&quot;textEditState&quot;);

      return !string.IsNullOrWhiteSpace(textEditState.Text);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that, since the &lt;strong&gt;RequestId&lt;/strong&gt; values are now &lt;strong&gt;Optional&amp;lt;RequestId&amp;gt;&lt;/strong&gt; instances, we need to change the &quot;IsEqualToOrComesAfter&quot; extension method -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.API
{
  public static class RequestIdExtensions
  {
    public static bool IsEqualToOrComesAfter(
      this RequestId source,
      Optional&amp;lt;RequestId&amp;gt; other)
    {
      if (source == null)
        throw new ArgumentNullException(&quot;source&quot;);

      // If the &quot;other&quot; reference is no-RequestId then the &quot;source&quot; may be considered to
      // come after it
      if (!other.IsDefined)
        return true;

      return (source == other.Value) || source.ComesAfter(other.Value);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The rest of the gaps&lt;/h3&gt;

&lt;p&gt;There&#39;s been a lot of theory covered so far. To really put it into practice, though, we need to fix the rest of the compile errors in the example application.&lt;/p&gt;

&lt;p&gt;Changing the &lt;strong&gt;MessageEditor&lt;/strong&gt;, &lt;strong&gt;MessageHistory&lt;/strong&gt;, &lt;strong&gt;AppContainer&lt;/strong&gt; and &lt;strong&gt;MessageWriteStore&lt;/strong&gt; to use the new immutable types (the now-immutable &lt;strong&gt;MessageDetails&lt;/strong&gt; and the &lt;strong&gt;Set&lt;/strong&gt; type from &lt;a href=&quot;https://www.nuget.org/packages/ProductiveRage.Immutable&quot;&gt;ProductiveRage.Immutable&lt;/a&gt;) require further changes to the &lt;strong&gt;MessageApi&lt;/strong&gt; and the &lt;strong&gt;App&lt;/strong&gt; file that initialises the application.&lt;/p&gt;

&lt;p&gt;And, while we&#39;re making everything immutable, let&#39;s change the action classes. Currently, we have actions such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.React;
using BridgeReactTutorial.API;

namespace BridgeReactTutorial.Actions
{
  public class DataUpdated&amp;lt;T&amp;gt; : IDispatcherAction
  {
    public RequestId RequestId;
    public T Data;
  }
  public static class DataUpdated
  {
    public static DataUpdated&amp;lt;T&amp;gt; For&amp;lt;T&amp;gt;(RequestId requestId, T data)
    {
      return new DataUpdated&amp;lt;T&amp;gt; { RequestId = requestId, Data = data };
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.React;
using BridgeReactTutorial.API;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Actions
{
  public class DataUpdated&amp;lt;T&amp;gt; : IDispatcherAction, IAmImmutable
  {
    public DataUpdated(RequestId requestId, T data)
    {
      this.CtorSet(_ =&amp;gt; _.RequestId, requestId);
      this.CtorSet(_ =&amp;gt; _.Data, data);
    }
    public RequestId RequestId { get; private set; }
    public T Data { get; private set; }
  }
  public static class DataUpdated
  {
    public static DataUpdated&amp;lt;T&amp;gt; For&amp;lt;T&amp;gt;(RequestId requestId, T data)
    {
      return new DataUpdated&amp;lt;T&amp;gt;(requestId, data);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The others require similar changes -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.React;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Actions
{
  public class SaveRequested&amp;lt;T&amp;gt; : IDispatcherAction, IAmImmutable
  {
    public SaveRequested(T data)
    {
      this.CtorSet(_ =&amp;gt; _.Data, data);
    }
    public T Data { get; private set; }
  }
  public static class SaveRequested
  {
    public static SaveRequested&amp;lt;T&amp;gt; For&amp;lt;T&amp;gt;(T data)
    {
      return new SaveRequested&amp;lt;T&amp;gt;(data);
    }
  }
}

using Bridge.React;
using BridgeReactTutorial.API;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Actions
{
  public class SaveSucceeded : IDispatcherAction, IAmImmutable
  {
    public SaveSucceeded(RequestId requestId)
    {
      this.CtorSet(_ =&amp;gt; _.RequestId, requestId);
    }
    public RequestId RequestId { get; private set; }
  }
}

using Bridge.React;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Actions
{
  public class StoreInitialised : IDispatcherAction, IAmImmutable
  {
    public StoreInitialised(object store)
    {
      this.CtorSet(_ =&amp;gt; _.Store, store);
    }
    public object Store { get; private set; }
  }
}

using Bridge.React;
using BridgeReactTutorial.ViewModels;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Actions
{
  public class UserEditRequested&amp;lt;T&amp;gt; : IDispatcherAction, IAmImmutable
  {
    public UserEditRequested(T newState)
    {
      this.CtorSet(_ =&amp;gt; _.NewState, newState);
    }
    public T NewState { get; private set; }
  }
  public static class UserEditRequested
  {
    public static UserEditRequested&amp;lt;T&amp;gt; For&amp;lt;T&amp;gt;(T newState)
    {
      return new UserEditRequested&amp;lt;T&amp;gt;(newState);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;App&lt;/strong&gt; class requires only minor tweaks, from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Linq;
using Bridge.Html5;
using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.API;
using BridgeReactTutorial.Components;
using BridgeReactTutorial.Stores;

namespace BridgeReactTutorial
{
  public class App
  {
    [Ready]
    public static void Go()
    {
      var container = Document.GetElementById(&quot;main&quot;);
      container.ClassName = string.Join(
        &quot; &quot;,
        container.ClassName.Split().Where(c =&amp;gt; c != &quot;loading&quot;)
      );

      var dispatcher = new AppDispatcher();
      var messageApi = new MessageApi(dispatcher);
      var store = new MessageWriterStore(messageApi, dispatcher);
      React.Render(
        new AppContainer(new AppContainer.Props
        {
          Dispatcher = dispatcher,
          Store = store
        }),
        container
      );
      dispatcher.HandleViewAction(new StoreInitialised { Store = store });
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Linq;
using Bridge.Html5;
using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.API;
using BridgeReactTutorial.Components;
using BridgeReactTutorial.Stores;

namespace BridgeReactTutorial
{
  public class App
  {
    [Ready]
    public static void Go()
    {
      var container = Document.GetElementById(&quot;main&quot;);
      container.ClassName = string.Join(
        &quot; &quot;,
        container.ClassName.Split().Where(c =&amp;gt; c != &quot;loading&quot;)
      );

      var dispatcher = new AppDispatcher();
      var messageApi = new MessageApi(dispatcher);
      var store = new MessageWriterStore(messageApi, dispatcher);
      React.Render(
        new AppContainer(dispatcher, store),
        container
      );
      dispatcher.HandleViewAction(new StoreInitialised(store));
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, the &lt;strong&gt;MessageApi&lt;/strong&gt; needs various alterations to deal with the fact that all data types (such as the &lt;strong&gt;MessageDetails&lt;/strong&gt;, the message history and the action classes) are immutable -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge;
using Bridge.Html5;
using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.ViewModels;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.API
{
  public class MessageApi : IReadAndWriteMessages
  {
    private readonly AppDispatcher _dispatcher;
    private Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt; _messages;
    public MessageApi(AppDispatcher dispatcher)
    {
      if (dispatcher == null)
        throw new ArgumentException(&quot;dispatcher&quot;);

      _dispatcher = dispatcher;
      _messages = Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt;.Empty;

      // To further mimic a server-based API (where other people may be recording messages
      // of their own), after a 10s delay a periodic task will be executed to retrieve a
      // new message
      Window.SetTimeout(
        () =&amp;gt; Window.SetInterval(GetChuckNorrisFact, 5000),
        10000
      );
    }

    public RequestId SaveMessage(MessageDetails message)
    {
      return SaveMessage(message, optionalSaveCompletedCallback: null);
    }

    private RequestId SaveMessage(
      MessageDetails message,
      Action optionalSaveCompletedCallback)
    {
      if (message == null)
        throw new ArgumentNullException(&quot;message&quot;);

      var requestId = new RequestId();
      Window.SetTimeout(
        () =&amp;gt;
        {
          _messages = _messages.Add(Saved.For(
            (MessageId)(int)_messages.Count,
            message
          ));
          _dispatcher.HandleServerAction(new SaveSucceeded(requestId));
          if (optionalSaveCompletedCallback != null)
            optionalSaveCompletedCallback();
        },
        1000 // Simulate a roundtrip to the server
      );
      return requestId;
    }

    public RequestId GetMessages()
    {
      var requestId = new RequestId();
      Window.SetTimeout(
        () =&amp;gt; _dispatcher.HandleServerAction(DataUpdated.For(requestId, _messages)),
        1000 // Simulate a roundtrip to the server
      );
      return requestId;
    }

    private void GetChuckNorrisFact()
    {
      var request = new XMLHttpRequest();
      request.ResponseType = XMLHttpRequestResponseType.Json;
      request.OnReadyStateChange = () =&amp;gt;
      {
        if (request.ReadyState != AjaxReadyState.Done)
          return;

        if ((request.Status == 200) || (request.Status == 304))
        {
          try
          {
            var apiResponse = (ChuckNorrisFactApiResponse)request.Response;
            if ((apiResponse.Type == &quot;success&quot;)
            &amp;amp;&amp;amp; (apiResponse.Value != null)
            &amp;amp;&amp;amp; !string.IsNullOrWhiteSpace(apiResponse.Value.Joke))
            {
              // The Chuck Norris Facts API (http://www.icndb.com/api/) returns strings
              // html-encoded, so they need decoding before be wrapped up in a
              // MessageDetails instance
              // - Note: After the save has been processed, GetMessages is called so
              //   that a MessageHistoryUpdate action is dispatched
              SaveMessage(
                new MessageDetails(
                  title: new NonBlankTrimmedString(&quot;Fact&quot;),
                  content: new NonBlankTrimmedString(HtmlDecode(apiResponse.Value.Joke))
                ),
                () =&amp;gt; GetMessages()
              );
              return;
            }
          }
          catch
          {
            // Ignore any error and drop through to the fallback message-generator below
          }
        }
        SaveMessage(new MessageDetails(
          title: new NonBlankTrimmedString(&quot;Fact&quot;),
          content: new NonBlankTrimmedString(&quot;API call failed when polling for content :(&quot;)
        ));
      };
      request.Open(&quot;GET&quot;, &quot;http://api.icndb.com/jokes/random&quot;);
      request.Send();
    }

    private string HtmlDecode(string value)
    {
      if (value == null)
        throw new ArgumentNullException(&quot;value&quot;);

      var wrapper = Document.CreateElement(&quot;div&quot;);
      wrapper.InnerHTML = value;
      return wrapper.TextContent;
    }

    [IgnoreCast]
    private class ChuckNorrisFactApiResponse
    {
      public extern string Type { [Template(&quot;type&quot;)] get; }
      public extern FactDetails Value { [Template(&quot;value&quot;)] get; }

      [IgnoreCast]
      public class FactDetails
      {
        public extern int Id { [Template(&quot;id&quot;)] get; }
        public extern string Joke { [Template(&quot;joke&quot;)]get; }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One pleasant change was the removal of code that was previously in the &lt;strong&gt;MessageApi&lt;/strong&gt; with the following comment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// ToArray is used to return a clone of the message set - otherwise, the caller would
// end up with a list that is updated when the internal reference within this class
// is updated (which sounds convenient but it&#39;s not the behaviour that would be
// exhibited if this was really persisting messages to a server somewhere)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the message set is described by an immutable structure, there is no way that a particular reference&#39;s data could change. There is no way that a component could have a reference to this data type and then find that the data in that reference had changed by the time that an event bubbled up to that component from one of its child components. Similarly, when the &lt;strong&gt;MessageApi&lt;/strong&gt; passes its message history data out, there is no action that may be performed by any code that receives the message history reference that could &quot;pollute&quot; the data that the &lt;strong&gt;MessageApi&lt;/strong&gt; stores internally.&lt;/p&gt;

&lt;p&gt;Previously, when the &lt;strong&gt;MessageApi&lt;/strong&gt; wanted to share its message history data, we had two options - we could hope that the mutable list of mutable &lt;strong&gt;MessageDetails&lt;/strong&gt; would never be manipulated when it was passed out from the &lt;strong&gt;MessageApi&lt;/strong&gt; or we could try to make it impossible for other code to pollute the &lt;strong&gt;MessageApi&lt;/strong&gt;&#39;s copy of the data, which is what the &quot;ToArray&quot; call went some way towards (note that this wouldn&#39;t have saved us from code that received the mutable message history and then changed one of the fields on any of the individual mutable &lt;strong&gt;MessageDetails&lt;/strong&gt; instances - this &lt;em&gt;would&lt;/em&gt; have polluted to &lt;strong&gt;MessageApi&lt;/strong&gt;&#39;s internal data).&lt;/p&gt;

&lt;p&gt;This is a nice example of how immutable structures can actually aid performance &lt;em&gt;as well&lt;/em&gt; as aiding code clarity. Before, we were using a defensive &quot;ToArray&quot; call to try to avoid any silly mistakes polluting the &lt;strong&gt;MessageApi&lt;/strong&gt;&#39;s internal data. This was only a partial solution anyway, since, to really protect ourselves, we would have needed to clone the entire list - cloning each individual &lt;strong&gt;MessageDetails&lt;/strong&gt; instance, as well as the list itself. Now that the data is immutable, such cloning (which can be very expensive in some case) is not necessary. I maintain, though, that the biggest benefit is to code clarity rather than performance - it is now &lt;em&gt;impossible&lt;/em&gt; to make the &quot;silly mistake&quot; of mutating shared data, because the previously-implicit behaviour guideline of &quot;do not try to mutate this data, please&quot; is now encapsulated in the type sytem.&lt;/p&gt;

&lt;p&gt;It&#39;s not uncommon to hear people claim that using immutable types incur a performance cost. I believe that this is only really true at a highly localised level. For example, if you have an array and you want to change the element at index 5, that is an incredibly cheap operation and it is not possible to have an &quot;immutable array&quot; that has a method that will give you a new immutable array instance with a different value at index 5 as cheaply. At this level, mutable structures can perform operations more quickly. However, immutable structures can allow techniques that provide performance benefits at a higher level, such as described above, where expensive cloning operations may be avoided entirely (general-case cloning operations can be expensive in CPU &lt;em&gt;and&lt;/em&gt; in memory, since a clone will duplicate the entire data structure, whereas mature immutable-type libraries leverage clever &quot;persistent structures&quot; to reuse data between instances).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(It has become less common to hear this argument against immutable data structures since they are being much more widely used these days - React is an excellent example in that it leverages immutability to allow for fantastic performance, rather than immutability being a cost that the React library has to pay).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While performance is not my number one goal (which is not to say that I don&#39;t think it&#39;s an &lt;em&gt;important&lt;/em&gt; target, I&#39;m just saying that I value code clarity more highly), this topic of conversation leads me nicely on to the next topic.&lt;/p&gt;

&lt;h3&gt;Pure Components&lt;/h3&gt;

&lt;p&gt;If a &quot;pure function&quot; is one that returns a value based solely upon its arguments, then a &quot;pure component&quot; is a parallel concept - it generates content based solely upon its &quot;props&quot; data.&lt;/p&gt;

&lt;p&gt;To recall what our example application looks like -&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Message Editor and Message History&quot; src=&quot;http://www.productiverage.com/Content/Images/Posts/ReactTutorial1.png&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&lt;/p&gt;

&lt;p&gt;There are basically two parts to it; the Message Editor and the Message History. The Message Editor part changes after one of any of the following occurs -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;While the entry form is enabled, the user changes the content in one of the text inputs&lt;/li&gt;
&lt;li&gt;While the entry form is enabled and both text inputs have values, the user clicks Save&lt;/li&gt;
&lt;li&gt;A save request is completed and the form changes back from disabled to enabled&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Message History part changes only when the &lt;strong&gt;MessageApi&lt;/strong&gt; sends a message to say that there is new message data to display.&lt;/p&gt;

&lt;p&gt;What happens in our application is that &lt;em&gt;every&lt;/em&gt; change results in a full React re-render. React is very efficient and its Virtual DOM minimises (and can batch) changes to the slow browser DOM, so this is rarely something to worry about. However, it might lead you to think -&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If I know that a particular event will only result in changes to the Message Editor, isn&#39;t it wasteful to React to re-render the entire Message History content in its Virtual DOM - &lt;em&gt;particularly&lt;/em&gt; if it does this only to discover that no changes to the browser DOM need to be applied?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is an entirely reasonable question. If there are a hundred messages in the Message History, does that component &lt;em&gt;really&lt;/em&gt; have to re-render them all in the Virtual DOM every time that the user presses a button to change the value in the &quot;Title&quot; text input in the Message Editor? What if there 1000 messages in the history? Or what if this was a much more complicated application with many, many editable inputs and lists of results all over the page - do I really want the entirety of this complicated UI to be re-rendered by the Virtual DOM every time that the user edits a single field?&lt;/p&gt;

&lt;p&gt;If we were using mutable structures to represent the data that the React component hierarchy has to render, we would have a few options. One would be to change the component structure such that there were more stateful components in order to try to only update branches of the hierarchy that need to change according to particular changes. In our example, the &lt;strong&gt;MessageEditor&lt;/strong&gt; could be made stateful in a bid to limit changes to the text inputs from resulting in re-renders of the &lt;strong&gt;MessageHistory&lt;/strong&gt; (which would also have to become a stateful component, so that it could update itself when the message history data changes). This would require the &lt;strong&gt;MessageWriteStore&lt;/strong&gt; to be changed as well. On the surface of it, this doesn&#39;t necessarily sound like a terrible idea, but stateful components will &lt;em&gt;always&lt;/em&gt; require more thought and planning than stateless components and so this would be a move back towards more complicated component models. This would be an unfortunate step back from where we are now, where the complications are minimised and most components are stateless. We would no longer have a render-down and pass-events-up model, we would have a sort of branched version of it.&lt;/p&gt;

&lt;p&gt;Another option would be to try to have components make use of React&#39;s &quot;&lt;a href=&quot;https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate&quot;&gt;shouldComponentUpdate&lt;/a&gt;&quot; method. This is a method that may optionally be implemented on components, that is called before a component&#39;s &quot;Render&quot; method is called, so long as that component has been rendered at least once before. It will be given two &quot;props&quot; values - one is the props data from the last render and the second is the new props data that has been specified for the re-render. If this method returns true then the component is re-rendered (to the Virtual DOM) as normal. If it returns false then the component&#39;s &quot;Render&quot; method is &lt;em&gt;not&lt;/em&gt; called. This would mean that none of its child components would be re-rendered either, since those re-renders are only triggered by code in their parent&#39;s component&#39;s &quot;Render&quot; method. If it was possible for the &lt;strong&gt;MessageHistory&lt;/strong&gt; to look at its last props and its next props and see that they describe the same data, then the entire re-render work could be avoided. The problem comes in working that out, though - for the cases where the old and new messages data &lt;em&gt;was&lt;/em&gt; the same and when we had an &lt;strong&gt;IEnumerable&lt;/strong&gt; set of mutable &lt;strong&gt;MessageDetails&lt;/strong&gt; instances, we would have had to have enumerated through every value in the set and compared the &quot;Title&quot; and &quot;Content&quot; values on each message. If they all matched then the old and new data would have been proven to have been the same and the re-render would not be required. But was all that comparison work really much cheaper than just letting the Virtual DOM do its magic?&lt;/p&gt;

&lt;p&gt;One of the good thing about immutable structures is that data can safely be shared and reused. Now that the &lt;strong&gt;MessageHistory&lt;/strong&gt; component takes an immutable &lt;strong&gt;Set&lt;/strong&gt; of immutable &lt;strong&gt;MessageDetails&lt;/strong&gt; instances, if the data hasn&#39;t changed then the same &lt;strong&gt;Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt;&lt;/strong&gt; reference will be passed to the &lt;strong&gt;MessageHistory.Props&lt;/strong&gt; instance - but if the data &lt;em&gt;has&lt;/em&gt; changed then, by necessity, a new &lt;strong&gt;Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt;&lt;/strong&gt; reference will be provided. This would make a &quot;shouldComponentUpdate&quot; implementation very simple - just look at each property on the old and new props references and use reference equality comparisons to see if anything&#39;s changed.&lt;/p&gt;

&lt;p&gt;The bad news is that the &lt;strong&gt;StatelessComponent&lt;/strong&gt; base class in the Bridge / React bindings doesn&#39;t support &quot;shouldComponentUpdate&quot;. So you can&#39;t try to take advantage of it to reduce the work that the Virtual DOM does - only the &lt;strong&gt;Component&lt;/strong&gt; (which is the full stateful component) base class supports it. The good news is that you don&#39;t need to implement it manually. If you&#39;re creating stateless components whose props classes have properties that are all primitive values (such as bool, int, string, etc..) and / or immutable types and / or functions* and if the components genuinely render &lt;em&gt;entirely&lt;/em&gt; according to the props data (no accessing DateTime.Now, for example) then you can derive from the &lt;strong&gt;PureComponent&lt;/strong&gt; base class instead. This automatically implements &quot;shouldComponentUpdate&quot; behind the scenes.&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;(There are some cases where &quot;props&quot; properties that are callbacks - like &quot;OnChange&quot; on the &lt;strong&gt;TextInput&lt;/strong&gt; - can&#39;t be compared by the &lt;strong&gt;PureComponent&lt;/strong&gt;&#39;s magic, but most of the time they can be and the details of when they can and can&#39;t are outside the scope of this article - so let&#39;s just assume that function / &lt;strong&gt;Action&amp;lt;T&amp;gt;&lt;/strong&gt; / callback property types CAN always be handled).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To illustrate, add the following line to the start of the &lt;strong&gt;MessageHistory&lt;/strong&gt; &quot;Render&quot; method -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Console.WriteLine(&quot;MessageHistory.Render&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, run the application in the browser and bring up the browser console in the dev tools. &lt;em&gt;Every&lt;/em&gt; time that the app re-renders in the Virtual DOM, &quot;MessageHistory.Render&quot; will be written to the console. Every time that a key is pressed to change one of the text input elements, the entire UI will be re-rendered and &quot;MessageHistory.Render&quot; will be displayed in the console.&lt;/p&gt;

&lt;p&gt;Now, change the base class of the &lt;strong&gt;MessageHistory&lt;/strong&gt; from &lt;strong&gt;StatelessComponent&amp;lt;MessageHistory.Props&amp;gt;&lt;/strong&gt; to &lt;strong&gt;PureComponent&amp;lt;MessageHistory.Props&amp;gt;&lt;/strong&gt;. It will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Linq;
using Bridge.Html5;
using Bridge.React;
using BridgeReactTutorial.API;
using BridgeReactTutorial.ViewModels;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Components
{
  public class MessageHistory : StatelessComponent&amp;lt;MessageHistory.Props&amp;gt;
  {
    public MessageHistory(
      Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt; messages,
      Optional&amp;lt;NonBlankTrimmedString&amp;gt; className = new Optional&amp;lt;NonBlankTrimmedString&amp;gt;())
      : base(new Props(className, messages)) { }

    public override ReactElement Render()
    {
      Bridge.Html5.Console.WriteLine(&quot;MessageHistory.Render&quot;);

      var className = props.ClassName;
      if (!props.Messages.Any())
        className = className.Add(&quot; &quot;, new NonBlankTrimmedString(&quot;zero-messages&quot;));

      // Any time a set of child components is dynamically-created (meaning that the
      // numbers of items may vary from one render to another), each must have a unique
      // &quot;Key&quot; property set (this may be a int or a string). Here, this is simple as
      // each message tuple is a unique ID and the contents of that message.
      var messageElements = props.Messages
        .Select(savedMessage =&amp;gt; DOM.Div(new Attributes { Key = (int)savedMessage.Key },
        DOM.Span(new Attributes { ClassName = &quot;title&quot; }, savedMessage.Value.Title),
        DOM.Span(new Attributes { ClassName = &quot;content&quot; }, savedMessage.Value.Content)
        ));

      // When child components are specified (as they are through the second argument of
      // DOM.Div), the argument is of type Any&amp;lt;ReactElement, string&amp;gt;[] (meaning that each
      // element may be another component or it may be a simple text value)
      // - The React  bindings have an extension method that transforms an IEnumerable set
      //   of components (such as &quot;messageElements&quot;) into an Any&amp;lt;ReactElement, string&amp;gt;[]
      return DOM.FieldSet(
        new FieldSetAttributes { ClassName = className.ToStringIfDefined() },
        DOM.Legend(null, &quot;Message History&quot;),
        DOM.Div(null, messageElements.ToChildComponentArray())
      );
    }

    public class Props : IAmImmutable
    {
      public Props(
        Optional&amp;lt;NonBlankTrimmedString&amp;gt; className,
        Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt; messages)
      {
        this.CtorSet(_ =&amp;gt; _.ClassName, className);
        this.CtorSet(_ =&amp;gt; _.Messages, messages);
      }
      public Optional&amp;lt;NonBlankTrimmedString&amp;gt; ClassName { get; private set; }
      public Set&amp;lt;Saved&amp;lt;MessageId, MessageDetails&amp;gt;&amp;gt; Messages { get; private set; }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Re-build the application and refresh it in the browser. Now change the text input values while keeping an eye on the console. The &quot;MessageHistory.Render&quot; message will initially only appear in the console when the &lt;strong&gt;MessageHistory&lt;/strong&gt; component is first rendered, the changes to the text inputs no longer require the &lt;strong&gt;MessageHistory&lt;/strong&gt; component be redrawn by the Virtual DOM. When the message data actually changes (whether due to you saving a new message or due to a new Chuck Norris fact arriving), the &lt;strong&gt;MessageHistory&lt;/strong&gt; component &lt;em&gt;will&lt;/em&gt; update - indicated by another &quot;MessageHistory.Render&quot; message being displayed in the console.&lt;/p&gt;

&lt;p&gt;This is an excellent example of how using immutable structures can result in cleaner &lt;em&gt;and&lt;/em&gt; more efficient code. In a complicated UI (or if your application is very performance-sensitive - if you&#39;re trying to achieve 60fps on mobile, for example) then being able to save the Virtual DOM the work of determining whether entire branches of the component hierarchy should be re-rendered is invaluable. And getting this optimisation &quot;for free&quot; makes it even better - if you&#39;re following my recommendations and the vast majority of your React components are stateless and al of your data types are immutable then you might as well use the &lt;strong&gt;PureComponent&lt;/strong&gt; base class and reap the performance benefits.&lt;/p&gt;

&lt;h3&gt;PureComponent details&lt;/h3&gt;

&lt;p&gt;I want to go into some of the finer point of the &lt;strong&gt;PureComponent&lt;/strong&gt;&#39;s optimisation rules. There&#39;s nothing particularly complicated or surprising, but there are some nuances that it&#39;s worth being aware of.&lt;/p&gt;

&lt;p&gt;When the &lt;strong&gt;PureComponent&lt;/strong&gt; implements &quot;shouldComponentUpdate&quot; behind the scenes, the React library provides it with two separate instances to compare of the &lt;strong&gt;Props&lt;/strong&gt; class for the current component. The first thing that the &lt;strong&gt;PureComponent&lt;/strong&gt; does is ensure that the two props instances are of the same type (while it would be strange, it would not be illegal to create types derived from the component&#39;s &lt;strong&gt;Props&lt;/strong&gt; class - but if different derived types were provided for the old and new props then it doesn&#39;t seem safe to try to compare them, who knows &lt;em&gt;why&lt;/em&gt; they are different or what significance there could be in the differences). If the old and new props references &lt;em&gt;are&lt;/em&gt; of the precise same type, then it enumerates the properties on the type and compares the values on the old and new props instances. Each pair of property values must match - this means that they are either both null or they are both the same value of a primitive type or they are the same reference &lt;em&gt;or&lt;/em&gt; they are both non-null &lt;em&gt;and&lt;/em&gt; the first value has an &quot;Equals&quot; method that returns true when the second value is passed into it.&lt;/p&gt;

&lt;p&gt;On the whole, this means that things largely work completely intuitively. &lt;em&gt;Particularly&lt;/em&gt; due to the way that the &quot;With&quot; extension methods works for &lt;strong&gt;IAmImmutable&lt;/strong&gt;-implementing class. If &quot;With&quot; is called with a property value update where the new value is the same as the old value, then &quot;With&quot; returns the original instance unaltered. This is most easily explained with an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var title = new TextEditState(text: &quot;hello&quot;, validationError: null);
var title2 = title.With(_ =&amp;gt; _.Text, &quot;hello&quot;);
var title3 = title.With(_ =&amp;gt; _.Text, &quot;hell&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &quot;title2&quot; instance will be the same as the &quot;title&quot; reference - the text value was asked to changed from &quot;hello&quot; to &quot;hello&quot;, which is no change at all. Since the &lt;strong&gt;TextEditState&lt;/strong&gt; type is immutable, there is no pointing copying &quot;title&quot; to create a new &quot;title2&quot; reference with all of the same data. &quot;title3&quot; &lt;em&gt;will&lt;/em&gt; be a new instance, since the text value needs to change from &quot;hello&quot; to &quot;hell&quot;.&lt;/p&gt;

&lt;p&gt;Having &quot;With&quot; return the same reference when no change is required is beneficial for garbage collection - the fewer references that are created means the less work that it has to do. But it&#39;s also very important for the &lt;strong&gt;PureComponent&lt;/strong&gt; since that prefers to use referential equality to determine whether a property value has changed. If a &lt;strong&gt;Props&lt;/strong&gt; class has a &lt;strong&gt;TextEditState&lt;/strong&gt; property on it, when the values on the old and new props are compared then we want the &lt;strong&gt;TextEditState&lt;/strong&gt; references to be the same if the data that they represent hasn&#39;t changed.&lt;/p&gt;

&lt;p&gt;I think that another example is called for. In the example application from this series, the Message Editor form is given information in its props that describes the current state of the form - the &quot;Caption&quot;, the &quot;Title&quot; text-input-value-and-any-validation-message, the &quot;Content&quot; text-input-value-and-any-validation-message (and information about whether the form should be disabled because a save is in progress). This data is all contained within a &lt;strong&gt;MessageEditState&lt;/strong&gt; instance. The &lt;strong&gt;MessageEditor&lt;/strong&gt; component renders each text input by generating child &lt;strong&gt;ValidatedTextInput&lt;/strong&gt; components. These child &lt;strong&gt;ValidatedTextInput&lt;/strong&gt; components raise an &quot;OnChange&quot; event when the user wants to alter the content in the text input element, the event includes a string argument for the new text value. When this happens, the &lt;strong&gt;MessageEditor&lt;/strong&gt; takes this new text value and uses it to create a new &lt;strong&gt;MessageEditState&lt;/strong&gt; instance, using the &quot;With&quot; extension method - this new instance is then passed up on the &lt;strong&gt;MessageEditor&lt;/strong&gt;&#39;s &quot;OnChange&quot; event. This event will result in the UI being re-rendered to display the new data.&lt;/p&gt;

&lt;p&gt;However, React raises change events from text inputs for user interactions &lt;em&gt;even if they don&#39;t actually result in a change&lt;/em&gt;. If, for instance, there is a text input with the value &quot;Hello&quot; in it and you highlight that text and copy it to the clipboard and then paste it into that same text input then the value obviously hasn&#39;t changed, but React still raises a change event from the text input due to the paste action. What we want to happen in this case is for the &quot;new&quot; &lt;strong&gt;MessageEditState&lt;/strong&gt; instance that the &lt;strong&gt;MessageEditor&lt;/strong&gt; creates when it raises its &quot;OnChange&quot; event to be the exact same reference as the &lt;strong&gt;MessageEditState&lt;/strong&gt; given to the &lt;strong&gt;MessageEditor&lt;/strong&gt; when it last rendered. This way, when the &lt;strong&gt;MessageEditor&lt;/strong&gt; is asked to re-render then it will find that the &quot;new&quot; props data is exactly the same as the old props data and the &lt;strong&gt;PureComponent&lt;/strong&gt; logic will tell React that it needn&#39;t bother re-rendering the component at all.&lt;/p&gt;

&lt;p&gt;Maybe it&#39;s worth examining the &lt;strong&gt;MessageEditor&lt;/strong&gt; code again to try to make this seem less abstract:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.React;
using BridgeReactTutorial.API;
using BridgeReactTutorial.ViewModels;
using ProductiveRage.Immutable;

namespace BridgeReactTutorial.Components
{
  public class MessageEditor : StatelessComponent&amp;lt;MessageEditor.Props&amp;gt;
  {
    public MessageEditor(
      MessageEditState message,
      Action&amp;lt;MessageEditState&amp;gt; onChange,
      Action onSave,
      Optional&amp;lt;NonBlankTrimmedString&amp;gt; className = new Optional&amp;lt;NonBlankTrimmedString&amp;gt;())
      : base(new Props(className, message, onChange, onSave)) { }

    public override ReactElement Render()
    {
      var formIsInvalid =
        props.Message.Title.ValidationError.IsDefined ||
        props.Message.Content.ValidationError.IsDefined;

      return DOM.FieldSet(
        new FieldSetAttributes { ClassName = props.ClassName.ToStringIfDefined() },
        DOM.Legend(null, props.Message.Caption),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Title&quot;),
        new ValidatedTextInput(
          className: new NonBlankTrimmedString(&quot;title&quot;),
          disabled: props.Message.IsSaveInProgress,
          content: props.Message.Title.Text,
          onChange: newTitle =&amp;gt; props.OnChange(
            props.Message.With(_ =&amp;gt; _.Title, new TextEditState(newTitle))
          ),
          validationMessage: props.Message.Title.ValidationError
        ),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Content&quot;),
        new ValidatedTextInput(
          className: new NonBlankTrimmedString(&quot;content&quot;),
          disabled: props.Message.IsSaveInProgress,
          content: props.Message.Content.Text,
          onChange: newContent =&amp;gt; props.OnChange(
            props.Message.With(_ =&amp;gt; _.Content, new TextEditState(newContent))
          ),
          validationMessage: props.Message.Content.ValidationError
        ),
        DOM.Button(
        new ButtonAttributes
        {
          Disabled = formIsInvalid || props.Message.IsSaveInProgress,
          OnClick = e =&amp;gt; props.OnSave()
        },
        &quot;Save&quot;
        )
      );
    }

    public class Props : IAmImmutable
    {
      public Props(
        Optional&amp;lt;NonBlankTrimmedString&amp;gt; className,
        MessageEditState message,
        Action&amp;lt;MessageEditState&amp;gt; onChange,
        Action onSave)
      {
        this.CtorSet(_ =&amp;gt; _.ClassName, className);
        this.CtorSet(_ =&amp;gt; _.Message, message);
        this.CtorSet(_ =&amp;gt; _.OnChange, onChange);
        this.CtorSet(_ =&amp;gt; _.OnSave, onSave);
      }
      public Optional&amp;lt;NonBlankTrimmedString&amp;gt; ClassName { get; private set; }
      public MessageEditState Message { get; private set; }
      public Action&amp;lt;MessageEditState&amp;gt; OnChange { get; private set; }
      public Action OnSave { get; private set; }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the user attempted this copy-paste-same-value thing in the &quot;Title&quot; input, then the &quot;onChange&quot; event from the &lt;strong&gt;ValidatedTextInput&lt;/strong&gt; that renders the Title value would be raised -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;onChange: newTitle =&amp;gt; props.OnChange(
  props.Message.With(_ =&amp;gt; _.Title, new TextEditState(newTitle))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will result in the &lt;strong&gt;MessageEditor&lt;/strong&gt;&#39;s &quot;OnChange&quot; event being raised, with a new &lt;strong&gt;MessageEditState&lt;/strong&gt; instance. The key thing is that we want the new &lt;strong&gt;MessageEditState&lt;/strong&gt; instance to be the same as the current &lt;strong&gt;MessageEditState&lt;/strong&gt; instance if the new &quot;Title&quot; string is exactly the same as the current &quot;Title&quot; string.&lt;/p&gt;

&lt;p&gt;One way to do this would be to not worry about how &quot;With&quot; does or doesn&#39;t work and to add a condition into the lambda - eg.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;onChange: newTitle =&amp;gt;
{
  if (newTitle != props.Message.Title.text)
    props.OnChange(props.Message.With(_ =&amp;gt; _.Title, new TextEditState(newTitle)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, this means that more logic has to go in the components (which I want to avoid). Worse, it&#39;s boring and repetitive logic, which is the kind that I find is most likely to be done incorrectly by accident because you almost feel like you can write it on auto-pilot. It would be best if this could be handled automatically.&lt;/p&gt;

&lt;p&gt;Well, it &lt;em&gt;can&lt;/em&gt; be if we always use &quot;With&quot; to update values. In the code above, I&#39;ve actually been a bit naughty. A &lt;strong&gt;TextEditState&lt;/strong&gt; includes two values - &quot;Text&quot; and &quot;ValidationMessage&quot;. The &quot;ValidationMessage&quot; will get set according to the &quot;Text&quot; value when validation is applied (which happens in the &lt;strong&gt;MessageWriterStore&lt;/strong&gt; in this application). The code above creates a &lt;em&gt;new&lt;/em&gt; &lt;strong&gt;TextEditState&lt;/strong&gt; with the &quot;newTitle&quot; string, erasing any &quot;ValidationMessage&quot; value. This is not really correct, since only the validation logic should change the &quot;ValidationMessage&quot; value. In this example, a validation message should only be displayed if the text value is empty - but the components should have no knowledge of this since we want them to be as dumb as possible. So, any time that a component creates a new &lt;strong&gt;TextEditState&lt;/strong&gt; to include in an &quot;OnChange&quot; event, the &quot;ValidationMessage&quot; property should be untouched - again, it is the responsibility of the store (and &lt;em&gt;not&lt;/em&gt; the component) to worry about ensuring that the &quot;ValidationMessage&quot; value is correct for the &quot;Text&quot; value before a re-render is triggered.&lt;/p&gt;

&lt;p&gt;So, this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;onChange: newTitle =&amp;gt; props.OnChange(
  props.Message.With(_ =&amp;gt; _.Title, new TextEditState(newTitle))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should really be this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;onChange: newTitle =&amp;gt; props.OnChange(
  props.Message.With(_ =&amp;gt; _.Title, props.Message.Title.With(_ =&amp;gt; _.Text, newContent))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;em&gt;only&lt;/em&gt; changes the &quot;Text&quot; property on the &quot;Title&quot; &lt;strong&gt;TextEditState&lt;/strong&gt; - which means that, in our copy-paste-same-value case, no new &lt;strong&gt;TextEditState&lt;/strong&gt; instance will be created. This still means that the &lt;strong&gt;MessageEditor&lt;/strong&gt;&#39;s &quot;OnChange&quot; event will be raised (which will result in an action being sent through the Dispatcher and received by the &lt;strong&gt;MessageWriterStore&lt;/strong&gt;, which will raise a &quot;Change&quot; event and cause the &lt;strong&gt;AppContainer&lt;/strong&gt; to re-render the UI), but when the &lt;strong&gt;MessageEditor&lt;/strong&gt; is asked to re-render then it will realise that the new data is the same as its current data and it will tell React not to bother re-rendering it. The code still had to do one full pass of the raise-event-up-to-top-level-component-and-send-change-message-through-Dispatcher-to-the-Store, even though the data hadn&#39;t changed, but that sort of work is very cheap (certainly much cheaper than any DOM or even Virtual DOM interactions).&lt;/p&gt;

&lt;p&gt;All of the above came &quot;for free&quot; by using &lt;strong&gt;IAmImmutable&lt;/strong&gt;-implementing classes and &lt;strong&gt;PureComponent&lt;/strong&gt; and by applying updates using the &quot;With&quot; extension method. There are &lt;em&gt;some&lt;/em&gt; cases where you need to do a little work to help the system out, though. If you recall the &quot;ValidateMessage&quot; function that we wrote earlier -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static MessageEditState ValidateMessage(MessageEditState message)
{
  if (message == null)
    throw new ArgumentNullException(&quot;message&quot;);

  return message
    .With(_ =&amp;gt; _.Caption, ToNonBlankTrimmedString(message.Title, fallback: _defaultCaption))
    .With(_ =&amp;gt; _.Title, Validate(message.Title, MustHaveValue, _noTitleWarning))
    .With(_ =&amp;gt; _.Content, Validate(message.Content, MustHaveValue, _noContentWarning));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This always set the &quot;Caption&quot; based upon the &quot;Title&quot; value. If there is a &quot;Title&quot; value in the text input of the message editor form of &quot;My New Message&quot; then the &quot;Caption&quot; value will also be &quot;My New Message&quot;. The &quot;ToNonBlankTrimmedString&quot; method is implemented as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static NonBlankTrimmedString ToNonBlankTrimmedString(
  TextEditState textEditState,
  NonBlankTrimmedString fallback)
{
  if (textEditState == null)
    throw new ArgumentNullException(&quot;textEditState&quot;);
  if (fallback == null)
    throw new ArgumentNullException(&quot;fallback&quot;);

  return (textEditState.Text.Trim() == &quot;&quot;)
    ? fallback
    : new NonBlankTrimmedString(textEditState.Text);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time that &quot;ValidateMessage&quot; is called and there is a non-blank &quot;Title&quot; value then a new &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; instance will be created for the &quot;Caption&quot;. The problem is that if the &quot;Title&quot; input isn&#39;t changing (if the user is currently changing the &quot;Content&quot; text input box, for example) then we will be creating new &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; instances for the same &quot;Title&quot; value - and the &lt;strong&gt;PureComponent&lt;/strong&gt; will see each new &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; reference as a new and distinct value.&lt;/p&gt;

&lt;p&gt;We could try to prevent this by changing &quot;ValidateMessage&quot; such that it tries to avoid creating new &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; instances for the Caption -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static MessageEditState ValidateMessage(MessageEditState message)
{
  if (message == null)
    throw new ArgumentNullException(&quot;message&quot;);

  if (message.Title.Text.Trim() == &quot;&quot;)
    message = message.With(_ =&amp;gt; _.Caption, _defaultCaption);
  else if (message.Title.Text.Trim() != message.Caption)
    message = message.With(_ =&amp;gt; _.Caption, new NonBlankTrimmedString(message.Title.Text));

  return message
    .With(_ =&amp;gt; _.Title, Validate(message.Title, MustHaveValue, _noTitleWarning))
    .With(_ =&amp;gt; _.Content, Validate(message.Content, MustHaveValue, _noContentWarning));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. but this brings us back round to &quot;ValidateMessage&quot; being very noisy. This will have a tendency to make it prone to error and it definitely moves away from the goal of code clarity that I&#39;m aiming for.&lt;/p&gt;

&lt;p&gt;An alternative is to implement an &quot;Equals&quot; override for the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; class. The &quot;With&quot; extension method, like the &lt;strong&gt;PureComponent&lt;/strong&gt;&#39;s &quot;shouldComponentUpdate&quot; logic&quot;, will consider an &quot;Equals&quot; method if referential equality fails. This means that if we call &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.With(_ =&amp;gt; _.Caption, ToNonBlankTrimmedString(message.Title, fallback: _defaultCaption))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.. and if the return value from &quot;ToNonBlankTrimmedString&quot; is a &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; instance that is equivalent to the current &quot;Caption&quot; value (according to the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; &quot;Equals&quot; implementation below), then &quot;With&quot; will return the same reference.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge;
using Bridge.React;

namespace BridgeReactTutorial.API
{
  public sealed class NonBlankTrimmedString
  {
    public NonBlankTrimmedString(string value)
    {
      if (string.IsNullOrWhiteSpace(value))
        throw new ArgumentException(&quot;Null, blank or whitespace-only value specified&quot;);

      Value = value.Trim();
    }

    /// &amp;lt;summary&amp;gt;
    /// This will never be null, blank or have any leading or trailing whitespace
    /// &amp;lt;/summary&amp;gt;
    public string Value { get; private set; }

    /// &amp;lt;summary&amp;gt;
    /// It&#39;s convenient to be able to pass a NonBlankTrimmedString instance as any argument
    /// that requires a string
    /// &amp;lt;/summary&amp;gt;
    public static implicit operator string(NonBlankTrimmedString value)
    {
      if (value == null)
        throw new ArgumentNullException(&quot;value&quot;);
      return value.Value;
    }

    /// &amp;lt;summary&amp;gt;
    /// It&#39;s convenient to be able to pass a NonBlankTrimmedString instance as any argument
    /// that requires a ReactElement-or-string, such as for the children array of the React
    /// DOM component factories
    /// &amp;lt;/summary&amp;gt;
    public static implicit operator Any&amp;lt;ReactElement, string&amp;gt;(NonBlankTrimmedString value)
    {
      if (value == null)
        throw new ArgumentNullException(&quot;value&quot;);
      return value.Value;
    }

    public override bool Equals(object o)
    {
      var otherNonBlankTrimmedString = o as NonBlankTrimmedString;
      return
        (otherNonBlankTrimmedString != null) &amp;amp;&amp;amp;
        (otherNonBlankTrimmedString.Value == Value);
    }

    public override int GetHashCode()
    {
      return Value.GetHashCode();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having an &quot;Equals&quot; implementation on types such as &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; makes a lot of sense because we essentially want them to be treated as &quot;value types&quot; - if two references describe the same data then they should be treated as the same value. Note that a custom &quot;Equals&quot; implementation was not necessary for &lt;strong&gt;MessageId&lt;/strong&gt;, since that is a struct - in C#, structs &lt;a href=&quot;http://csharp.2000things.com/2011/09/14/411-overriding-the-equals-method-for-a-value-type/&quot;&gt;automatically get an &quot;Equals&quot; implementation created for them&lt;/a&gt; that considers two struct instances to be equivalent if all of their properties have the same values and the JavaScript generated by Bridge does the same in order to maintain compatibility.&lt;/p&gt;

&lt;p&gt;One thing that I snuck into the new &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; above is that the class is now sealed. If it is possible to inherit from a given class, it becomes much more difficult to implement a reliable &quot;Equals&quot; method. For the sake of argument, imagine a class &quot;X&quot; that is not sealed and that has a single string &quot;Value&quot; property and that implements its own &quot;Equals&quot; method, exactly the same as the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; &quot;Equals&quot; method above. Then imagine that a class &quot;Y&quot; is derived from &quot;X&quot; and adds a second property, a &quot;Count&quot; int. If &quot;Y&quot; does not override the &quot;Equals&quot; implementation on &quot;X&quot; then it seems likely that the &quot;Equals&quot; implementation that &quot;Y&quot; inherits from &quot;X&quot; will be inaccurate - if an instance of &quot;Y&quot; with a &quot;Value&quot; of &quot;Hello&quot; and &quot;Count&quot; of 1 was compared to another instance of &quot;Y&quot; with a &quot;Value&quot; of &quot;Hello&quot; but a &quot;Count&quot; of 2 then they would be considered to be equivalent, which would almost certainly not be the expected behaviour. There is an implicit assumption that if &quot;X&quot; is derived from and the derived type adds properties then that derived type should have its own &quot;Equals&quot; method. A failure to respect this implicit assumption will not result in any compiler warnings, it will likely result only in unexpected runtime behaviour at some point. I don&#39;t like implicit assumptions, as I&#39;m sure that you&#39;ve been able to tell from the themes in this post. An easy way to avoid this problem is to prevent &quot;X&quot; from being inherited from, by making it sealed. This is precisely what I&#39;ve done with the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This leads me on to another guideline - I believe that 99% of all classes should be abstract or sealed. Any class that may be inherited from requires planning, to try to make it as easy as possible for any derived types to work in non-suprising manners. This is complicated, if not impossible (as the &quot;Equals&quot; conundrum above hopefully illustrates for an extremely simple case). However, if you really think that it should be possible for a class to be inherited from, then I think that you should document any implicit assumptions on that base class and you should carefully think about how it should and shouldn&#39;t be used. I have found that the most common cases for which a base class are suitable are those where some shared functionality is required that can&#39;t easily be provided via composition (which I will talk about in a moment), but where that base class is not fully-functional itself and so must be inherited from in order to be useful. The &lt;strong&gt;Component&lt;/strong&gt;, &lt;strong&gt;StatelessComponent&lt;/strong&gt; and &lt;strong&gt;PureComponent&lt;/strong&gt; base classes in the Bridge / React bindings are excellent examples; they are required in order to define components that the React library can work with, but the classes are not functional on their own - they must be inherited from in order to be useful, therefore they are defined as abstract classes.&lt;/p&gt;

&lt;p&gt;Historically, I think that there have been beliefs that many object models lend themselves well to inheritance hierarchies. In Web Forms (if I remember correctly - it&#39;s been a long time), a &lt;strong&gt;Button&lt;/strong&gt; inherited from a &lt;strong&gt;WebControl&lt;/strong&gt; and that inherited from a &lt;strong&gt;Control&lt;/strong&gt; or a &lt;strong&gt;Component&lt;/strong&gt;.. or something. The idea was that every component as you went up the hierarchy was a specialisation of the one below it. Which arguably made sense. But I find that the waters often get very murky when these &quot;is-a&quot; hierachies are constructed and it&#39;s very easy to confuse a &quot;has-a&quot; characteristic for being an &quot;is-a&quot;. For example, the &lt;strong&gt;MessageWriterStore&lt;/strong&gt; needs to register for events from the Dispatcher, so perhaps it is a specialisation of a &quot;DispatcherMessageReceiver&quot;. But it&#39;s also responsible for saving messages, so perhaps it&#39;s also specialisation of a &quot;MessageRecorder&quot;. Not only is it more complicated to design classes that are intended to be inherited from, but C# only allows one class to inherit from a single base class - so if &lt;strong&gt;MessageWriterStore&lt;/strong&gt; needs to be a specialisation of both a &quot;DispatcherMessageReceiver&quot; &lt;em&gt;and&lt;/em&gt; a &quot;MessageRecorder&quot; then we have a problem; possibly only solved by creating a specialisation of the &quot;DispatcherMessageReceiver&quot; that &lt;em&gt;also&lt;/em&gt; deals with recording messages, so that the &lt;strong&gt;MessageWriterStore&lt;/strong&gt; can inherit from &lt;em&gt;that&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Perhaps that example is a little fatuous, but similar sorts of issues &lt;em&gt;do&lt;/em&gt; genuinely occur when inheritance trees are viewed as &quot;the best way&quot; to build classes. The alternative is to use composition, which is where classes are designed in a &quot;has-a&quot; manner. The current &lt;strong&gt;MessageWriterStore&lt;/strong&gt; is designed in this way as its constructor declares that it requires an &lt;strong&gt;AppDispatcher&lt;/strong&gt; and a &lt;strong&gt;IReadAndWriteMessages&lt;/strong&gt; implementation. Not only does composition avoid the multiple inheritance problem (also known as the &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem&quot;&gt;deadly diamond of death&lt;/a&gt;&quot;) but it makes code easier to fully comprehend. With inheritance, each class is a sum of its behaviour and all of the behaviour of its base class (which is likewise a sum of &lt;em&gt;its&lt;/em&gt; behaviour and all of the behaviour of &lt;em&gt;its&lt;/em&gt; base class, repeated for as many levels as the inheritance tree is deep). With composition, each piece is fully self-contained and communication between one part and another is throughly tightly constrained interfaces.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(A couple of months ago, I read &quot;&lt;a href=&quot;https://tech.scrunch.com/blog/5-reasons-your-team-will-love-you-for-composition/&quot;&gt;5 reasons your team will love you for composition&lt;/a&gt;&quot;, which I think offers a good take on some of the practical benefits positives of preferring composition to inheritance - it&#39;s well worth a quick read).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In summary, I strongly believe that almost all relations between classes may be described better by using composition than inheritance (where &quot;better&quot; means that the code is easier to reason about and, also, easier to test) and so almost no classes should need to be inherited from. In the few cases where inheritance &lt;em&gt;is&lt;/em&gt; necessary, the base classes must be carefully designed for inheritance and the use cases that necessitate inheritance will almost always be ones where the base classes are non-functional in isolation, where they &lt;em&gt;require&lt;/em&gt; a derived type in order to work.&lt;/p&gt;

&lt;p&gt;Therefore, 99% of classes should be written to be abstract or to be sealed. This goes for &lt;em&gt;all&lt;/em&gt; classes that I&#39;ve shown code for in this series - the &lt;strong&gt;MessageEditor&lt;/strong&gt; component class should be sealed, its &lt;strong&gt;Props&lt;/strong&gt; class should be sealed, the &lt;strong&gt;MessageWriterStore&lt;/strong&gt; should be sealed, the &lt;strong&gt;MessageDetails&lt;/strong&gt; should be sealed, the &lt;strong&gt;Saved&lt;/strong&gt; class should be sealed and the &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; should be sealed. They should &lt;em&gt;all&lt;/em&gt; be sealed.&lt;/p&gt;

&lt;p&gt;Now, if we wanted to play devil&#39;s advocate then we could say that any &quot;ClassName&quot; property on a component class shouldn&#39;t be &lt;strong&gt;Optional&amp;lt;NonBlankTrimmedString&amp;gt;&lt;/strong&gt; since I&#39;ve said that everything should be really specific, since richer types have a lot of value in expressing intent. We could say that there should be a more specific &lt;strong&gt;ClassName&lt;/strong&gt; class, which only allows characters that are valid in an html class name (React deals with encoding string &quot;ClassName&quot; properties, so this isn&#39;t really a big concern - but I&#39;m trying to prove another point, so bear with me). We could also say that this &lt;strong&gt;ClassName&lt;/strong&gt; class really &lt;em&gt;is&lt;/em&gt; a specialisation of &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; and so surely we should allow &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; to be inherited from so that &lt;strong&gt;ClassName&lt;/strong&gt; could be derived from it. On the surface, this doesn&#39;t seem too unreasonable. However, the only actual benefit of having &lt;strong&gt;ClassName&lt;/strong&gt; inherit from &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; (other than it just &lt;em&gt;feeling&lt;/em&gt; like something that may possibly be a good idea) would be if there was a point at which you had a method that took an argument of type &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; that you wanted to give a &lt;strong&gt;ClassName&lt;/strong&gt; instance - because it seems like any valid &lt;strong&gt;ClassName&lt;/strong&gt; will also be a valid &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt;. I think that the benefit is just too small to outweight the cost. Inheritance brings with it too much potential complication (and associated mental burden) that any small benefit like this is not enough to bring inheritance into play. On top of which, if you really did want to be able to use a &lt;strong&gt;ClassName&lt;/strong&gt; instance anywhere that a &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; is required, you could do this by implementing an implicit operator method on &lt;strong&gt;ClassName&lt;/strong&gt; that allows it be implicitly cast to a &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; - then you would have the marginal benefit of being able to use a &lt;strong&gt;ClassName&lt;/strong&gt; anywhere that you need a &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; but still be able to keep &lt;strong&gt;NonBlankTrimmedString&lt;/strong&gt; sealed and less prone to error.&lt;/p&gt;

&lt;p&gt;Writing classes that are sealed by default is another practice that I am still trying to instill into myself. Much like writing methods to be static by default, I think that it makes a huge amount of sense but it&#39;s also a concept that I&#39;ve only cemented in the last year or so and I&#39;m still trying to consistently apply it!&lt;/p&gt;

&lt;h3&gt;In summary&lt;/h3&gt;

&lt;p&gt;This has turned out to be a pretty huge post. But I didn&#39;t want to try to split it up because all of the principles are related, really.&lt;/p&gt;

&lt;p&gt;If you&#39;d stopped reading after &lt;a href=&quot;http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-part-two&quot;&gt;Part Two&lt;/a&gt; then I think that you would have the tools to construct client-side applications that will scale from something simple up to something massively complex. The combination of C# (which is time-proven as a language that not only enables large applications to be built and maintained over long periods of time, it is a language where it is not exceptional for this to be the case*) and React is very powerful.&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;(Languages such as PHP and JavaScript CAN be used to build and maintain large code bases, but I think that it&#39;s telling that the companies that take this work seriously rely on, and develop, additional tooling to make it manageable, like &lt;a href=&quot;http://hacklang.org/&quot;&gt;Hack&lt;/a&gt; and &lt;a href=&quot;http://flowtype.org/&quot;&gt;Flow&lt;/a&gt;).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, the principles behind React that I found most appealing when I first encountered it - that it primarily exists to make complicated interactions in an application simpler and scalable - are what I want to apply to my C#. In the concepts that I&#39;m advocating here for writing C# React applications &lt;em&gt;and&lt;/em&gt; in React itself, performance is not the number one priority; it is not something for which code clarity must be sacrificed in order to attain. Performance is, however, still important - but it is achieved through high-level design decisions and not through micro-optimisations (I still think that the best example of this is how performing particular operations on an immutable structure will almost always be slower than on the corresponding mutable structure, but the algorithms that may be written based upon the safe sharing of immutable types mean that actual application performance will be greater - whether this is in the avoidance of deep-cloning references for safety or in the way that the &lt;strong&gt;PureComponent&lt;/strong&gt; can avoid re-rendering of entire branches of the UI by the Virtual DOM).&lt;/p&gt;

&lt;p&gt;To summarise, I believe that if the guidelines presented here are followed then you will be able to go beyond the C# React applications that you would have written with Part-Two Knowledge and be able to write code that is easier to understand (whether by other Developers or by yourself, when you come back to a piece of code after six months), easier to maintain and extend &lt;em&gt;and&lt;/em&gt; that is more efficient.&lt;/p&gt;

&lt;p&gt;To recap, the guidelines are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Immutable data types are fantastic for code clarity (the classes themselves will require more lines of code than if they were mutable but this is a trade-off that is well worth making, plus you will often require less code in places that makes use of these classes - which is relevant if lines of code is the most important metric to you)&lt;/li&gt;
&lt;li&gt;Anything that can&#39;t be immutable should have accessibility that is as restricted as possible (Store classes are not immutable, but their public properties are all read-only)&lt;/li&gt;
&lt;li&gt;Implicit assumptions are &quot;silly mistakes&quot; waiting to happen, encoding as much in the type system as possible communicates intent to other Developers and moves various types of error from runtime to compile time (immutable types and strongly-typed IDs are both examples of this)&lt;/li&gt;
&lt;li&gt;Write static methods by default, only make them instance / non-static methods if and when they need to be&lt;/li&gt;
&lt;li&gt;Write sealed classes by default, if they really need to be inheritable then they likely should be abstract (classes should almost never be neither sealed nor abstract)&lt;/li&gt;
&lt;li&gt;Using simple composable abstractions can greatly improve code clarity (as we saw with the &quot;ValidateMessage&quot; method rewrite)&lt;/li&gt;
&lt;li&gt;Code clarity is king!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&#39;m not sure that there&#39;s anything earth-shatteringly original about any one of these suggestions. Combining them can, in my ever-so-humble opinion, result in significantly higher quality code than &lt;em&gt;not&lt;/em&gt; following them. While these posts have been about writing React applications using &lt;a href=&quot;http://bridge.net/&quot;&gt;Bridge.NET&lt;/a&gt;, these rules may be applied just as well to any C# code. The &lt;a href=&quot;https://www.nuget.org/packages/ProductiveRage.Immutable&quot;&gt;ProductiveRage.Immutable&lt;/a&gt; NuGet package only works with Bridge projects, though - but if anyone asked them I would happily consider recreating it for vanilla C#! :)&lt;/p&gt;

&lt;h3&gt;Is this really the end??&lt;/h3&gt;

&lt;p&gt;There are some other things to consider when writing complete Bridge / React applications. I keep saying that it&#39;s important for code to be testable, but I haven&#39;t offered any way to write the actual unit tests. I&#39;ve also not had to offer any URL-routing capabilities, since the example application is so simple. But routing &lt;em&gt;is&lt;/em&gt; something that is almost certainly going to be required in any real browser-based application.&lt;/p&gt;

&lt;p&gt;These are both technologies that I would like to cover in future posts, but probably as shorter follow-up pieces. In terms of &lt;em&gt;how&lt;/em&gt; to write React applications in C#, I am happy with what I&#39;ve covered in these three posts - I wanted to get the example code to where it is now but without jumping straight to the final architecture; I wanted to illustrate &lt;em&gt;why&lt;/em&gt; one-way data binding is so beneficial and then why a Flux-like structure is so helpful and then &lt;em&gt;why&lt;/em&gt; immutable types are such a good idea. Hopefully, by starting from the basics and introducing new concepts and approaches only when there was a way to illustrate the improvements that they yield, you all agree with me that this is the way to do things! &lt;/p&gt;

&lt;p&gt;Of course, if you disagree in general, or on any particular points, or you have any tweaks to what I&#39;ve suggested then I would be very interested to hear. That&#39;s what the comments section is for!&lt;/p&gt;
</description>
			<pubDate>Wed, 30 Mar 2016 21:32:00 GMT</pubDate>
		</item>
		<item>
			<title>Writing React apps using Bridge.NET - The Dan Way (Part Two)</title>
            <link>http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-part-two</link>
			<guid>http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-part-two</guid>
			<description>&lt;p&gt;To summarise where we got to in &lt;a href=&quot;http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-from-first-principles&quot;&gt;Part One&lt;/a&gt;: we&#39;ve got an entry form where, after you enter Title and Content values, you may save a message. During the message-saving process, the form and save button are disabled. Once the saving has completed, the form will be cleared and it will be re-enabled. Validation logic in the &lt;strong&gt;MessageEditor&lt;/strong&gt; prevents the form from being saved while one or both of the required inputs are without value. After the save has succeeded, a read action will begin in the background - once the read operation has completed, a &lt;strong&gt;MessageHistory&lt;/strong&gt; component will display all of the saved messages. All interactions with the &lt;strong&gt;MessageApi&lt;/strong&gt; are handled by the top-level &lt;strong&gt;AppContainer&lt;/strong&gt; component. Similarly, all user interaction events are passed up to this top-level component, from where re-renders of the UI state are triggered.&lt;/p&gt;

&lt;p&gt;I see this arrangement as a top-to-bottom tree in terms of rendering - the top-level component is in control of what to display in the component hierarchy beneath it, and all of the information required to display those child components is contained within the top-level component&#39;s state data.&lt;/p&gt;

&lt;p&gt;In terms of event-handling, events may occur deep down within the tree and are then passed back up to the top-level component. As an event passes up from the html element that it originates in, up to the top level, it will gather more and more information - for example, when a user requests a change to the &quot;Title&quot; text input (such as by pressing a key while the input has focus), then an event is raised by the &lt;strong&gt;TextInput&lt;/strong&gt; component saying that a string value should be changed. This &lt;strong&gt;TextInput&lt;/strong&gt; is a child component of the &lt;strong&gt;MessageEditor&lt;/strong&gt;, which acknowledges this string-changed event and raises it own event; a &lt;strong&gt;MessageDetails&lt;/strong&gt;-changed event. The &quot;Content&quot; value of this new message will be unchanged, but the &quot;Title&quot; value will have a new value - the new value that the &lt;strong&gt;TextInput&lt;/strong&gt; should take. This event is received by the &lt;strong&gt;AppContainer&lt;/strong&gt; and it uses it to update its internal representation of the application, changing its &quot;state&quot; reference by calling &quot;SetState&quot; and so triggering a re-render.&lt;/p&gt;

&lt;p&gt;The path may be traced downward when considering rendering and may be traced upward when considering events.&lt;/p&gt;

&lt;p&gt;This one-way passing of data is very powerful in terms of modelling interactions that are easy to follow. As a reminder, a common way to deal with interactions like this in days gone by (ie. before React popularised &quot;one-way bindings&quot;) was for changes to elements to be reflected immediately in-place and for any interested parties to subscribe to events that those elements raise after they change. So, for the message entry form -&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;The proposed example app&quot; src=&quot;http://www.productiverage.com/Content/Images/Posts/ReactTutorial2.png&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&lt;/p&gt;

&lt;p&gt;With the old method, the &quot;Title&quot; and the &quot;Content&quot; inputs would accept changes that the user makes immediately - and the fieldset legend and the save button components would need to listen out to some of these changes. The legend changes to match what is entered in the &quot;Title&quot; input (unless it&#39;s blank, in which case the legend shows &quot;Untitled&quot;). The save button needs to be enabled if both &quot;Title&quot; and &quot;Content&quot; have values and &lt;em&gt;disabled&lt;/em&gt; if one or both of them are without.&lt;/p&gt;

&lt;p&gt;I mentally envisage this as star-shaped event handling - a change to one element may fan out to many others. In some cases, these changes would then cascade on to other elements, and then on again and again (hopefully not &quot;again and again and..&quot;, but it was difficult to keep a handle on these things with this sort of approach - because it was difficult to get a simple view as to what could affect what).&lt;/p&gt;

&lt;p&gt;With one-way data binding, events go up to the top, are processed and then the re-render distributes this new information all the way down. When the &lt;strong&gt;MessageEditor&lt;/strong&gt; is rendered, it knows what the current &quot;Title&quot; value is and so it knows what to put in that &quot;Title&quot; &lt;strong&gt;TextInput&lt;/strong&gt; &lt;em&gt;and&lt;/em&gt; it knows what the fieldset legend should be &lt;em&gt;and&lt;/em&gt; it knows whether the save button should be enabled or not.&lt;/p&gt;

&lt;p&gt;This arrangement can take you a long way, I think. But there are a couple of things that I take issue with -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I want to be able to easily unit test logic in my application and, while the React library goes a long way to taming the DOM, testing UI components will never be as easy as testing &quot;pure&quot; JavaScript (well, pure C# with Bridge, that will &lt;em&gt;become&lt;/em&gt; pure JavaScript) - consequently, I want to be able to extract as much logic out of the UI components as possible&lt;/li&gt;
&lt;li&gt;If any more event sources are added to the application, then dealing with these events becomes awkward - another &quot;event source&quot; may, for example, be something in the persistence layer that polls for new data from other users (which might not be uncommon since we&#39;re creating web applications and these are commonly expected to be multi-user, so it&#39;s beneficial to be able to reflect changes made by other users)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can refine this arrangement a little by introducing an intermediary for events to pass through and by pulling out the logic that exists within components (such as the validation within the &lt;strong&gt;MessageEditor&lt;/strong&gt; and the when-a-save-happens-then-.. logic in the &lt;strong&gt;AppContainer&lt;/strong&gt;).&lt;/p&gt;

&lt;h3&gt;From up-and-down to round-and-round&lt;/h3&gt;

&lt;p&gt;Rather than talk about how some applications could theoretically benefit from a change to the architecture, I want to do it with a demonstration.&lt;/p&gt;

&lt;p&gt;I&#39;m going to change the &lt;strong&gt;MessageApi&lt;/strong&gt; so that, after a short delay, new messages start appearing in its internal list. The &quot;SaveMessage&quot; and &quot;GetMessages&quot; methods are unchanged, it&#39;s just that there&#39;s a background process going on as well. To keep things interesting, I&#39;m going to source these message from the &lt;a href=&quot;http://www.icndb.com/api/&quot;&gt;The Internet Chuck Norris Database API&lt;/a&gt; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Bridge;
using Bridge.Html5;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.API
{
  public class MessageApi : IReadAndWriteMessages
  {
    private readonly List&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; _messages;
    public MessageApi()
    {
      _messages = new List&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt;();

      // To further mimic a server-based API (where other people may be recording messages
      // of their own), after a 10s delay a periodic task will be executed to retrieve a
      // new message
      Window.SetTimeout(
        () =&amp;gt; Window.SetInterval(GetChuckNorrisFact, 5000),
        10000
      );
    }

    public Task SaveMessage(MessageDetails message)
    {
      if (message == null)
        throw new ArgumentNullException(&quot;message&quot;);
      if (string.IsNullOrWhiteSpace(message.Title))
        throw new ArgumentException(&quot;A title value must be provided&quot;);
      if (string.IsNullOrWhiteSpace(message.Content))
        throw new ArgumentException(&quot;A content value must be provided&quot;);

      var task = new Task&amp;lt;object&amp;gt;(null);
      Window.SetTimeout(
        () =&amp;gt;
        {
          _messages.Add(Tuple.Create(_messages.Count, message));
          task.Complete();
        },
        1000 // Simulate a roundtrip to the server
      );
      return task;
    }

    public Task&amp;lt;IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt;&amp;gt; GetMessages()
    {
      // ToArray is used to return a clone of the message set - otherwise, the caller would
      // end up with a list that is updated when the internal reference within this class
      // is updated (which sounds convenient but it&#39;s not the behaviour that would be
      // exhibited if this was really persisting messages to a server somewhere)
      var task = new Task&amp;lt;IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt;&amp;gt;(null);
      Window.SetTimeout(
        () =&amp;gt; task.Complete(_messages.ToArray()),
        1000 // Simulate a roundtrip to the server
      );
      return task;
    }

    private void GetChuckNorrisFact()
    {
      var request = new XMLHttpRequest();
      request.ResponseType = XMLHttpRequestResponseType.Json;
      request.OnReadyStateChange = () =&amp;gt;
      {
        if (request.ReadyState != AjaxReadyState.Done)
          return;

        if ((request.Status == 200) || (request.Status == 304))
        {
          try
          {
            var apiResponse = (ChuckNorrisFactApiResponse)request.Response;
            if ((apiResponse.Type == &quot;success&quot;)
            &amp;amp;&amp;amp; (apiResponse.Value != null)
            &amp;amp;&amp;amp; !string.IsNullOrWhiteSpace(apiResponse.Value.Joke))
            {
              // The Chuck Norris Facts API (http://www.icndb.com/api/) returns strings
              // html-encoded, so they need decoding before be wrapped up in a
              // MessageDetails instance
              SaveMessage(new MessageDetails
              {
                Title = &quot;Fact&quot;,
                Content = HtmlDecode(apiResponse.Value.Joke)
              });
              return;
            }
          }
          catch
          {
            // Ignore any error and drop through to the fallback message-generator below
          }
        }
        SaveMessage(new MessageDetails
        {
          Title = &quot;Fact&quot;,
          Content = &quot;API call failed when polling for server content :(&quot;
        });
      };
      request.Open(&quot;GET&quot;, &quot;http://api.icndb.com/jokes/random&quot;);
      request.Send();
    }

    private string HtmlDecode(string value)
    {
      if (value == null)
        throw new ArgumentNullException(&quot;value&quot;);

      var wrapper = Document.CreateElement(&quot;div&quot;);
      wrapper.InnerHTML = value;
      return wrapper.TextContent;
    }

    [IgnoreCast]
    private class ChuckNorrisFactApiResponse
    {
      public extern string Type { [Template(&quot;type&quot;)] get; }
      public extern FactDetails Value { [Template(&quot;value&quot;)] get; }

      [IgnoreCast]
      public class FactDetails
      {
        public extern int Id { [Template(&quot;id&quot;)] get; }
        public extern string Joke { [Template(&quot;joke&quot;)]get; }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;The Chuck-Norris-fact-retrieval code could be made shortener by casting the &quot;apiResponse&quot; reference to &lt;strong&gt;dynamic&lt;/strong&gt;, but I thought that it would a nice opportunity to show how you can call a JSON-returning API with Bridge and then access the data through a known object model (which is why I created a &lt;strong&gt;ChuckNorrisFactApiResponse&lt;/strong&gt; class to use instead).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Without any other changes to the code we have so far, this works.. in a manner of speaking. Any time you save a message of your own, the read action that follows the save will pull back &lt;em&gt;all&lt;/em&gt; of the messages from the &lt;strong&gt;MessageApi&lt;/strong&gt;&#39;s in-memory set. So, when a read is explicitly initiated, all of the most recent data will come back.&lt;/p&gt;

&lt;p&gt;But it would be nice if the new messages could appear in the &lt;strong&gt;MessageHistory&lt;/strong&gt; even without you, as the user, saving your own messages. They could appear in the history even as you are in the process of writing your own content.&lt;/p&gt;

&lt;p&gt;One way to do this would be to have the &lt;strong&gt;MessageApi&lt;/strong&gt; raise an event whenever its message history data changes. Then, the &lt;strong&gt;AppContainer&lt;/strong&gt; would listen for events from its &lt;strong&gt;MessageApi&lt;/strong&gt; reference (which it has in its props, since props on a stateful component are used to provide references to the &quot;external environment&quot;) as well as listening to events from the components that it renders.&lt;/p&gt;

&lt;p&gt;On the one hand, this would actually make the save logic cleaner - the OnSave handler that the &lt;strong&gt;AppContainer&lt;/strong&gt; passes to the &lt;strong&gt;MessageEditor&lt;/strong&gt; in its props would only have to disable the form during the save and clear / re-enable it after the save, it &lt;em&gt;wouldn&#39;t&lt;/em&gt; have to then request updated message data from the &lt;strong&gt;MessageApi&lt;/strong&gt;, since it would know that the &lt;strong&gt;MessageApi&lt;/strong&gt; would raise its own event when it had accepted the newly-saved message. &lt;/p&gt;

&lt;p&gt;But, on the other hand, dealing with more event sources means that more logic is required in the &lt;strong&gt;AppContainer&lt;/strong&gt; (which I want to move away from) and we no longer have the simple rendering-goes-down-the-tree and events-come-up-the-tree, now we have rendering-goes-down-the-tree and events-come-up-the-tree &lt;em&gt;and&lt;/em&gt; events-come-from-some-other-places-too.&lt;/p&gt;

&lt;p&gt;So I&#39;m going to look at an alternative..&lt;/p&gt;

&lt;h4&gt;Extracting UI logic&lt;/h4&gt;

&lt;p&gt;Instead of the &lt;strong&gt;AppContainer&lt;/strong&gt; potentially having to deal with multiple event sources and working out how events may or may not change its state, I&#39;m going to pull that handling of UI state into another class entirely; somewhere to &lt;em&gt;store&lt;/em&gt; this state, that will act as a single (and very simple) event source for &lt;strong&gt;AppContainer&lt;/strong&gt;. This store will have a single event that the &lt;strong&gt;AppContainer&lt;/strong&gt; will subscribe to; an argument-less &quot;OnChange&quot; event. When the &lt;strong&gt;AppContainer&lt;/strong&gt; receives an &quot;OnChange&quot; event from the store, it will access data that the store makes available in order to update its own state reference and thus trigger a re-render.&lt;/p&gt;

&lt;p&gt;Since events will be handled by this store, whenever an event from the component tree is passed up to the &lt;strong&gt;AppContainer&lt;/strong&gt;, the &lt;strong&gt;AppContainer&lt;/strong&gt; needs to pass it along to the store (instead of trying to process the event itself). So the &lt;strong&gt;AppContainer&lt;/strong&gt; could act like an event source for this new store class. And, since the store class will be dealing with processing events (such as &quot;user has requested a new message be saved&quot;), it will also have to deal with the &lt;strong&gt;MessageApi&lt;/strong&gt; being an event source.&lt;/p&gt;

&lt;p&gt;This is a good illustration of separation of concerns - the &lt;strong&gt;AppContainer&lt;/strong&gt; used to be responsible for rendering the component tree &lt;em&gt;and&lt;/em&gt; dealing with handling events (which is where the real complexity of an application lies). With this new plan, the &lt;strong&gt;AppContainer&lt;/strong&gt; will only deal with re-rendering and the event processing is dealt with by &quot;pure&quot; (ie. non-UI-related) C# code. However, we could &lt;em&gt;still&lt;/em&gt; make the &quot;multiple event source&quot; issue a little cleaner. The store in this example will only have two event sources (the &lt;strong&gt;AppContainer&lt;/strong&gt; - from user interactions - and the &lt;strong&gt;MessageApi&lt;/strong&gt; - from new Chuck Norris facts arriving), but a more complex application could result in many event sources being required.&lt;/p&gt;

&lt;p&gt;And, sometimes, a particular store might not even want access to the full event source reference; if our store was &lt;em&gt;only&lt;/em&gt; going to be used for dealing with data for a form that edits an existing message (and doesn&#39;t want to show a message history anywhere), then it wouldn&#39;t need a full &lt;strong&gt;MessageApi&lt;/strong&gt; reference - it just needs to be able to read one message in particular to edit, be able to request a change to that message be saved and then know when that save request had been processed. For this store to say that it requires a full &lt;strong&gt;MessageApi&lt;/strong&gt; would be an exaggeration - it would be claiming that it had a greater dependency than it really does.&lt;/p&gt;

&lt;p&gt;It makes sense to have one &quot;UI store&quot; per page of your application, so if we were to extend this example such that the main page allowed you to record new messages and see the message history and we added a way to edit a particular message on a different screen, then we might have two stores and two top-level components and a router to handle navigation from one to the other. I don&#39;t want to jump too far ahead here, I just mean to point out that different stores may rely upon different event sources and rely on different abilities of those event sources.&lt;/p&gt;

&lt;h4&gt;The message bus&lt;/h4&gt;

&lt;p&gt;So the next change that I&#39;m going to propose is to decouple event sources from the store by having all events broadcast as messages. These are sent to some sort of message bus, which then passes them on to any interested parties. This would mean that the &lt;strong&gt;AppContainer&lt;/strong&gt; would send a message to the bus whenever the user has interacted with the UI (whether this be an edit to a field or a request to save). When &quot;SaveMessage&quot; is called on the &lt;strong&gt;MessageApi&lt;/strong&gt; then it will no longer return a &lt;strong&gt;Task&lt;/strong&gt;, instead a message will be passed to the bus when the save has completed. When a new Chuck Norris fact is received by the &lt;strong&gt;MessageApi&lt;/strong&gt;, it will send a message to the bus to say that new message data is available.&lt;/p&gt;

&lt;p&gt;This would mean that the store class will only have a single &quot;event source&quot;, which is this message bus. It will subscribe to this bus, and whenever a message is dispatched that the store is interested in then it will deal with it accordingly. If a store were to receive a message that it &lt;em&gt;wasn&#39;t&lt;/em&gt; interested in, then it would just ignore it.&lt;/p&gt;

&lt;p&gt;Introducing a message bus like this is a common technique to decouple areas of a system and it is another approach that makes unit testing easier later on - since the store class(es) are where the complicated event-handling logic lives, this is the code that needs the most testing. With this proposed arrangement, to test a store&#39;s logic you need only to new one up, pass it a message bus reference used solely within the current unit test, push particular messages through the bus and then verify that the store raises its OnChange event after messages when you expect it to and that the data that the store makes public is what you expect at these times. This allows all of the complicated logic to be tested with zero UI components involved and reduces the times when mocks are required since so much of the communication with the store is done via messages. (In order to test the &quot;Save&quot; functionality in our example app, a mock &lt;strong&gt;IReadAndWriteMessages&lt;/strong&gt; &lt;em&gt;would&lt;/em&gt; be required by our &lt;strong&gt;MessageWriterStore&lt;/strong&gt;, however, so that it could call &quot;SaveMessage&quot; on something that doesn&#39;t actually persist data - and so that the unit test could confirm that &quot;SaveMessage&quot; was called with the expected data).&lt;/p&gt;

&lt;p&gt;To summarise all of the above, we will move away slightly from the paths of communication being rendering-goes-down-the-tree and events-come-up-the-tree. Before, these paths were a continuous chain because events came up the tree and were processed and the re-render immediately went back down the tree again. Now we have rendering-goes-down-the-tree and events-come-up-the-tree but then nothing seems to happen immediately, instead the top-level component sends off a message and does nothing more.. until the store receives that message, processes it as an event (and applies any complicated logic) and then raises its OnChange event, which the top-level component receives and triggers a re-render.&lt;/p&gt;

&lt;p&gt;I must admit, that sounds &lt;em&gt;more&lt;/em&gt; complicated! But don&#39;t lose sight of the fact that we will side-step the complexities that multiple event sources can introduce &lt;em&gt;and&lt;/em&gt; we will separate logic from UI, making the code more testable &lt;em&gt;and&lt;/em&gt; making each part of it easier to reason about and thus easier to maintain and extend in the future.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note: This approach brings us much closer to treating everything as &quot;asynchronous by default&quot; - even UI changes now are implemented in a fire-and-forget manner; the top-level component sends out a message when the UI should be updated and then does nothing until it&#39;s informed by the store that it should update. While it initially feels strange to not expect to &quot;immediately&quot; update UI components in a synchronous manner, the advantage to async being the norm is that it&#39;s common for async code to be a bit scary in otherwise synchronous code - but here it&#39;s all the same, and not scary at all. It&#39;s also worth noting that we weren&#39;t truly updating in a synchronous manner before, since React&#39;s SetState method actually operates asynchronously - this allows React to batch updates if many occur in succession, potentially further reducing the number of times that the browser DOM actually needs to be interacted with; clever stuff!)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;The new architecture&lt;/h3&gt;

&lt;p&gt;I must admit, at this point, that I can&#39;t take any credit for the above ideas. What I&#39;ve outlined is referred to as the &lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html#content&quot;&gt;Flux Architecture&lt;/a&gt; (since different people have extracted their own variations on the concept, it might be safer to describe it as a Flux-like architecture, but let&#39;s not split hairs).&lt;/p&gt;

&lt;p&gt;Below is the classic Flux diagram -&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;The proposed example app&quot; src=&quot;http://www.productiverage.com/Content/Images/Posts/FluxDiagramSimple.png&quot; class=&quot;AlwaysFullWidth&quot;&gt;&lt;/p&gt;

&lt;p&gt;The message bus is referred to as the &quot;Dispatcher&quot;, messages are known as &quot;Actions&quot;. The &quot;View&quot; is the React component tree (the &lt;strong&gt;AppContainer&lt;/strong&gt; listens for the &quot;OnChange&quot; event from the Store and re-renders when it receives it). Note that actions come not just from the View but also from outside the cycle; in our case we have messages coming from the &lt;strong&gt;MessageApi&lt;/strong&gt; when new Chuck Norris facts arrive. In an application with routing, there would be actions from the router when the URL changes.&lt;/p&gt;

&lt;p&gt;So... what&#39;s required to get from the current architecture that the example application has to a Flux-like one?&lt;/p&gt;

&lt;p&gt;Let&#39;s start with the Dispatcher and the messages that flow through it. The first good news is that the Bridge React bindings include a Dispatcher implementation; the &lt;strong&gt;AppDispatcher&lt;/strong&gt;. This has three methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void Register(Action&amp;lt;DispatcherMessage&amp;gt; callback);
void HandleViewAction(IDispatcherAction action);
void HandleServerAction(IDispatcherAction action);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;DispatcherMessage&lt;/strong&gt; is a class with two properties; a &quot;Source&quot; (either &quot;Server&quot; or &quot;View&quot;) and &quot;Action&quot;. In some scenarios it may be useful to know if an action has originated from the server (such as new data arriving via the API) or from the view. To be honest, I haven&#39;t found it to be very important very often, but you might theoretically bypass some complicated validation if you know that data has come from the server rather than the user - frankly, I think that this sort of information is better expressed through a rich object model (which I&#39;ll be talking about in part three) and so the most compelling reason for actions being identified as from-Server or from-User is that it&#39;s consistent with other Flux implementations out there. The &lt;strong&gt;IDispatcherAction&lt;/strong&gt; interface is empty and is only used as a marker, to identify classes as being intended for use as a Dispatcher action.&lt;/p&gt;

&lt;p&gt;When writing in JavaScript, actions tend to be simple objects with a &quot;type&quot; or &quot;actionType&quot; property that identifies what sort of action it is. It will then have further properties, depending upon what action it needs to describe. I&#39;ve taken the below example from an article (that wasn&#39;t written by me); &lt;a href=&quot;http://spapas.github.io/2015/09/08/more-complex-react-flux-example/&quot;&gt;A (little more) complex react and flux example&lt;/a&gt; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AppDispatcher.dispatch({
  actionType: BookConstants.MESSAGE_ADD,
  message: {
    color: &#39;green&#39;,
    text: msg
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, we&#39;re writing in C# and we&#39;re going to take advantage of that! Our actions will be distinct types. When the store listens out messages, it won&#39;t compare an &quot;actionType&quot; string to work out what a particular action represents, instead we&#39;ll perform type comparisons and, when we find an action that we&#39;re interested in, we&#39;ll cast the current action to the matched type and then access its data in a type-safe manner.&lt;/p&gt;

&lt;p&gt;Create a new folder in the project from &lt;a href=&quot;http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-from-first-principles&quot;&gt;Part One&lt;/a&gt; called &quot;Actions&quot;. The simplest action to begin with is the action that would be raised by the &lt;strong&gt;AppContainer&lt;/strong&gt; when the user has clicked the Save button -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.React;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Actions
{
  public class MessageSaveRequested : IDispatcherAction
  {
    public MessageDetails Message;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previously, the &lt;strong&gt;AppContainer&lt;/strong&gt;&#39;s Render method contained logic about dealing with save requests -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OnSave = async () =&amp;gt;
{
  // Set SaveInProgress to true while the save operation is requested
  SetState(new State {
    Message = state.Message,
    IsSaveInProgress = true,
    MessageHistory = state.MessageHistory
  });
  await props.MessageApi.SaveMessage(state.Message);

  // After the save has completed, clear the message entry form and reset
  // SaveInProgress to false
  SetState(new State {
    Message = new MessageDetails { Title = &quot;&quot;, Content = &quot;&quot; },
    IsSaveInProgress = false,
    MessageHistory = state.MessageHistory
  });

  // Then re-load the message history state and re-render when that data arrives
  var allMessages = await props.MessageApi.GetMessages();
  SetState(new State {
    Message = state.Message,
    IsSaveInProgress = state.IsSaveInProgress,
    MessageHistory = allMessages
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, if all that it needs to do when a save-request bubbles up to it is send an appropriate action through the Dispatcher, then it becomes much simpler -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OnSave = () =&amp;gt; props.Dispatcher.HandleViewAction(
   new MessageSaveRequested { Message = state.Message }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&#39;ve only shown the change to the &quot;OnSave&quot; property, rather than show the change within the context of the complete &lt;strong&gt;AppContainer&lt;/strong&gt; class because there are other things I want to rearrange at this point. Firstly, the &lt;strong&gt;MessageEditor&lt;/strong&gt; &quot;OnChange&quot; handler also needs to be altered - as I described above, when a user interaction is expected to require a re-render, this will &lt;em&gt;not&lt;/em&gt; result in SetState being called immediately. Instead, an action will be sent to the Dispatcher. We need to define this action, so create another class in the &quot;Actions&quot; folder -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.React;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Actions
{
  public class MessageEditStateChanged : IDispatcherAction
  {
    public MessageEditState NewState;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other change is in the format of the data that is passed to the &lt;strong&gt;MessageEditor&lt;/strong&gt;. Before, separate &quot;Title&quot;, &quot;Content&quot; and &quot;Disabled&quot; values were passed to it and the component would do three things with that information -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It would populate the &quot;Title&quot; and &quot;Content&quot; text inputs with the provided values&lt;/li&gt;
&lt;li&gt;If the &quot;Title&quot; string was populated then this value would be used to set the fieldset legend text, otherwise the legend would show &quot;Untitled&quot;&lt;/li&gt;
&lt;li&gt;Validation messages would be displayed for &quot;Title&quot; and &quot;Content&quot; if one or both of the values was blank&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These second and third things are precisely the sort of logic that should be extracted out into the store. Consequently, the &lt;strong&gt;MessageEditor&lt;/strong&gt; will be changed so that it no longer takes these individual values and, instead, takes a &lt;strong&gt;MessageEditState&lt;/strong&gt; that has a &quot;Caption&quot; string  (for the legend text), &quot;Title&quot; and &quot;Content&quot; strings and validation messages for these user-entered strings. The &quot;Disabled&quot; property will replaced with &quot;IsSaveInProgress&quot; - if this is true then none of the form elements (the text inputs or the save button) should be enabled. If a save is &lt;em&gt;not&lt;/em&gt; in progress, then the text inputs should be enabled but the save button should only be enabled if neither validation message has any content. That is arguably more logic that could be extracted, but I think that this approach will strike a good balance - keeping the component &quot;dumb&quot; without having to spell out every little thing to the nth degree. Add two new files to the &quot;ViewModels&quot; folder to define the following classes -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace BridgeReactTutorial.ViewModels
{
  public class MessageEditState
  {
    public string Caption;
    public TextEditState Title;
    public TextEditState Content;
    public bool IsSaveInProgress;
  }
}

namespace BridgeReactTutorial.ViewModels
{
  public class TextEditState
  {
    public string Text;
    public string ValidationError;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;strong&gt;MessageEditor&lt;/strong&gt; may be rewritten to the following (note that after this change, the project isn&#39;t going to compile any more - there are a bunch of other alterations that will be required until everything builds again, all of which will be covered below):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.React;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Components
{
  public class MessageEditor : StatelessComponent&amp;lt;MessageEditor.Props&amp;gt;
  {
    public MessageEditor(Props props) : base(props) { }

    public override ReactElement Render()
    {
      var formIsInvalid =
        !string.IsNullOrWhiteSpace(props.Message.Title.ValidationError) ||
        !string.IsNullOrWhiteSpace(props.Message.Content.ValidationError);

      return DOM.FieldSet(new FieldSetAttributes { ClassName = props.ClassName },
        DOM.Legend(null, props.Message.Caption),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Title&quot;),
        new ValidatedTextInput(new ValidatedTextInput.Props
        {
          ClassName = &quot;title&quot;,
          Disabled = props.Message.IsSaveInProgress,
          Content = props.Message.Title.Text,
          OnChange = newTitle =&amp;gt; props.OnChange(new MessageEditState
          {
            Title = new TextEditState { Text = newTitle },
            Content = props.Message.Content
          }),
          ValidationMessage = props.Message.Title.ValidationError
        }),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Content&quot;),
        new ValidatedTextInput(new ValidatedTextInput.Props
        {
          ClassName = &quot;content&quot;,
          Disabled = props.Message.IsSaveInProgress,
          Content = props.Message.Content.Text,
          OnChange = newContent =&amp;gt; props.OnChange(new MessageEditState
          {
            Title = props.Message.Title,
            Content = new TextEditState { Text = newContent },
          }),
          ValidationMessage = props.Message.Content.ValidationError
        }),
        DOM.Button(
          new ButtonAttributes
          {
            Disabled = formIsInvalid || props.Message.IsSaveInProgress,
            OnClick = e =&amp;gt; props.OnSave()
          },
          &quot;Save&quot;
        )
      );
    }

    public class Props
    {
      public string ClassName;
      public MessageEditState Message;
      public Action&amp;lt;MessageEditState&amp;gt; OnChange;
      public Action OnSave;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;strong&gt;AppContainer&lt;/strong&gt; becomes &lt;em&gt;much&lt;/em&gt; simpler -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.ViewModels;
using BridgeReactTutorial.Stores;

namespace BridgeReactTutorial.Components
{
  public class AppContainer : Component&amp;lt;AppContainer.Props, AppContainer.State&amp;gt;
  {
    public AppContainer(AppContainer.Props props) : base(props) { }

    protected override void ComponentDidMount()
    {
      props.Store.Change += StoreChanged;
    }
    protected override void ComponentWillUnmount()
    {
      props.Store.Change -= StoreChanged;
    }
    private void StoreChanged()
    {
      SetState(new State
      {
        Message = props.Store.Message,
        MessageHistory = props.Store.MessageHistory
      });
    }

    public override ReactElement Render()
    {
      if (state == null)
        return null;

      return DOM.Div(null,
        new MessageEditor(new MessageEditor.Props
        {
          ClassName = &quot;message&quot;,
          Message = state.Message,
          OnChange = newState =&amp;gt; props.Dispatcher.HandleViewAction(
            new MessageEditStateChanged { NewState = newState }
          ),
          OnSave = () =&amp;gt; props.Dispatcher.HandleViewAction(
            new MessageSaveRequested
            {
              Message = new MessageDetails
              {
                Title = state.Message.Title.Text,
                Content = state.Message.Content.Text
              }
            }
          )
        }),
        new MessageHistory(new MessageHistory.Props
        {
          ClassName = &quot;history&quot;,
          Messages = state.MessageHistory
        })
      );
    }

    public class Props
    {
      public AppDispatcher Dispatcher;
      public MessageWriterStore Store;
    }

    public class State
    {
      public MessageEditState Message;
      public IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; MessageHistory;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is now almost devoid of logic, it only exists to listen to changes from the store (which we&#39;ll define in a moment), to render components and to direct events that are passed up from these components to the Dispatcher. Note that it no longer has any dependency upon the &lt;strong&gt;MessageApi&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A couple of things to note - the Dispatcher and Store are both passed to the component through its props, but when the Store raises a Change event the &lt;strong&gt;AppContainer&lt;/strong&gt; copies data references from the Store into its own state, meaning that &lt;em&gt;all&lt;/em&gt; of the information that the &lt;strong&gt;AppContainer&lt;/strong&gt; requires to render itself is contained within its state. This follows the &quot;Guidelines for Stateful Components&quot; that I wrote &lt;a href=&quot;http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-from-first-principles&quot;&gt;last time&lt;/a&gt; -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A stateful component&#39;s &quot;props&quot; data should &lt;em&gt;only&lt;/em&gt; consist of references to external dependencies&lt;/li&gt;
&lt;li&gt;A stateful component&#39;s &quot;state&quot; data should include &lt;em&gt;everything&lt;/em&gt; required to render the component tree, though the props may be required to deal with child components&#39; events&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;strong&gt;AppContainer&lt;/strong&gt; now uses some React component life cycle methods that it wasn&#39;t before - &quot;ComponentDidMount&quot; and &quot;ComponentWillUnmount&quot; - to ensure that the handler attached to the Store&#39;s Change event is correctly removed when no longer required. In our example application, the &lt;strong&gt;AppContainer&lt;/strong&gt; is never &quot;unmounted&quot; but in a more complicated application then the top-level components may be changed based upon how the user navigates through the application. (A component is &quot;mounted&quot; when it&#39;s being added to the component tree and &quot;unmounted&quot; when it&#39;s being removed - in an application with a router, the current top-level component may be changed based upon the current route, in which case there would be top-level components being mounted and unmounted as the route changes and it is important that any event handlers that they attached be detached when they&#39;re not needed).&lt;/p&gt;

&lt;p&gt;One final thing to note before moving on to the Store implementation is that there is no longer a &quot;GetInitialState&quot; implementation in the &lt;strong&gt;AppContainer&lt;/strong&gt; and the &quot;Render&quot; method will return null if state doesn&#39;t yet have a value. &quot;GetInitialState&quot; was &lt;em&gt;another&lt;/em&gt; example of logic that is better placed outside of the component classes - now the &lt;strong&gt;AppContainer&lt;/strong&gt; is not responsible for having to know what its initial state should be, it just renders &lt;em&gt;nothing&lt;/em&gt; until the Store has raised a Change request that tells the &lt;strong&gt;AppContainer&lt;/strong&gt; what to display.&lt;/p&gt;

&lt;p&gt;The child components are &quot;dumb&quot; as all they have to do is render according to the props data that they are provided with and now the top-level stateful component is similarly &quot;dumb&quot; as all it does is listen to the Store and pass the information down to dumb stateless components - and then listen for events from the child components, in order to pass the information on to the Dispatcher.&lt;/p&gt;

&lt;p&gt;We&#39;re almost ready to talk about how to create the Store now, but first we need to adapt the &lt;strong&gt;MessageApi&lt;/strong&gt; to work with the Dispatcher, rather than with &lt;strong&gt;Task&lt;/strong&gt;s.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using Bridge;
using Bridge.Html5;
using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.API
{
  public class MessageApi : IReadAndWriteMessages
  {
    private readonly AppDispatcher _dispatcher;
    private readonly List&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; _messages;
    public MessageApi(AppDispatcher dispatcher)
    {
      if (dispatcher == null)
        throw new ArgumentException(&quot;dispatcher&quot;);

      _dispatcher = dispatcher;
      _messages = new List&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt;();

      // To further mimic a server-based API (where other people may be recording messages
      // of their own), after a 10s delay a periodic task will be executed to retrieve a
      // new message
      Window.SetTimeout(
        () =&amp;gt; Window.SetInterval(GetChuckNorrisFact, 5000),
        10000
      );
    }

    public RequestId SaveMessage(MessageDetails message)
    {
      return SaveMessage(message, optionalSaveCompletedCallback: null);
    }

    private RequestId SaveMessage(
      MessageDetails message,
      Action optionalSaveCompletedCallback)
    {
      if (message == null)
        throw new ArgumentNullException(&quot;message&quot;);
      if (string.IsNullOrWhiteSpace(message.Title))
        throw new ArgumentException(&quot;A title value must be provided&quot;);
      if (string.IsNullOrWhiteSpace(message.Content))
        throw new ArgumentException(&quot;A content value must be provided&quot;);

      var requestId = new RequestId();
      Window.SetTimeout(
        () =&amp;gt;
        {
          _messages.Add(Tuple.Create(_messages.Count, message));
          _dispatcher.HandleServerAction(
            new MessageSaveSucceeded { RequestId = requestId }
          );
          if (optionalSaveCompletedCallback != null)
            optionalSaveCompletedCallback();
        },
        1000 // Simulate a roundtrip to the server
      );
      return requestId;
    }

    public RequestId GetMessages()
    {
      // ToArray is used to return a clone of the message set - otherwise, the caller would
      // end up with a list that is updated when the internal reference within this class
      // is updated (which sounds convenient but it&#39;s not the behaviour that would be
      // exhibited if this was really persisting messages to a server somewhere)
      var requestId = new RequestId();
      Window.SetTimeout(
        () =&amp;gt; _dispatcher.HandleServerAction(new MessageHistoryUpdated
        {
          RequestId = requestId,
          Messages = _messages.ToArray()
        }),
        1000 // Simulate a roundtrip to the server
      );
      return requestId;
    }

    private void GetChuckNorrisFact()
    {
      var request = new XMLHttpRequest();
      request.ResponseType = XMLHttpRequestResponseType.Json;
      request.OnReadyStateChange = () =&amp;gt;
      {
        if (request.ReadyState != AjaxReadyState.Done)
          return;

        if ((request.Status == 200) || (request.Status == 304))
        {
          try
          {
            var apiResponse = (ChuckNorrisFactApiResponse)request.Response;
            if ((apiResponse.Type == &quot;success&quot;)
            &amp;amp;&amp;amp; (apiResponse.Value != null)
            &amp;amp;&amp;amp; !string.IsNullOrWhiteSpace(apiResponse.Value.Joke))
            {
              // The Chuck Norris Facts API (http://www.icndb.com/api/) returns strings
              // html-encoded, so they need decoding before be wrapped up in a
              // MessageDetails instance
              // - Note: After the save has been processed, GetMessages is called so
              //   that a MessageHistoryUpdate action is dispatched
              SaveMessage(
                new MessageDetails
                {
                  Title = &quot;Fact&quot;,
                  Content = HtmlDecode(apiResponse.Value.Joke)
                },
                () =&amp;gt; GetMessages()
              );
              return;
            }
          }
          catch
          {
            // Ignore any error and drop through to the fallback message-generator below
          }
        }
        SaveMessage(new MessageDetails
        {
          Title = &quot;Fact&quot;,
          Content = &quot;API call failed when polling for server content :(&quot;
        });
      };
      request.Open(&quot;GET&quot;, &quot;http://api.icndb.com/jokes/random&quot;);
      request.Send();
    }

    private string HtmlDecode(string value)
    {
      if (value == null)
        throw new ArgumentNullException(&quot;value&quot;);

      var wrapper = Document.CreateElement(&quot;div&quot;);
      wrapper.InnerHTML = value;
      return wrapper.TextContent;
    }

    [IgnoreCast]
    private class ChuckNorrisFactApiResponse
    {
      public extern string Type { [Template(&quot;type&quot;)] get; }
      public extern FactDetails Value { [Template(&quot;value&quot;)] get; }

      [IgnoreCast]
      public class FactDetails
      {
        public extern int Id { [Template(&quot;id&quot;)] get; }
        public extern string Joke { [Template(&quot;joke&quot;)]get; }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that the &lt;strong&gt;IReadAndWriteMessages&lt;/strong&gt; interface no longer returns &lt;strong&gt;Task&lt;/strong&gt;s -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.API
{
  public interface IReadAndWriteMessages
  {
    RequestId SaveMessage(MessageDetails message);
    RequestId GetMessages();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of the two methods now return a &quot;&lt;strong&gt;RequestId&lt;/strong&gt;&quot;. This is a unique identifier that will be used to tie future actions back to specific calls to the &quot;GetMessages&quot; or &quot;SaveMessaage&quot; methods. When a user requests that a message be saved in our sample app, the &lt;strong&gt;AppContainer&lt;/strong&gt; sends a &lt;strong&gt;MessageSaveRequested&lt;/strong&gt; action through the Dispatcher. The store will receive this action from the Dispatcher and use the message data in it to call &quot;SaveMessage&quot;, which will give the Store a unique &lt;strong&gt;RequestId&lt;/strong&gt;. After the &lt;strong&gt;MessageApi&lt;/strong&gt; has completed the save, it will raise a &lt;strong&gt;MessageSaveSucceeded&lt;/strong&gt; action that has a &quot;RequestId&quot; value, the same &lt;strong&gt;RequestId&lt;/strong&gt; as &quot;SaveMessage&quot; returned. This is how the Store knows that the save which succeeded was, in fact, the save that it initiated. In the app here, there wouldn&#39;t be any doubt since there is only one place where a new message may be saved, but in a more complicated application it&#39;s feasible that there may be multiple components that could initiate a save and it would be important to be able to be able to trace any &quot;save succeeded&quot; notification back to where it came from.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;RequestId&lt;/strong&gt; has a nice feature in that two instances may be compared to determine which is most recent - this &lt;em&gt;could&lt;/em&gt; be applicable to an application like our example because, shortly, the message history will be updated after a user has created a new message &lt;em&gt;and&lt;/em&gt; it will be automatically updated when a new Chuck Norris fact appears. It&#39;s not too difficult to imagine that there could be a race condition that occurs when two &quot;new message history&quot; actions are received by the Store (one from the user-saves-message-and-then-fresh-history-is-automatically-retrieved-after-the-save-is-completed process and one from a new Chuck Norris fact arriving). In the real world, with unpredictable server and network times, it&#39;s possible for &quot;Server Call A&quot; to start before &quot;Server Call B&quot; but for &quot;Server Call A&quot; to finish &lt;em&gt;after&lt;/em&gt; &quot;Server Call B&quot; - in this case we &lt;em&gt;want&lt;/em&gt; the &quot;new message history&quot; from &quot;Server Call B&quot;, since it should be more recent, but the data from &quot;Server Call A&quot; arrives &lt;em&gt;after&lt;/em&gt; it and we need to know which result is freshest. If each action that relates to &quot;new data arrived from API&quot; has a &lt;strong&gt;RequestId&lt;/strong&gt; then we can compare the two values using the &quot;ComesAfter&quot; function, allow us to ignore the stale data.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;RequestId&lt;/strong&gt; implementation is fairly simple (add a new &quot;RequestId.cs&quot; file to the &quot;API&quot; folder and paste in the following) -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;

namespace BridgeReactTutorial.API
{
  public class RequestId
  {
    private static DateTime _timeOfLastId = DateTime.MinValue;
    private static int _offsetOfLastId = 0;

    private readonly DateTime _requestTime;
    private readonly int _requestOffset;
    public RequestId()
    {
      _requestTime = DateTime.Now;
      if (_timeOfLastId &amp;lt; _requestTime)
      {
        _offsetOfLastId = 0;
        _timeOfLastId = _requestTime;
      }
      else
        _offsetOfLastId++;
      _requestOffset = _offsetOfLastId;
    }

    public bool ComesAfter(RequestId other)
    {
      if (other == null)
        throw new ArgumentNullException(&quot;other&quot;);

      if (_requestTime == other._requestTime)
        return _requestOffset &amp;gt; other._requestOffset;
      return (_requestTime &amp;gt; other._requestTime);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the new &lt;strong&gt;MessageApi&lt;/strong&gt; code above, two actions were referenced that haven&#39;t been defined yet, so add two more classes to the &quot;Actions&quot; folder for the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using Bridge.React;
using BridgeReactTutorial.API;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Actions
{
  public class MessageHistoryUpdated : IDispatcherAction
  {
    public RequestId RequestId;
    public IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; Messages;
  }
}

using Bridge.React;
using BridgeReactTutorial.API;

namespace BridgeReactTutorial.Actions
{
  public class MessageSaveSucceeded : IDispatcherAction
  {
    public RequestId RequestId;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(Note: A &lt;strong&gt;MessageHistoryUpdated&lt;/strong&gt; will be emitted after a &quot;GetMessages&quot; call is made but one will also be emitted every time that a new Chuck Norris fact arrives)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;While we&#39;re adding actions, we&#39;re going to need a &lt;strong&gt;StoreInitialised&lt;/strong&gt; action class (I&#39;ll talk about this more later on, for now just add the following class to the &quot;Actions&quot; folder):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.React;
using BridgeReactTutorial.API;

namespace BridgeReactTutorial.Actions
{
  public class StoreInitialised : IDispatcherAction
  {
    public object Store;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, &lt;em&gt;finally&lt;/em&gt;, we can look at how to create a Store.&lt;/p&gt;

&lt;p&gt;Create a new folder in the project root called &quot;Stores&quot; and add a new class file to it; &quot;MessageWriterStore.cs&quot; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.API;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Stores
{
  public class MessageWriterStore
  {
    private RequestId _saveActionRequestId, _lastDataUpdatedRequestId;
    public MessageWriterStore(IReadAndWriteMessages messageApi, AppDispatcher dispatcher)
    {
      if (messageApi == null)
        throw new ArgumentNullException(&quot;messageApi&quot;);
      if (dispatcher == null)
        throw new ArgumentNullException(&quot;dispatcher&quot;);

      Message = GetInitialMessageEditState();
      MessageHistory = new Tuple&amp;lt;int, MessageDetails&amp;gt;[0];

      dispatcher.Register(message =&amp;gt;
      {
        if (message.Action is StoreInitialised)
        {
          var storeInitialised = (StoreInitialised)message.Action;
          if (storeInitialised.Store == this)
            OnChange();
        }
        else if (message.Action is MessageEditStateChanged)
        {
          var messageEditStateChanged = (MessageEditStateChanged)message.Action;
          Message = messageEditStateChanged.NewState;
          ValidateMessage(Message);
          OnChange();
        }
        else if (message.Action is MessageSaveRequested)
        {
          var messageSaveRequested = (MessageSaveRequested)message.Action;
          _saveActionRequestId = messageApi.SaveMessage(messageSaveRequested.Message);
          Message.IsSaveInProgress = true;
          OnChange();
        }
        else if (message.Action is MessageSaveSucceeded)
        {
          var messageSaveSucceeded = (MessageSaveSucceeded)message.Action;
          if (messageSaveSucceeded.RequestId == _saveActionRequestId)
          {
            _saveActionRequestId = null;
            Message = GetInitialMessageEditState();
            OnChange();
            _lastDataUpdatedRequestId = messageApi.GetMessages();
          }
        }
        else if (message.Action is MessageHistoryUpdated)
        {
          var messageHistoryUpdated = (MessageHistoryUpdated)message.Action;
          if ((_lastDataUpdatedRequestId == null)
          || (_lastDataUpdatedRequestId == messageHistoryUpdated.RequestId)
          || messageHistoryUpdated.RequestId.ComesAfter(_lastDataUpdatedRequestId))
          {
            _lastDataUpdatedRequestId = messageHistoryUpdated.RequestId;
            MessageHistory = messageHistoryUpdated.Messages;
            OnChange();
          }
        }
      });
    }

    public event Action Change;
    public MessageEditState Message;
    public IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; MessageHistory;

    private MessageEditState GetInitialMessageEditState()
    {
      // Note: By using the ValidateMessage here, we don&#39;t need to duplicate the &quot;Untitled&quot;
      // string that should be used for the Caption value when the UI is first rendered
      // or when the user has entered some Title content but then deleted it again.
      // Similarly, we avoid having to repeat the validation messages that should be
      // displayed when the form is empty, since they will be set by ValidateMessage.
      var blankMessage = new MessageEditState
      {
        Caption = &quot;&quot;,
        Title = new TextEditState { Text = &quot;&quot; },
        Content = new TextEditState { Text = &quot;&quot; },
        IsSaveInProgress = false
      };
      ValidateMessage(blankMessage);
      return blankMessage;
    }

    private void ValidateMessage(MessageEditState message)
    {
      if (message == null)
        throw new ArgumentNullException(&quot;message&quot;);

      message.Caption = string.IsNullOrWhiteSpace(message.Title.Text)
        ? &quot;Untitled&quot;
        : message.Title.Text.Trim();
      message.Title.ValidationError = string.IsNullOrWhiteSpace(message.Title.Text)
        ? &quot;Must enter a title&quot;
        : null;
      message.Content.ValidationError = string.IsNullOrWhiteSpace(message.Content.Text)
        ? &quot;Must enter message content&quot;
        : null;
    }

    private void OnChange()
    {
      if (Change != null)
        Change();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&#39;s really nothing very complicated here at all. What I like is that all of the logic that was previously ensconced within component classes is now in a C# class which has zero UI-based dependencies. What I also like is how clear the logic is, it&#39;s very easy to read through how the various actions are matched and to see precisely what state changes will occur. In fact, the &lt;strong&gt;MessageWriterStore&lt;/strong&gt; is just a simple state machine where each transition is based upon the action that it receives from the Dispatcher. It&#39;s reassuring that the Flux architecture is based upon these time-tested computer science devices; the message bus and &lt;a href=&quot;http://www.productiverage.com/c-sharp-state-machines&quot;&gt;state machine&lt;/a&gt; - while it might take a little while to internalise how to write applications based around this &quot;one-way binding&quot; / &quot;one-way message passing&quot; arrangement, once it clicks it feels very natural.&lt;/p&gt;

&lt;p&gt;Having the core application logic in classes like this really helps ensure that code will have those two great properties that I will keep repeating through this series - that it&#39;s easy to reason about and that it&#39;s easy to test. It&#39;s easy to reason about as it&#39;s easy to see how user (and server) actions flow through the code, there are few surprises. It&#39;s easy to test because there are few dependencies - to test anything in the &lt;strong&gt;MessageWriterStore&lt;/strong&gt;, each unit test would need to provide an &lt;strong&gt;AppDispatcher&lt;/strong&gt; instance and a mock &lt;strong&gt;IReadAndWriteMessages&lt;/strong&gt; implementation, it would then push one or more messages through the Dispatcher and confirm that the public &lt;strong&gt;MessageWriterStore&lt;/strong&gt; state matches expectations at the end. For example, to test the &quot;Content&quot; text input validation, you would play back a &lt;strong&gt;MessageEditStateChanged&lt;/strong&gt; action with a blank &quot;Content&quot; string in the &lt;strong&gt;MessageEditState&lt;/strong&gt; and ensure that the expected validation message text was present in the &quot;Message&quot; reference of the &lt;strong&gt;MessageWriterStore&lt;/strong&gt; afterwards.&lt;/p&gt;

&lt;p&gt;There are a couple of minor things that I&#39;m not so keen about in the code above. Firstly, there&#39;s the laborious type-checking and casting that is required when matching the actions. Secondly, there&#39;s the duplication on calling &quot;OnChange&quot; whenever an action is matched. Thirdly, the logic around &lt;strong&gt;RequestId&lt;/strong&gt; comparison when a &lt;strong&gt;MessageHistoryUpdated&lt;/strong&gt; is matched is a bit clumsy.&lt;/p&gt;

&lt;p&gt;For that third point, add a new file &quot;RequestIdExtensions.cs&quot; to the &quot;API&quot; folder with the following content -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;

namespace BridgeReactTutorial.API
{
  public static class RequestIdExtensions
  {
    public static bool IsEqualToOrComesAfter(this RequestId source, RequestId other)
    {
      if (source == null)
        throw new ArgumentNullException(&quot;source&quot;);

      // If the &quot;other&quot; reference is no-RequestId then the &quot;source&quot; may be considered to
      // come after it
      if (other == null)
        return true;

      return (source == other) || source.ComesAfter(other);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for the first two points, we can use some extension methods which are included in the Bridge / React bindings -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.API;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Stores
{
  public class MessageWriterStore
  {
    private RequestId _saveActionRequestId, _lastDataUpdatedRequestId;
    public MessageWriterStore(IReadAndWriteMessages messageApi, AppDispatcher dispatcher)
    {
      if (messageApi == null)
        throw new ArgumentNullException(&quot;messageApi&quot;);
      if (dispatcher == null)
        throw new ArgumentNullException(&quot;dispatcher&quot;);

      Message = GetInitialMessageEditState();
      MessageHistory = new Tuple&amp;lt;int, MessageDetails&amp;gt;[0];

      dispatcher.Register(message =&amp;gt;
      {
        message
          .If&amp;lt;StoreInitialised&amp;gt;(
            condition: action =&amp;gt; (action.Store == this),
            work: action =&amp;gt; { }
          )
          .Else&amp;lt;MessageEditStateChanged&amp;gt;(action =&amp;gt;
          {
            Message = action.NewState;
            ValidateMessage(Message);
          })
          .Else&amp;lt;MessageSaveRequested&amp;gt;(action =&amp;gt;
          {
            _saveActionRequestId = messageApi.SaveMessage(action.Message);
            Message.IsSaveInProgress = true;
          })
          .Else&amp;lt;MessageSaveSucceeded&amp;gt;(
            condition: action =&amp;gt; (action.RequestId == _saveActionRequestId),
            work: action =&amp;gt;
            {
              _saveActionRequestId = null;
              Message = GetInitialMessageEditState();
              _lastDataUpdatedRequestId = messageApi.GetMessages();
            }
          )
          .Else&amp;lt;MessageHistoryUpdated&amp;gt;(
            condition: action =&amp;gt;
              action.RequestId.IsEqualToOrComesAfter(_lastDataUpdatedRequestId),
            work: action =&amp;gt;
            {
              _lastDataUpdatedRequestId = action.RequestId;
              MessageHistory = action.Messages;
            }
          )
          .IfAnyMatched(OnChange);
      });
    }

    public event Action Change;
    public MessageEditState Message;
    public IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; MessageHistory;

    private MessageEditState GetInitialMessageEditState()
    {
      // Note: By using the ValidateMessage here, we don&#39;t need to duplicate the &quot;Untitled&quot;
      // string that should be used for the Caption value when the UI is first rendered
      // or when the user has entered some Title content but then deleted it again.
      // Similarly, we avoid having to repeat the validation messages that should be
      // displayed when the form is empty, since they will be set by ValidateMessage.
      var blankMessage = new MessageEditState
      {
        Caption = &quot;&quot;,
        Title = new TextEditState { Text = &quot;&quot; },
        Content = new TextEditState { Text = &quot;&quot; },
        IsSaveInProgress = false
      };
      ValidateMessage(blankMessage);
      return blankMessage;
    }

    private void ValidateMessage(MessageEditState message)
    {
      if (message == null)
        throw new ArgumentNullException(&quot;message&quot;);

      message.Caption = string.IsNullOrWhiteSpace(message.Title.Text)
        ? &quot;Untitled&quot;
        : message.Title.Text.Trim();
      message.Title.ValidationError = string.IsNullOrWhiteSpace(message.Title.Text)
        ? &quot;Must enter a title&quot;
        : null;
      message.Content.ValidationError = string.IsNullOrWhiteSpace(message.Content.Text)
        ? &quot;Must enter message content&quot;
        : null;
    }

    private void OnChange()
    {
      if (Change != null)
        Change();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully it&#39;s clear enough how they work. The &quot;If&quot; and the &quot;Else&quot; functions both have a generic type parameter for the kind of action to match and may be called with a single &quot;work&quot; argument (meaning &quot;do this if the action type is matched&quot;) or two arguments; &quot;condition&quot; and &quot;work&quot; (where &quot;condition&quot; looks at the action, typed to match the generic type parameter, and returns true or false depending upon whether the action should be considered or ignored). The &quot;condition&quot; argument is most clearly illustrated by the &lt;strong&gt;MessageHistoryUpdated&lt;/strong&gt;, it ensures that any stale &lt;strong&gt;MessageHistoryUpdated&lt;/strong&gt; action will be ignored. The &quot;work&quot; implementation for &lt;strong&gt;StoreInitialised&lt;/strong&gt; is empty because all that is required when a &lt;strong&gt;StoreInitialised&lt;/strong&gt; action is received (that targets the current store) is to call &quot;OnChange&quot; and the &quot;IfAnyMatched&quot; extension method calls &quot;OnChange&quot; if any of the actions are matched.&lt;/p&gt;

&lt;p&gt;There&#39;s just one final thing to do now in order to make the application compile again, the entry point logic in App.cs needs updating -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Linq;
using Bridge.Html5;
using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.API;
using BridgeReactTutorial.Components;
using BridgeReactTutorial.Stores;

namespace BridgeReactTutorial
{
  public class App
  {
    [Ready]
    public static void Go()
    {
      var container = Document.GetElementById(&quot;main&quot;);
      container.ClassName = string.Join(
        &quot; &quot;,
        container.ClassName.Split().Where(c =&amp;gt; c != &quot;loading&quot;)
      );

      var dispatcher = new AppDispatcher();
      var messageApi = new MessageApi(dispatcher);
      var store = new MessageWriterStore(messageApi, dispatcher);
      React.Render(
        new AppContainer(new AppContainer.Props
        {
          Dispatcher = dispatcher,
          Store = store
        }),
        container
      );
      dispatcher.HandleViewAction(new StoreInitialised { Store = store });
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both the &lt;strong&gt;MessageWriterStore&lt;/strong&gt; and the &lt;strong&gt;AppContainer&lt;/strong&gt; need a reference to a shared Dispatcher, &lt;strong&gt;MessageWriterStore&lt;/strong&gt; needs a Message API wrapper to talk to and the &lt;strong&gt;AppContainer&lt;/strong&gt; needs a reference to the Store. In a lot of the Flux articles that I read at first, the Dispatcher was a static reference that everything had access to - but I much prefer this arrangement, where the places that explicitly need it (ie. the Stores and the top-level components) have it passed in as a constructor argument or through props. This makes a class&#39; requirements much more explicit - if a class has implicit dependencies then it&#39;s more difficult to tell at a glance how it works. And &lt;em&gt;not&lt;/em&gt; having a static Dispatcher means that unit testing is simpler, since there is no implicit shared state between elements within an application.&lt;/p&gt;

&lt;p&gt;The only part of this code that may not be very intuitive is the need to send a &lt;strong&gt;StoreInitialised&lt;/strong&gt; action to the Dispatcher immediately after setting up all of the references. This is required before the &lt;strong&gt;AppContainer&lt;/strong&gt; won&#39;t render anything until it processes its first &quot;Change&quot; event from the &lt;strong&gt;MessageWriterStore&lt;/strong&gt; (because, until that point, the &lt;strong&gt;AppContainer&lt;/strong&gt;&#39;s state reference will be null). When the Store receives the &lt;strong&gt;StoreInitialised&lt;/strong&gt; action, it will raise its &quot;Change&quot; event and the &lt;strong&gt;AppContainer&lt;/strong&gt; will perform its first &quot;real&quot; render. If this was an application with a routing element, with a Store per page / form, then it would seem natural for the router to raise a &lt;strong&gt;StoreInitialised&lt;/strong&gt; action for the Store that should be active for the current route (it is just a little odd-looking in a simple application like the example here unless you know why it is necessary).&lt;/p&gt;

&lt;h3&gt;Lots of actions?&lt;/h3&gt;

&lt;p&gt;With that, the change in architecture is complete. Hopefully it&#39;s easy to envisage how further functionality is enabled by adding further specialised components and communicating using different action types. Each action is handled in a very clear way in the Store(s) and so the overall complexity should (approximately) grow linearly with the &lt;a href=&quot;http://codebetter.com/markneedham/2010/03/18/essential-and-accidental-complexity/&quot;&gt;essential complexity&lt;/a&gt;, rather than exponentially (which is what tends to happens a lot with more haphazard architectures, or where you have the &quot;star-shaped event handling&quot; that I described earlier).&lt;/p&gt;

&lt;p&gt;The only adjustment that I&#39;d like to make at this point is to the actions themselves - if there&#39;s a variation of the &lt;strong&gt;MessageEditStateChanged&lt;/strong&gt;, &lt;strong&gt;MessageSaveRequested&lt;/strong&gt; and &lt;strong&gt;MessageSaveSucceeded&lt;/strong&gt; actions required for every kind of form where a user creates / edits data and tries to save it, then there&#39;s going to be a lot of action classes that are basically the same.&lt;/p&gt;

&lt;p&gt;This seems like a perfect case for C# generics - a single generic class may be used to represent many types of user edit action without sacrificing type safety. Rename the &quot;MessageEditStateChanged.cs&quot; action class to &quot;UserEditRequested.cs&quot; and replace the content, which is currently:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.React;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Actions
{
  public class MessageEditStateChanged : IDispatcherAction
  {
    public MessageEditState NewState;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.React;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Actions
{
  public class UserEditRequested&amp;lt;T&amp;gt; : IDispatcherAction
  {
    public T NewState;
  }
  public static class UserEditRequested
  {
    public static UserEditRequested&amp;lt;T&amp;gt; For&amp;lt;T&amp;gt;(T newState)
    {
      return new UserEditRequested&amp;lt;T&amp;gt; { NewState = newState };
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, anywhere that there is a reference to &lt;strong&gt;MessageEditStateChanged&lt;/strong&gt;, you will need to change it to be a &lt;strong&gt;UserEditRequested&amp;lt;MessageEditState&amp;gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The non-generic &quot;For&quot; function is just for convenience, it allows you to create a new &lt;strong&gt;UserEditRequested&amp;lt;T&amp;gt;&lt;/strong&gt; instance without writing out the type of &quot;T&quot; - it will be inferred by the type of the &quot;newState&quot; reference passed for it. The &quot;OnChange&quot; lambda set on the &lt;strong&gt;MessageEditor&lt;/strong&gt; props was previously&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OnChange = newState =&amp;gt; props.Dispatcher.HandleViewAction(
  new MessageEditStateChanged { NewState = newState }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but should now become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OnChange = newState =&amp;gt; props.Dispatcher.HandleViewAction(
  UserEditRequested.For(newState)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Since &quot;newState&quot; is a &lt;strong&gt;MessageEditState&lt;/strong&gt; instance, the action that will be raised will be a &lt;strong&gt;UserEditRequested&amp;lt;MessageEditState&amp;gt;&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Now, the action-matching code in the &lt;strong&gt;MessageWriteStore&lt;/strong&gt; needs to change from&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.Else&amp;lt;MessageEditStateChanged&amp;gt;(action =&amp;gt;
{
  Message = action.NewState;
  ValidateMessage(Message);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.Else&amp;lt;UserEditRequested&amp;lt;MessageEditState&amp;gt;&amp;gt;(action =&amp;gt;
{
  Message = action.NewState;
  ValidateMessage(Message);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similar changes should be made, so that &quot;MessageSaveRequested.cs&quot; is replaced with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.React;

namespace BridgeReactTutorial.Actions
{
  public class SaveRequested&amp;lt;T&amp;gt; : IDispatcherAction
  {
    public T Data;
  }
  public static class SaveRequested
  {
    public static SaveRequested&amp;lt;T&amp;gt; For&amp;lt;T&amp;gt;(T data)
    {
      return new SaveRequested&amp;lt;T&amp;gt; { Data = data };
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &quot;MessageSaveSucceeded.cs&quot; is replaced with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.React;
using BridgeReactTutorial.API;

namespace BridgeReactTutorial.Actions
{
  public class SaveSucceeded : IDispatcherAction
  {
    public RequestId RequestId;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, finally, &quot;MessageHistoryUpdated.cs&quot; replaced with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.React;
using BridgeReactTutorial.API;

namespace BridgeReactTutorial.Actions
{
  public class DataUpdated&amp;lt;T&amp;gt; : IDispatcherAction
  {
    public RequestId RequestId;
    public T Data;
  }
  public static class DataUpdated
  {
    public static DataUpdated&amp;lt;T&amp;gt; For&amp;lt;T&amp;gt;(RequestId requestId, T data)
    {
      return new DataUpdated&amp;lt;T&amp;gt; { RequestId = requestId, Data = data };
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(Note that &lt;strong&gt;SaveSucceeded&lt;/strong&gt; is not a generic class because the only information that it contains is the &lt;strong&gt;RequestId&lt;/strong&gt; that corresponds to the save operation that it indicates has completed).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The action type-matching that occurs in the &lt;strong&gt;MessageWriteStore&lt;/strong&gt; now needs to be changed to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dispatcher.Register(message =&amp;gt;
{
  message
    .If&amp;lt;StoreInitialised&amp;gt;(
      condition: action =&amp;gt; (action.Store == this),
      work: action =&amp;gt; { }
    )
    .Else&amp;lt;UserEditRequested&amp;lt;MessageEditState&amp;gt;&amp;gt;(action =&amp;gt;
    {
      Message = action.NewState;
      ValidateMessage(Message);
    })
    .Else&amp;lt;SaveRequested&amp;lt;MessageDetails&amp;gt;&amp;gt;(action =&amp;gt;
    {
      _saveActionRequestId = messageApi.SaveMessage(action.Data);
      Message.IsSaveInProgress = true;
    })
    .Else&amp;lt;SaveSucceeded&amp;gt;(
      condition: action =&amp;gt; (action.RequestId == _saveActionRequestId),
      work: action =&amp;gt;
      {
        _saveActionRequestId = null;
        Message = GetInitialMessageEditState();
        _lastDataUpdatedRequestId = messageApi.GetMessages();
      }
    )
    .Else&amp;lt;DataUpdated&amp;lt;IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt;&amp;gt;&amp;gt;(
      condition: action =&amp;gt;
        action.RequestId.IsEqualToOrComesAfter(_lastDataUpdatedRequestId),
      work: action =&amp;gt;
      {
        _lastDataUpdatedRequestId = action.RequestId;
        MessageHistory = action.Data;
      }
    )
    .IfAnyMatched(OnChange);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;AppContainer&lt;/strong&gt; now becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.ViewModels;
using BridgeReactTutorial.Stores;

namespace BridgeReactTutorial.Components
{
  public class AppContainer : Component&amp;lt;AppContainer.Props, AppContainer.State&amp;gt;
  {
    public AppContainer(AppContainer.Props props) : base(props) { }

    protected override void ComponentDidMount()
    {
      props.Store.Change += StoreChanged;
    }
    protected override void ComponentWillUnmount()
    {
      props.Store.Change -= StoreChanged;
    }
    private void StoreChanged()
    {
      SetState(new State
      {
        Message = props.Store.Message,
        MessageHistory = props.Store.MessageHistory
      });
    }

    public override ReactElement Render()
    {
      if (state == null)
        return null;

      return DOM.Div(null,
        new MessageEditor(new MessageEditor.Props
        {
          ClassName = &quot;message&quot;,
          Message = state.Message,
          OnChange = newState =&amp;gt; props.Dispatcher.HandleViewAction(
            UserEditRequested.For(newState)
          ),
          OnSave = () =&amp;gt; props.Dispatcher.HandleViewAction(
            SaveRequested.For(new MessageDetails
            {
              Title = state.Message.Title.Text,
              Content = state.Message.Content.Text
            })
          )
        }),
        new MessageHistory(new MessageHistory.Props
        {
          ClassName = &quot;history&quot;,
          Messages = state.MessageHistory
        })
      );
    }

    public class Props
    {
      public AppDispatcher Dispatcher;
      public MessageWriterStore Store;
    }

    public class State
    {
      public MessageEditState Message;
      public IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; MessageHistory;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the &lt;strong&gt;MessageApi&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using Bridge;
using Bridge.Html5;
using Bridge.React;
using BridgeReactTutorial.Actions;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.API
{
  public class MessageApi : IReadAndWriteMessages
  {
    private readonly AppDispatcher _dispatcher;
    private readonly List&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; _messages;
    public MessageApi(AppDispatcher dispatcher)
    {
      if (dispatcher == null)
        throw new ArgumentException(&quot;dispatcher&quot;);

      _dispatcher = dispatcher;
      _messages = new List&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt;();

      // To further mimic a server-based API (where other people may be recording messages
      // of their own), after a 10s delay a periodic task will be executed to retrieve a
      // new message
      Window.SetTimeout(
        () =&amp;gt; Window.SetInterval(GetChuckNorrisFact, 5000),
        10000
      );
    }

    public RequestId SaveMessage(MessageDetails message)
    {
      return SaveMessage(message, optionalSaveCompletedCallback: null);
    }

    private RequestId SaveMessage(MessageDetails message, Action optionalSaveCompletedCallback)
    {
      if (message == null)
        throw new ArgumentNullException(&quot;message&quot;);
      if (string.IsNullOrWhiteSpace(message.Title))
        throw new ArgumentException(&quot;A title value must be provided&quot;);
      if (string.IsNullOrWhiteSpace(message.Content))
        throw new ArgumentException(&quot;A content value must be provided&quot;);

      var requestId = new RequestId();
      Window.SetTimeout(
        () =&amp;gt;
        {
          _messages.Add(Tuple.Create(_messages.Count, message));
          _dispatcher.HandleServerAction(new SaveSucceeded { RequestId = requestId });
          if (optionalSaveCompletedCallback != null)
            optionalSaveCompletedCallback();
        },
        1000 // Simulate a roundtrip to the server
      );
      return requestId;
    }

    public RequestId GetMessages()
    {
      // ToArray is used to return a clone of the message set - otherwise, the caller would
      // end up with a list that is updated when the internal reference within this class
      // is updated (which sounds convenient but it&#39;s not the behaviour that would be
      // exhibited if this was really persisting messages to a server somewhere).. and
      // then AsEnumerable() is required since the store checks for an action of type
      // DataUpdated&amp;lt;IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt;&amp;gt;&amp;gt;
      var requestId = new RequestId();
      Window.SetTimeout(
        () =&amp;gt; _dispatcher.HandleServerAction(DataUpdated.For(requestId, _messages.ToArray().AsEnumerable())),
        1000 // Simulate a roundtrip to the server
      );
      return requestId;
    }

    private void GetChuckNorrisFact()
    {
      var request = new XMLHttpRequest();
      request.ResponseType = XMLHttpRequestResponseType.Json;
      request.OnReadyStateChange = () =&amp;gt;
      {
        if (request.ReadyState != AjaxReadyState.Done)
          return;

        if ((request.Status == 200) || (request.Status == 304))
        {
          try
          {
            var apiResponse = (ChuckNorrisFactApiResponse)request.Response;
            if ((apiResponse.Type == &quot;success&quot;)
            &amp;amp;&amp;amp; (apiResponse.Value != null)
            &amp;amp;&amp;amp; !string.IsNullOrWhiteSpace(apiResponse.Value.Joke))
            {
              // The Chuck Norris Facts API (http://www.icndb.com/api/) returns strings
              // html-encoded, so they need decoding before be wrapped up in a
              // MessageDetails instance
              // - Note: After the save has been processed, GetMessages is called so
              //   that a MessageHistoryUpdate action is dispatched
              SaveMessage(
                new MessageDetails
                {
                  Title = &quot;Fact&quot;,
                  Content = HtmlDecode(apiResponse.Value.Joke)
                },
                () =&amp;gt; GetMessages()
              );
              return;
            }
          }
          catch
          {
            // Ignore any error and drop through to the fallback message-generator below
          }
        }
        SaveMessage(new MessageDetails
        {
          Title = &quot;Fact&quot;,
          Content = &quot;API call failed when polling for server content :(&quot;
        });
      };
      request.Open(&quot;GET&quot;, &quot;http://api.icndb.com/jokes/random&quot;);
      request.Send();
    }

    private string HtmlDecode(string value)
    {
      if (value == null)
        throw new ArgumentNullException(&quot;value&quot;);

      var wrapper = Document.CreateElement(&quot;div&quot;);
      wrapper.InnerHTML = value;
      return wrapper.TextContent;
    }

    [IgnoreCast]
    private class ChuckNorrisFactApiResponse
    {
      public extern string Type { [Template(&quot;type&quot;)] get; }
      public extern FactDetails Value { [Template(&quot;value&quot;)] get; }

      [IgnoreCast]
      public class FactDetails
      {
        public extern int Id { [Template(&quot;id&quot;)] get; }
        public extern string Joke { [Template(&quot;joke&quot;)]get; }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(I contemplated leaving it as an exercise for the reader to change all of the action instantiation code to use the new generic classes, but with so much code in this post already I thought I might as well go whole-hog and include the final version of the everything!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;No type-safety has been lost in this refactor but, hopefully, it&#39;s clear how action classes can scale with an application&#39;s complexity. Needing a lot of new actions every time that a new section is added to an application would be no fun and would just add to the code churn required, so being able to reuse actions like this is a boon.&lt;/p&gt;

&lt;h3&gt;The third and final part&lt;/h3&gt;

&lt;p&gt;We&#39;ve covered a lot of ground here, so I&#39;m going to draw things to a close. Flux is a big deal and I&#39;ve read plenty of articles that make it sound mind-bending and difficult to grasp. Hopefully this has explored &lt;em&gt;why&lt;/em&gt; it makes sense as much as how to think in terms of it (and write code in the style of it!).&lt;/p&gt;

&lt;p&gt;Next time, now that React and Flux are dealt with, I want to look at how we can go &lt;em&gt;further&lt;/em&gt; in the quest to &lt;em&gt;make code easier to reason about and to test&lt;/em&gt; - there is a lot more that we can do with the C# type system to really express intent, requirements and limitations and I strongly believe that doing so will lead to higher quality code. As a side benefit, I&#39;ll also be showing how to make a simple tweak to components that will offer potentially huge performance benefits to highly-complex / deeply-nested UIs. I really think that using C# and Bridge can be more than just a possibility for writing React applications, it can be one of the &lt;em&gt;best&lt;/em&gt; ways to do so!&lt;/p&gt;
</description>
			<pubDate>Wed, 16 Mar 2016 22:50:00 GMT</pubDate>
		</item>
		<item>
			<title>Writing React apps using Bridge.NET - The Dan Way (from first principles)</title>
            <link>http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-from-first-principles</link>
			<guid>http://www.productiverage.com/writing-react-apps-using-bridgenet-the-dan-way-from-first-principles</guid>
			<description>&lt;p&gt;I&#39;ve had a request from someone to write about how I think that someone from a .net background should write a web-based application. The short answer is that I strongly believe that using Bridge.NET with React, using a Flux-like architecture is the way forward. I think that React changed the game by trying to introduce a way to write applications that addressed the big challenges, rather than what many of the other frameworks did, which was to try to make some aspects of development easier but without tackling the underlying problems. We&#39;re going to be using these technologies to create some big applications where I work and some resources as to how best to do this will be valuable. I&#39;m going to try to roll this all together into a short series of posts about creating Bridge / React / Flux apps, where I&#39;ll try to start from the simplest approach at each point and only introduce something new when I can explain why it&#39;s valuable. So, initially, Flux will be nowhere to be seen - but, hopefully, when it &lt;em&gt;is&lt;/em&gt; introduced, it will be clear why.&lt;/p&gt;

&lt;p&gt;(I&#39;m not going to expel any effort on convincing you that writing C# in Visual Studio is incredibly powerful, and that it&#39;s fantastic to be able to do this while writing browser-based applications, nor am I going to try to sell you any more on React - if you&#39;re not on board with these ideas already then there&#39;s a &lt;em&gt;chance&lt;/em&gt; that these posts will sell you on it, but that&#39;s not going to be my main focus).&lt;/p&gt;

&lt;h3&gt;From the very start&lt;/h3&gt;

&lt;p&gt;I&#39;m going to begin from a completely fresh project, so if you&#39;ve got any experience with Bridge then these steps will be familiar. But I&#39;ll go through them quickly and then start building the application itself. It&#39;s going to be extremely simple but will illustrate how to work with React and how to deal with user input and Virtual DOM re-rendering, how and where to implement validation and how to make &lt;em&gt;all the things&lt;/em&gt; asynchronous so that async is not only used for scary edge cases and can be seen as a valuable tool to decouple code (and, in doing so, async will become a not-at-all-scary thing).&lt;/p&gt;

&lt;p&gt;All that the application will do will be to allow the user to write a message, entering  Title and Content strings, and to save this message. There will be a &quot;Message API&quot;, which will emulate reading and writing to a remote endpoint, for data persistence, but the implementation will all be kept in-memory / in the browser, just to make things simple. It will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;The proposed example app&quot; src=&quot;http://www.productiverage.com/Content/Images/Posts/ReactTutorial1.png&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&lt;/p&gt;

&lt;p&gt;As more messages are written, more entries will appear in the &quot;Message History&quot;. Seems simple.&lt;/p&gt;

&lt;h3&gt;React components&lt;/h3&gt;

&lt;p&gt;Before getting into any React-with-Bridge specifics, I want to talk a little about React components; how to arrange them into a hierarchy and how they should and shouldn&#39;t talk to each other.&lt;/p&gt;

&lt;p&gt;Almost all of the time, components that you use will be &quot;&lt;a href=&quot;https://facebook.github.io/react/docs/forms.html#controlled-components&quot;&gt;controlled components&lt;/a&gt;&quot; -&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Controlled component does not maintain its own internal state; the component renders purely based on props.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that when you render a text input, you give it a &quot;value&quot; property and an &quot;onChange&quot; property - when the user tries to change what&#39;s in the text box (whether by pressing a number or letter, or by pressing backspace or by pasting something in) then the &quot;onChange&quot; callback is executed. The text box is &lt;em&gt;not&lt;/em&gt; updated automatically, all that happens is that a callback is made that indicates that the user has done something that means that the text input probably &lt;em&gt;should&lt;/em&gt; be updated.&lt;/p&gt;

&lt;p&gt;This seems odd at the very start since you may be used to events being driven by html elements and the updates being broadcast elsewhere; with React, events arise from components that describe the desire for a change to be made, but the change does not happen automatically. This is what is meant in the quote above when it says that a controlled component &quot;does not maintain its own internal state&quot;.&lt;/p&gt;

&lt;p&gt;This hints at one of the key aims of React - to make code explicit and easy to reason about. If a component &lt;em&gt;only&lt;/em&gt; varies based upon its props, then it&#39;s very easy to reason about; given this props data, draw in this manner. (If user-entered changes to a text input were automatically reflected in the text box then the component would &lt;em&gt;not&lt;/em&gt; solely vary by its props, it would vary according to its props and whatever else the user has done to it).&lt;/p&gt;

&lt;p&gt;The only way for a component to update / re-render itself (and any child components that it may have) is for it to changes its &quot;state&quot;. This is a special concept in React - if &quot;SetState&quot; is called then the component will re-render, but now it may have to consider both its props &lt;em&gt;and&lt;/em&gt; its new state. If we really wanted to have a text input that would automatically update its own value as well as raise a change event, we could write a component to do so -&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note: if you&#39;re coming into this fresh, don&#39;t worry about how to compile this C# code into a React application, I&#39;ll be getting to that after I&#39;ve finished giving my view on React components).&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class TextInput : Component&amp;lt;TextInput.Props, TextInput.State&amp;gt;
{
  public TextInput(Props props) : base(props) { }

  public override ReactElement Render()
  {
    return DOM.Input(new InputAttributes
    {
      Type = InputType.Text,
      Value = (state == null) ? props.InitialValue : state.Value,
      OnChange = ev =&amp;gt;
      {
        var newValue = ev.CurrentTarget.Value;
        SetState(new State { Value = newValue });
        props.OnChange(newValue);
      }
    });
  }

  public class Props
  {
    public string InitialValue;
    public Action&amp;lt;string&amp;gt; OnChange;
  }

  public class State
  {
    public string Value;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem here is that now the component depends upon two things whenever it has to render - its props &lt;em&gt;and&lt;/em&gt; its state. It can change its own state but it can&#39;t change its props (React demands that a components props be considered to be immutable).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This&lt;/em&gt; means that the component becomes more difficult to reason about, it was much easier when it didn&#39;t have to worry about state. (Granted, there may have been some question as to who would receive that OnChange callback to get the component to re-render, but we&#39;re going to get to that shortly).&lt;/p&gt;

&lt;p&gt;Partly for this reason, it&#39;s strongly recommended that the vast majority of components be stateless - meaning that they render according to their props and nothing else.&lt;/p&gt;

&lt;p&gt;Another reason that it is strongly recommended that components not update themselves (meaning that they are stateless, since the only way for a component to update itself is to change its state) is that it makes the handling of events much clearer. In the example application that I&#39;m going to refer to in this series, the &quot;Title&quot; value that is entered by the user is reflected in the fieldset legend -&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Fieldset legend mirros the Title input value&quot; src=&quot;http://www.productiverage.com/Content/Images/Posts/ReactTutorial2.png&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&lt;/p&gt;

&lt;p&gt;If the &quot;Title&quot; input box was to maintain its own state and update itself when its contents change, there still needs to be something listening for changes in order to update the fieldset legend text. If it was common for components to maintain their own state then things would quickly get out of hand as more and more components have to listen for (and react to) changes in other components. Just in the example here, there is a validation message that needs to be hidden if the &quot;Title&quot; input has a non-blank value, so that component would need to listen for the change event on the input. (Alternatively, the &lt;strong&gt;TextInput&lt;/strong&gt; component could be provided with validation logic and &lt;em&gt;it&lt;/em&gt; would be responsible for showing or hiding the validation message - which would complicate the &lt;strong&gt;TextInput&lt;/strong&gt; class). On top of this, there is the &quot;Save&quot; button which should be disabled if either of the &quot;Title&quot; or &quot;Content&quot; input boxes have no value - so the Save button component would need to listen to change events from both text inputs and decide whether or not it should be enabled based upon their states. Maybe the input form itself wants to add an &quot;invalid&quot; class to itself for styling purposes if either of the inputs are invalid - now the form component has to listen to changes to the text inputs and add or remove this class. This way lies madness.&lt;/p&gt;

&lt;p&gt;In summary, most components should &lt;em&gt;not&lt;/em&gt; try to update themselves and so do not need state. The React bindings make it easy to write components that don&#39;t use state (again, I&#39;ll talk about using these bindings more shortly, I just wanted to point out now that the distinction between stateful and stateless components is an important one and that the bindings reflect this) -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class TextInput : StatelessComponent&amp;lt;TextInput.Props&amp;gt;
{
  public TextInput(Props props) : base(props) { }

  public override ReactElement Render()
  {
    return DOM.Input(new InputAttributes
    {
      Type = InputType.Text,
      Value = props.Value,
      OnChange = ev =&amp;gt; props.OnChange(ev.CurrentTarget.Value)
    });
  }

  public class Props
  {
    public string Value;
    public Action&amp;lt;string&amp;gt; OnChange;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The component code is much more succinct this way, as well as helping us avoid the nightmare scenario described above.&lt;/p&gt;

&lt;p&gt;It does leave one big question, though.. if these components don&#39;t update themselves, &lt;em&gt;then what does?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Answer: There should be a top-level &quot;Container Component&quot; that maintains state for the application. This should be the only stateful component, all components further down the hierarchy should be stateless.&lt;/p&gt;

&lt;p&gt;In the sample application here -&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;The proposed example app&quot; src=&quot;http://www.productiverage.com/Content/Images/Posts/ReactTutorial1.png&quot; class=&quot;NoBorder AlwaysFullWidth&quot;&gt;&lt;/p&gt;

&lt;p&gt;The component hierarchy will look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AppContainer
  MessageEditor
    Span (&quot;Title&quot;)
    ValidatedTextInput
      Input
    Span (&quot;Content&quot;)
    ValidatedTextInput
      Input
    Button
  MessageHistory
    Div
      Span (Message Title)
      Span (Message Content)
    Div
      Span (Message Title)
      Span (Message Content)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;MessageHistory&lt;/strong&gt; will be a read-only component tree (it just shows saved messages) and so is very simple (there are no callbacks to handle). The &lt;strong&gt;MessageEditor&lt;/strong&gt; will render Span labels (&quot;Title&quot; and &quot;Content&quot;), two &lt;strong&gt;ValidatedTextInput&lt;/strong&gt; components and a &quot;Save&quot; button. The &lt;strong&gt;ValidatedTextInput&lt;/strong&gt; has props for a current text input value, an on-change callback and an optional validation message.&lt;/p&gt;

&lt;p&gt;When an input component&#39;s on-change callback is executed, it is an action with a single argument; the html element. In the &lt;strong&gt;TextInput&lt;/strong&gt; example class above, the new value is extracted from that element (&quot;ev.CurrentTarget.Value&quot;) and then passed into the on-change callback of the &lt;strong&gt;TextInput&lt;/strong&gt;, which is an action with a simple string argument. &lt;strong&gt;ValidatedTextInput&lt;/strong&gt; will be very similar (it will wrap the &lt;strong&gt;Action&amp;lt;InputElement&amp;gt;&lt;/strong&gt; callback that the input raises in a simpler &lt;strong&gt;Action&amp;lt;string&amp;gt;&lt;/strong&gt;). The only difference between it and the &lt;strong&gt;TextInput&lt;/strong&gt; example class earlier is that it  will also be responsible for rendering a validation message element if its props value has a non-blank validation message to show (and it may apply an &quot;invalid&quot; class name to its wrapper if there is a validation message to show).&lt;/p&gt;

&lt;p&gt;When the Title or Content &lt;strong&gt;ValidatedTextInput&lt;/strong&gt; raise an on-change event, the &lt;strong&gt;MessageEditor&lt;/strong&gt; will execute some code that translates this callback further. The &lt;strong&gt;MessageEditor&lt;/strong&gt; will have an on-change props value whose single argument is a &lt;strong&gt;MessageDetails&lt;/strong&gt; - this will have have values for the current &quot;Title&quot; and &quot;Content&quot;. Just as an on-change from an input element resulted in an on-change being raised by a &lt;strong&gt;ValidatedTextInput&lt;/strong&gt;, an on-change by a &lt;strong&gt;ValidatedTextInput&lt;/strong&gt; will result in an on-change from the &lt;strong&gt;MessageEditor&lt;/strong&gt;. Each on-change event changes the type of value that the on-change describes (from an input element to a string to a &lt;strong&gt;MessageDetails&lt;/strong&gt;). The &lt;strong&gt;MessageEditor&lt;/strong&gt;&#39;s on-change will be received by the &lt;strong&gt;AppContainer&lt;/strong&gt; Component, which is where the change will result in the component tree being re-rendered.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;AppContainer&lt;/strong&gt; component will re-render by calling &quot;SetState&quot; and creating a new state reference for itself that include the new &lt;strong&gt;MessageDetails&lt;/strong&gt; reference (that was passed up in the on-change callback from the &lt;strong&gt;MessageEditor&lt;/strong&gt;). The call to &quot;SetState&quot; will result in the component being re-rendered, which will result in it rendering a new version of the &lt;strong&gt;MessageEditor&lt;/strong&gt;. When the &lt;strong&gt;MessageEditor&lt;/strong&gt; is rendered, the current &quot;Title&quot; value will be used to populate the text input &lt;em&gt;and&lt;/em&gt; to set the text in the legend of the fieldset that wraps the editor&#39;s input boxes. This is how the &quot;nightmare scenario&quot; described earlier is avoided - instead of having lots of components listen out to events from lots of &lt;em&gt;other&lt;/em&gt; components, all components just pass their events up to the top and then the entire UI is re-rendered in React&#39;s Virtual DOM.&lt;/p&gt;

&lt;p&gt;I&#39;m going to repeat that part about event-handling because it&#39;s important; events are passed &lt;em&gt;up&lt;/em&gt; from where they occur, up to the top-level component. This will trigger a re-render, which works all the way &lt;em&gt;down&lt;/em&gt; through the component tree, so that the requested change is then reflected in the UI.&lt;/p&gt;

&lt;p&gt;The Virtual DOM determines what (if anything) needs to change in the browser&#39;s DOM and applies those changes - this works well because the Virtual DOM is very fast (and so we can do these &quot;full Virtual DOM re-renders&quot; frequently) and it minimises changes to the browser DOM (which is much slower).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The Facebook tutorial &lt;a href=&quot;https://facebook.github.io/react/docs/thinking-in-react.html&quot;&gt;Thinking in React&lt;/a&gt; talks about how to mentally break down a UI into components and talks about passing state up the tree, but I wanted to try to really drive home how components should be put together and how they should communicate before fobbing you off with a Facebook link)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I have some more recommendations on how to decide what to put into props and what into state when creating stateful container components, but I&#39;ll cover that ground after some more practical work.&lt;/p&gt;

&lt;h3&gt;Let&#39;s start coding then!&lt;/h3&gt;

&lt;p&gt;Open up Visual Studio (the version isn&#39;t too important, but if you&#39;re using 2015 then bear in mind that Bridge.NET doesn&#39;t yet support C# 6 syntax). Create a new &quot;Class Library&quot; project. Using NuGet, add the &quot;Bridge&quot; and the &quot;Bridge.React&quot; packages. This will bring in bindings for React as well as pulling in Bridge itself - the Bridge package removes the usual System, System.Collections, etc.. references and replaces them with a single &quot;Bridge&quot; reference, which re-implements those framework methods in code that has JavaScript translations.&lt;/p&gt;

&lt;p&gt;The Bridge package also adds some README files and a bridge.json file (under the Bridge folder in the project), which instructs Bridge how to compile your C# code into JavaScript. Change bridge.json&#39;s content to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;output&quot;: &quot;Bridge/output&quot;,
  &quot;combineScripts&quot;:  true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will tell it create a single JavaScript file when translating, including the Bridge library content and the React bindings and JavaScript generated from code that you write. The name of the file that it generates is based upon the name of your project. I named mine &quot;BridgeReactTutorial&quot; and so the Bridge compiler will generate &quot;BridgeReactTutorial.js&quot; and &quot;BridgeReactTutorial.min.js&quot; files in the &quot;Bridge/output&quot; folder on each build of the project.&lt;/p&gt;

&lt;p&gt;Now change demo.html (which is another file that the Bridge NuGet package created, it will be in the Brige/www folder) to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
  &amp;lt;title&amp;gt;Bridge.React Tutorial&amp;lt;/title&amp;gt;
  &amp;lt;link rel=&quot;Stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot; media=&quot;screen&quot; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;noscript&amp;gt;JavaScript is required&amp;lt;/noscript&amp;gt;
  &amp;lt;div id=&quot;main&quot; class=&quot;loading&quot;&amp;gt;Loading..&amp;lt;/div&amp;gt;
  &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react-dom.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&quot;../output/BridgeReactTutorial.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(If you called your project something other than &quot;BridgeReactTutorial&quot; then you might have to change the filename in that last script tag).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This file will load in the latest (0.14.7, as of March 2016) version of the React library along with the Bridge / React-bindings / your-code bundle. All we need to do now is write some &quot;your-code&quot; content.&lt;/p&gt;

&lt;p&gt;When you created the class library project, a Class1.cs file will have been added to the project. Change its contents -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Linq;
using Bridge.Html5;
using Bridge.React;

namespace BridgeReactTutorial
{
  public class Class1
  {
    [Ready]
    public static void Main()
    {
      var container = Document.GetElementById(&quot;main&quot;);
      container.ClassName = string.Join(
        &quot; &quot;,
        container.ClassName.Split().Where(c =&amp;gt; c != &quot;loading&quot;)
      );
      React.Render(
        DOM.Div(new Attributes { ClassName = &quot;welcome&quot; }, &quot;Hi!&quot;),
        container
      );
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build the solution and then right-click on the &quot;demo.html&quot; file in the project and click on &quot;View in Browser&quot;. You should see a happy little &quot;Hi!&quot; welcome message, rendered using React by JavaScript that was translated from C# - an excellent start!&lt;/p&gt;

&lt;p&gt;There are some subtle touches here, such as the &quot;JavaScript is required&quot; message that is displayed if the browser has JavaScript disabled (just in case you ever turn it off and forget!) and a &quot;loading&quot; message that is displayed while the JavaScript sorts itself out (usually this will be a barely-perceptibe amount of time but if the CDN host that the React library is coming from is being slow then it may not be instantaneous). The &quot;main&quot; div initially has a &quot;loading&quot; class on it, which is removed when the code above executes. Note that the [Ready] attribute on the &quot;Main&quot; function is a Bridge attribute, indicating code that should be called when the page has loaded (similar in principle to on-DOM-ready, frequently used by jQuery code).&lt;/p&gt;

&lt;p&gt;To take advantage of the &quot;loading&quot; class&#39; presence / absence, it would be a nice touch to have the &quot;loading&quot; text quite pale initially (it&#39;s reassuring to know that the app is, in fact, loading, but it doesn&#39;t need to be right in your face). To do so, add a file &quot;styles.css&quot; alongside the &quot;demo.html&quot; file. It&#39;s already referenced by the markup we&#39;ve pasted into &quot;demo.html&quot;, so it will be picked up when you refresh the page. Since we&#39;re creating a stylesheet, it makes sense to include some style resets (my go-to for this is by Eric Meyer) -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* http://meyerweb.com/eric/tools/css/reset/ v2.0b1 | 201101 NOTE: WORK IN PROGRESS
 USE WITH CAUTION AND TEST WITH ABANDON */
html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote,
pre,a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s,
samp, small, strike, strong, sub, sup, tt, var,b, u, i, center, dl, dt, dd, ol, ul,
li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, figcaption, figure, footer, header, hgroup, menu,
nav, section, summary, time, mark, audio, video
{
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav,
section { display: block; }
body { line-height: 1; }
ol, ul { list-style: none; }
blockquote, q { quotes: none; }
blockquote:before, blockquote:after, q:before, q:after { content: &#39;&#39;; content: none; }
/* remember to highlight inserts somehow! */ ins { text-decoration: none; }
del { text-decoration: line-through; }
table { border-collapse: collapse; border-spacing: 0; }

div#main.loading { color: #f1f1f1; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, I also tend to remove the &quot;App_Readme&quot; folder that the Bridge package adds to my project - if I&#39;m going to write some code and check it into source control somewhere then I don&#39;t think there&#39;s a lot of point in storing a copy of the Bridge README and LICENSE each time.&lt;/p&gt;

&lt;h3&gt;Creating the Message Editor&lt;/h3&gt;

&lt;p&gt;That&#39;s the theory and the project scaffolding out of the way. Now to create a form that actually does something.&lt;/p&gt;

&lt;p&gt;We&#39;ve already seen how a &lt;strong&gt;TextInput&lt;/strong&gt; component is helpful for wrapping a text input and simplifying the &quot;OnChange&quot; callback. So create a &quot;Components&quot; folder with a &quot;TextInput.cs&quot; file and paste in the following content -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.Html5;
using Bridge.React;

namespace BridgeReactTutorial.Components
{
  public class TextInput : StatelessComponent&amp;lt;TextInput.Props&amp;gt;
  {
    public TextInput(Props props) : base(props) { }

    public override ReactElement Render()
    {
      return DOM.Input(new InputAttributes
      {
        Type = InputType.Text,
        ClassName = props.ClassName,
        Value = props.Content,
        OnChange = e =&amp;gt; props.OnChange(e.CurrentTarget.Value)
      });
    }

    public class Props
    {
      public string ClassName;
      public string Content;
      public Action&amp;lt;string&amp;gt; OnChange;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(Note: When adding a new &quot;.cs&quot; file to a project, sometimes &quot;System&quot; will sneak back into the list of references in the project - this can confuse Bridge, so ensure that you remove the reference again if it gets added).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now create another folder in the root of the project called &quot;ViewModels&quot;. Add a new file to it; &quot;MessageDetails.cs&quot; and paste in the following content -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace BridgeReactTutorial.ViewModels
{
  public class MessageDetails
  {
    public string Title;
    public string Content;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add another file to the &quot;Components&quot; folder; &quot;MessageEditor.cs&quot; and paste in this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.React;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Components
{
  public class MessageEditor : StatelessComponent&amp;lt;MessageEditor.Props&amp;gt;
  {
    public MessageEditor(Props props) : base(props) { }

    public override ReactElement Render()
    {
      return DOM.FieldSet(new FieldSetAttributes { ClassName = props.ClassName },
        DOM.Legend(null, string.IsNullOrWhiteSpace(props.Title) ? &quot;Untitled&quot; : props.Title),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Title&quot;),
        new TextInput(new TextInput.Props
        {
          ClassName = &quot;title&quot;,
          Content = props.Title,
          OnChange = newTitle =&amp;gt; props.OnChange(new MessageDetails
          {
            Title = newTitle,
            Content = props.Content
          })
        }),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Content&quot;),
        new TextInput(new TextInput.Props
        {
          ClassName = &quot;content&quot;,
          Content = props.Content,
          OnChange = newContent =&amp;gt; props.OnChange(new MessageDetails
          {
            Title = props.Title,
            Content = newContent
          })
        })
      );
    }

    public class Props
    {
      public string ClassName;
      public string Title;
      public string Content;
      public Action&amp;lt;MessageDetails&amp;gt; OnChange;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now things are getting interesting!&lt;/p&gt;

&lt;p&gt;This is still a stateless component and so what is rendered depends solely and reliably upon its props data. When it renders, the &quot;Title&quot; value from its props is used to populate both the legend of the fieldset that it renders (unless &quot;Title&quot; is null, blank or white-space-only, in which case the legend text will be &quot;Untitled) and it&#39;s used to populate the &quot;Title&quot; &lt;strong&gt;TextInput&lt;/strong&gt;. When either of its &lt;strong&gt;TextInput&lt;/strong&gt;s raises an on-change event, the &lt;strong&gt;MessageEditor&lt;/strong&gt; raises its on-change events with a new &lt;strong&gt;MessageDetails&lt;/strong&gt; instance.&lt;/p&gt;

&lt;p&gt;Note that there&#39;s no validation yet. We&#39;ll get this rough version working first and then add that later.&lt;/p&gt;

&lt;p&gt;There are still a few more steps until we have an application, though. We need a container component to render the form in the first place and to deal with on-change events that bubble up. Create another class file within the &quot;Components&quot; folder named &quot;AppContainer.cs&quot; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.Html5;
using Bridge.React;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Components
{
  public class AppContainer : Component&amp;lt;object, AppContainer.State&amp;gt;
  {
    public AppContainer() : base(null) { }

    protected override State GetInitialState()
    {
      return new State
      {
        Message = new MessageDetails { Title = &quot;&quot;, Content = &quot;&quot; }
      };
    }

    public override ReactElement Render()
    {
      return new MessageEditor(new MessageEditor.Props
      {
        ClassName = &quot;message&quot;,
        Title = state.Message.Title,
        Content = state.Message.Content,
        OnChange = newMessage =&amp;gt; SetState(new State { Message = newMessage })
      });
    }

    public class State
    {
      public MessageDetails Message;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the &lt;em&gt;stateful&lt;/em&gt; component that will trigger re-renders when required. It doesn&#39;t actually require any props data at this time, so the &quot;TProps&quot; type parameter specified on the &lt;strong&gt;Component&amp;lt;TProps, TState&amp;gt;&lt;/strong&gt; base class is just &quot;object&quot;.&lt;/p&gt;

&lt;p&gt;When the &lt;strong&gt;MessageEditor&lt;/strong&gt; raises an on-change event, the &lt;strong&gt;AppContainer&lt;/strong&gt; will call SetState to replace its current &lt;strong&gt;MessageDetails&lt;/strong&gt; instance with the new one. This will trigger a re-render of the &lt;strong&gt;MessageEditor&lt;/strong&gt;, which will be given the new &lt;strong&gt;MessageDetails&lt;/strong&gt; instance as part of a new props value. It might seem a bit silly to have the &lt;strong&gt;MessageEditor&lt;/strong&gt; pass up a new &lt;strong&gt;MessageDetails&lt;/strong&gt; instance and then to just pass this back down into another &lt;strong&gt;MessageEditor&lt;/strong&gt;, but the idea is to consider the first &lt;strong&gt;MessageEditor&lt;/strong&gt; to be dead now and for the new &lt;strong&gt;MessageEditor&lt;/strong&gt; (with the new &lt;strong&gt;MessageDetails&lt;/strong&gt;) to exist in its place. And each time a stateless component is rendered, it renders simply from its props - there is no data shared between the new instance and the instance it replaces. This, again, makes the components very easy to reason about. And code that is easy to reason about is easy to write and easy to maintain.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: If you&#39;re au fait with React then you might know that components written as ES6 classes - which seems to be the way that is encouraged at the moment - don&#39;t support &quot;GetInitialState&quot; and, instead, specify initial state in the constructor. In the Bridge React bindings, &quot;GetInitialState&quot; should be used and the constructor should NOT be used - the way that the components are initialised by React means that constructors on component classes are not actually executed, so it is important that the constructor ONLY be used to pass the props and/or state to the base class.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The penultimate step is to change &quot;Class1.cs&quot; to render the &lt;strong&gt;AppContainer&lt;/strong&gt; instead of just rendering a &quot;Hi!&quot; div. While we&#39;re editing it, let&#39;s give it a more official-sounding name. I like the starting point of my application to be called &quot;App&quot; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Linq;
using Bridge.Html5;
using Bridge.React;
using BridgeReactTutorial.Components;

namespace BridgeReactTutorial
{
  public class App
  {
    [Ready]
    public static void Go()
    {
      var container = Document.GetElementById(&quot;main&quot;);
      container.ClassName = string.Join(
        &quot; &quot;,
        container.ClassName.Split().Where(c =&amp;gt; c != &quot;loading&quot;)
      );
      React.Render(new AppContainer(), container);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All that&#39;s required now is to make it look a little nicer when you view &quot;demo.html&quot;, so add the following to &quot;styles.css&quot; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body
{
  font-family: &#39;Segoe UI&#39;;
  padding: 8px;
}

fieldset
{
  padding: 8px;
  border: 1px solid #f1f1f1;
  border-radius: 4px;
}
fieldset legend
{
  color: blue;
  padding: 0 8px;
}
fieldset.message span.label { padding: 0 8px; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&#39;s the first major milestone reached! A very basic framework for constructing component hierarchies has been demonstrated, along with a way to handle events and re-render as required. There&#39;s nothing very radical, it&#39;s just what was described earlier; but it&#39;s good to see the theory executed in practice.&lt;/p&gt;

&lt;p&gt;I&#39;m far from finished for today, though - I want to add a way to persist messages, a message history component and some validation. Best get cracking!&lt;/p&gt;

&lt;h3&gt;Message persistence&lt;/h3&gt;

&lt;p&gt;While I want to simulate a server-based API, where read / write requests aren&#39;t instantaneous and we need to think about how to deal with async calls, I don&#39;t want the overhead of needing an endpoint to be configured somewhere. So we&#39;ll go with a simple interface that will be implemented in an entirely client-side class, that introduces artifical delays to mimic server-calling time.&lt;/p&gt;

&lt;p&gt;Create a new folder in the project root called &quot;API&quot; and add a new .cs file &quot;IReadAndWriteMessages.cs&quot;, the contents of which should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Threading.Tasks;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.API
{
  public interface IReadAndWriteMessages
  {
    Task SaveMessage(MessageDetails message);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&#39;ll be using dependency injection to provide the &lt;strong&gt;AppContainer&lt;/strong&gt; with an API implementation. In order to enable unit testing (which will come later) we need to be able to work against an interface. For now, the interface only has a &quot;SaveMessage&quot; method, we&#39;ll work on reading message history data later.&lt;/p&gt;

&lt;p&gt;Add another file into the &quot;API&quot; folder, &quot;MessageApi.cs&quot; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Threading.Tasks;
using Bridge.Html5;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.API
{
  public class MessageApi : IReadAndWriteMessages
  {
    public Task SaveMessage(MessageDetails message)
    {
      if (message == null)
        throw new ArgumentNullException(&quot;message&quot;);
      if (string.IsNullOrWhiteSpace(message.Title))
        throw new ArgumentException(&quot;A title value must be provided&quot;);
      if (string.IsNullOrWhiteSpace(message.Content))
        throw new ArgumentException(&quot;A content value must be provided&quot;);

      var task = new Task&amp;lt;object&amp;gt;(null);
      Window.SetTimeout(
        () =&amp;gt; task.Complete(),
        1000 // Simulate a roundtrip to the server
      );
      return task;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bridge supports the C# &quot;async&quot; keyword and provides its own implementation of Tasks, which are used above to pretend that this class is communicating with a server when a save is requested.&lt;/p&gt;

&lt;p&gt;In order to enable saving, the &lt;strong&gt;MessageEditor&lt;/strong&gt; needs a &quot;Save&quot; button and it needs an &quot;on-save&quot; callback to be specified on its props. While saving, the form should be disabled, so the &lt;strong&gt;MessageEditor&lt;/strong&gt; props need a &quot;Disabled&quot; flag as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When designing an SPA like this, you need to think about whether you will support &quot;optimistic updates&quot;, where clicking Save clears the form and acts as if the save action was instanteously accepted - but brings it to the user&#39;s attention somehow if the save failed or was rejected. I&#39;m going to go for a simpler &quot;pessimistic update&quot; flow, where the form is disabled until the save is acknowledged, at which point the form will be cleared and re-enabled so that a further entry may be written and then saved.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;MessageEditor&lt;/strong&gt; should now looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.React;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Components
{
  public class MessageEditor : StatelessComponent&amp;lt;MessageEditor.Props&amp;gt;
  {
    public MessageEditor(Props props) : base(props) { }

    public override ReactElement Render()
    {
      return DOM.FieldSet(new FieldSetAttributes { ClassName = props.ClassName },
        DOM.Legend(null, string.IsNullOrWhiteSpace(props.Title) ? &quot;Untitled&quot; : props.Title),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Title&quot;),
        new TextInput(new TextInput.Props
        {
          ClassName = &quot;title&quot;,
          Disabled = props.Disabled,
          Content = props.Title,
          OnChange = newTitle =&amp;gt; props.OnChange(new MessageDetails
          {
            Title = newTitle,
            Content = props.Content
          })
        }),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Content&quot;),
        new TextInput(new TextInput.Props
        {
          ClassName = &quot;content&quot;,
          Disabled = props.Disabled,
          Content = props.Content,
          OnChange = newContent =&amp;gt; props.OnChange(new MessageDetails
          {
            Title = props.Title,
            Content = newContent
          })
        }),
        DOM.Button(
          new ButtonAttributes { Disabled = props.Disabled, OnClick = e =&amp;gt; props.OnSave() },
          &quot;Save&quot;
        )
      );
    }

    public class Props
    {
      public string ClassName;
      public string Title;
      public string Content;
      public Action&amp;lt;MessageDetails&amp;gt; OnChange;
      public Action OnSave;
      public bool Disabled;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &quot;Disabled&quot; flag needs to be able to be applied to the &lt;strong&gt;TextInput&lt;/strong&gt; components, so &lt;strong&gt;TextInput&lt;/strong&gt; needs to look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.Html5;
using Bridge.React;

namespace BridgeReactTutorial.Components
{
  public class TextInput : StatelessComponent&amp;lt;TextInput.Props&amp;gt;
  {
    public TextInput(Props props) : base(props) { }

    public override ReactElement Render()
    {
      return DOM.Input(new InputAttributes
      {
        Type = InputType.Text,
        ClassName = props.ClassName,
        Disabled = props.Disabled,
        Value = props.Content,
        OnChange = e =&amp;gt; props.OnChange(e.CurrentTarget.Value)
      });
    }

    public class Props
    {
      public string ClassName;
      public bool Disabled;
      public string Content;
      public Action&amp;lt;string&amp;gt; OnChange;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This enables the &lt;strong&gt;MessageEditor&lt;/strong&gt; to initiate a save request and for a &quot;Message API&quot; to process the request. Now the &lt;strong&gt;AppContainer&lt;/strong&gt; needs to tie these two aspects together.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that the OnSave action on the &lt;strong&gt;MessageEditor&lt;/strong&gt; doesn&#39;t provide a new &lt;strong&gt;MessageDetails&lt;/strong&gt; instance - that is because the Title and Content value that are rendered in the &lt;strong&gt;MessageEditor&lt;/strong&gt; could not have been changed since the component was rendered, otherwise an OnChange callback would have been made before OnSave.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, the &lt;strong&gt;AppContainer&lt;/strong&gt; gets a bit more interesting because it requires props &lt;em&gt;and&lt;/em&gt; state. Its props will be external dependencies that it requires access to, while its state will be a copy of all data that is required to render the form. This is a good time to introduce my React (stateful) component guidelines -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A stateful component&#39;s &quot;props&quot; data should &lt;em&gt;only&lt;/em&gt; consist of references to external dependencies&lt;/li&gt;
&lt;li&gt;A stateful component&#39;s &quot;state&quot; data should include &lt;em&gt;everything&lt;/em&gt; required to render the component tree, though the props may be required to deal with child components&#39; events&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, these rules are going to seem very straight-forward. Later, however, things will get a little more nuanced and I&#39;ll re-visit them at that point.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;AppContainer&lt;/strong&gt; will now become the following -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Bridge.React;
using BridgeReactTutorial.API;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Components
{
  public class AppContainer : Component&amp;lt;AppContainer.Props, AppContainer.State&amp;gt;
  {
    public AppContainer(AppContainer.Props props) : base(props) { }

    protected override State GetInitialState()
    {
      return new State
      {
        Message = new MessageDetails { Title = &quot;&quot;, Content = &quot;&quot; },
        IsSaveInProgress = false
      };
    }

    public override ReactElement Render()
    {
      return new MessageEditor(new MessageEditor.Props
      {
        ClassName = &quot;message&quot;,
        Title = state.Message.Title,
        Content = state.Message.Content,
        OnChange = newMessage =&amp;gt; SetState(new State
        {
          Message = newMessage,
          IsSaveInProgress = state.IsSaveInProgress
        }),
        OnSave = async () =&amp;gt;
        {
          SetState(new State { Message = state.Message, IsSaveInProgress = true });
          await props.MessageApi.SaveMessage(state.Message);
          SetState(new State
          {
            Message = new MessageDetails { Title = &quot;&quot;, Content = &quot;&quot; },
            IsSaveInProgress = false
          });
        },          
        Disabled = state.IsSaveInProgress
      });
    }

    public class Props
    {
      public IReadAndWriteMessages MessageApi;
    }

    public class State
    {
      public MessageDetails Message;
      public bool IsSaveInProgress;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will need to update App.cs to pass a props reference with a &lt;strong&gt;MessageApi&lt;/strong&gt; instance to the &lt;strong&gt;AppContainer&lt;/strong&gt; constructor -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Linq;
using Bridge.Html5;
using Bridge.React;
using BridgeReactTutorial.API;
using BridgeReactTutorial.Components;

namespace BridgeReactTutorial
{
  public class App
  {
    [Ready]
    public static void Go()
    {
      var container = Document.GetElementById(&quot;main&quot;);
      container.ClassName = string.Join(
        &quot; &quot;,
        container.ClassName.Split().Where(c =&amp;gt; c != &quot;loading&quot;)
      );
      React.Render(
        new AppContainer(new AppContainer.Props { MessageApi = new MessageApi() }),
        container
      );
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this final piece, we have the outline of a fully functioning application! Granted, its functionality is not particular magnificent, but it &lt;em&gt;has&lt;/em&gt; illustrated some important principles. We&#39;ve seen how a component hierarchy should have a top-level &lt;em&gt;stateful&lt;/em&gt; component, with a component tree beneath it of state&lt;em&gt;less&lt;/em&gt; components (note that there are no guidelines required regarding what to put into props and what to put into state when writing a stateless component because props is your only option - another reason why stateless components are so much simpler!). We&#39;ve also seen how we can deal with dependency injection for these top level components, which are the only point at which more complicated logic appears such as &quot;a save request involves disabling the form, calling a method on the API, waiting for the result and then re-enabling the form&quot;. It&#39;s worth noting that in the next post, this logic will be moved out of the top-level component in a quest to make components as dumb as possible - but that&#39;s jumping ahead, and I want the format of these posts to be that we start simple and then get more complicated only as the benefits of doing so can be made clear.&lt;/p&gt;

&lt;p&gt;At this point, however, we have something of a problem. If the &quot;Title&quot; and &quot;Content&quot; text inputs do not both have values, then an exception will be raised by the &lt;strong&gt;MessageApi&lt;/strong&gt; when a save is attempted. To avoid this, we need some..&lt;/p&gt;

&lt;h3&gt;Validation&lt;/h3&gt;

&lt;p&gt;I mentioned in the &quot;React components&quot; section that there would be a &lt;strong&gt;ValidatedTextInput&lt;/strong&gt;, but no code had been presented yet. So here we go, nothing in it should be particularly surprising -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.React;

namespace BridgeReactTutorial.Components
{
  public class ValidatedTextInput : StatelessComponent&amp;lt;ValidatedTextInput.Props&amp;gt;
  {
    public ValidatedTextInput(Props props) : base(props) { }

    public override ReactElement Render()
    {
      var className = props.ClassName;
      if (!string.IsNullOrWhiteSpace(props.ValidationMessage))
        className = (className + &quot; invalid&quot;).Trim();

      return DOM.Span(new Attributes { ClassName = className },
        new TextInput(new TextInput.Props
        {
          ClassName = props.ClassName,
          Disabled = props.Disabled,
          Content = props.Content,
          OnChange = props.OnChange
        }),
        string.IsNullOrWhiteSpace(props.ValidationMessage)
          ? null
          : DOM.Span(
            new Attributes { ClassName = &quot;validation-message&quot; },
            props.ValidationMessage
          )
      );
    }

    public class Props
    {
      public string ClassName;
      public bool Disabled;
      public string Content;
      public Action&amp;lt;string&amp;gt; OnChange;
      public string ValidationMessage;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows the &lt;strong&gt;MessageEditor&lt;/strong&gt; to be changed to use these &lt;strong&gt;ValidatedTextInput&lt;/strong&gt;s instead of regular &lt;strong&gt;TextInput&lt;/strong&gt;s, setting the &quot;ValidationMessage&quot; values according to whether the &quot;Content&quot; string has a value -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Bridge.React;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Components
{
  public class MessageEditor : StatelessComponent&amp;lt;MessageEditor.Props&amp;gt;
  {
    public MessageEditor(Props props) : base(props) { }

    public override ReactElement Render()
    {
      var formIsInvalid =
        string.IsNullOrWhiteSpace(props.Title) ||
        string.IsNullOrWhiteSpace(props.Content);

      return DOM.FieldSet(new FieldSetAttributes { ClassName = props.ClassName },
        DOM.Legend(null, string.IsNullOrWhiteSpace(props.Title) ? &quot;Untitled&quot; : props.Title),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Title&quot;),
        new ValidatedTextInput(new ValidatedTextInput.Props
        {
          ClassName = &quot;title&quot;,
          Disabled = props.Disabled,
          Content = props.Title,
          OnChange = newTitle =&amp;gt; props.OnChange(new MessageDetails
          {
            Title = newTitle,
            Content = props.Content
          }),
          ValidationMessage = string.IsNullOrWhiteSpace(props.Title)
            ? &quot;Must enter a title&quot;
            : null
        }),
        DOM.Span(new Attributes { ClassName = &quot;label&quot; }, &quot;Content&quot;),
        new ValidatedTextInput(new ValidatedTextInput.Props
        {
          ClassName = &quot;content&quot;,
          Disabled = props.Disabled,
          Content = props.Content,
          OnChange = newContent =&amp;gt; props.OnChange(new MessageDetails
          {
            Title = props.Title,
            Content = newContent
          }),
          ValidationMessage = string.IsNullOrWhiteSpace(props.Content)
            ? &quot;Must enter message content&quot;
            : null
        }),
        DOM.Button(
          new ButtonAttributes
          {
            Disabled = props.Disabled || formIsInvalid,
            OnClick = e =&amp;gt; props.OnSave()
          },
          &quot;Save&quot;
        )
      );
    }

    public class Props
    {
      public string ClassName;
      public string Title;
      public string Content;
      public Action&amp;lt;MessageDetails&amp;gt; OnChange;
      public Action OnSave;
      public bool Disabled;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the &quot;Save&quot; button is disabled if the &lt;strong&gt;MessageEditor&lt;/strong&gt; is disabled (according to its props flag) &lt;em&gt;or&lt;/em&gt; if the form entry is invalid. Now, it&#39;s not possible for the user to attempt a save that we will know will fail!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Moving validation logic out of the components is another thing that will come in the move towards dumb-as-possible components, but that&#39;s for part two).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To keep things looking pretty, adding the following to &quot;styles.css&quot; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fieldset.message span.title, fieldset.message span.content { position: relative; }
fieldset.message span.validation-message
{
  position: absolute;
  top: -6px;
  right: 2px;
  padding: 2px 4px;
  font-size: 70%;
  background: #FFF9D8;
  border: 1px solid #EFE9CB;
  border-radius: 2px;
  color: #A8A390;
}
fieldset.message button { margin-left: 8px; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Message History&lt;/h3&gt;

&lt;p&gt;What&#39;s the point in saving messages if we can&#39;t read them back out again? To enable this, the &lt;strong&gt;IReadAndWriteMessages&lt;/strong&gt; needs a &quot;GetMessages&quot; method to accompany &quot;SaveMessage&quot; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.API
{
  public interface IReadAndWriteMessages
  {
    Task SaveMessage(MessageDetails message);
    Task&amp;lt;IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt;&amp;gt; GetMessages();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This needs implementing in &lt;strong&gt;MessageApi&lt;/strong&gt; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Bridge.Html5;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.API
{
  public class MessageApi : IReadAndWriteMessages
  {
    private readonly List&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; _messages;
    public MessageApi()
    {
      _messages = new List&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt;();
    }

    public Task SaveMessage(MessageDetails message)
    {
      if (message == null)
        throw new ArgumentNullException(&quot;message&quot;);
      if (string.IsNullOrWhiteSpace(message.Title))
        throw new ArgumentException(&quot;A title value must be provided&quot;);
      if (string.IsNullOrWhiteSpace(message.Content))
        throw new ArgumentException(&quot;A content value must be provided&quot;);

      var task = new Task&amp;lt;object&amp;gt;(null);
      Window.SetTimeout(
        () =&amp;gt;
        {
          _messages.Add(Tuple.Create(_messages.Count, message));
          task.Complete();
        },
        1000 // Simulate a roundtrip to the server
      );
      return task;
    }

    public Task&amp;lt;IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt;&amp;gt; GetMessages()
    {
      // ToArray is used to return a clone of the message set - otherwise, the caller would
      // end up with a list that is updated when the internal reference within this class
      // is updated (which sounds convenient but it&#39;s not the behaviour that would be
      // exhibited if this was really persisting messages to a server somewhere)
      var task = new Task&amp;lt;IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt;&amp;gt;(null);
      Window.SetTimeout(
        () =&amp;gt; task.Complete(_messages.ToArray()),
        1000 // Simulate a roundtrip to the server
      );
      return task;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we&#39;ll need a way to render this information -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Linq;
using Bridge.React;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Components
{
  public class MessageHistory : StatelessComponent&amp;lt;MessageHistory.Props&amp;gt;
  {
    public MessageHistory(Props props) : base(props) { }

    public override ReactElement Render()
    {
      var className = props.ClassName;
      if (!props.Messages.Any())
        className = (className + &quot; zero-messages&quot;).Trim();

      // Any time a set of child components is dynamically-created (meaning that the
      // numbers of items may vary from one render to another), each must have a unique
      // &quot;Key&quot; property set (this may be a int or a string). Here, this is simple as
      // each message tuple is a unique id and the contents of that message (and the
      // unique id is ideal for use as a unique &quot;Key&quot; property).
      var messageElements = props.Messages
        .Select(idAndMessage =&amp;gt; DOM.Div(new Attributes { Key = idAndMessage.Item1 },
          DOM.Span(new Attributes { ClassName = &quot;title&quot; }, idAndMessage.Item2.Title),
          DOM.Span(new Attributes { ClassName = &quot;content&quot; }, idAndMessage.Item2.Content)
        ));

      // When child components are specified (as they are through the second argument of
      // DOM.Div), the argument is of type Any&amp;lt;ReactElement, string&amp;gt;[] (meaning that each
      // element may be another component or it may be a simple text value)
      // - The React  bindings have an extension method that transforms an IEnumerable
      //   set of components (such as &quot;messageElements&quot; above) into an
      //   Any&amp;lt;ReactElement, string&amp;gt;[]
      return DOM.FieldSet(new FieldSetAttributes { ClassName = className },
        DOM.Legend(null, &quot;Message History&quot;),
        DOM.Div(null, messageElements.ToChildComponentArray())
      );
    }

    public class Props
    {
      public string ClassName;
      public IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; Messages;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This highlights an important React principle - where there are sets of dynamic child components, each must be provided a unique key. In the component above, we take &quot;props.Messages&quot; and map the data onto a set of Div elements. It&#39;s very possible that different messages will be rendered each time and so this is precisely what is meant by &quot;dynamic child components&quot;.&lt;/p&gt;

&lt;p&gt;There are two reasons why it&#39;s important to provide unique keys - the first is performance; the task of React&#39;s Virtual DOM is to take the last component tree and the new component tree and work out what changed, so that the minimum changes may be applied to the browser DOM. In order to do this, it is very helpful for React to be able to track components as they move around within a dynamic set - it can allow it to reuse data internally instead of having to throw away representations of components and recreate them:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When React reconciles the keyed children, it will ensure that any child with key will be reordered (instead of clobbered) or destroyed (instead of reused).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The quote above is from &lt;a href=&quot;https://facebook.github.io/react/docs/multiple-components.html#dynamic-children&quot;&gt;Facebook&#39;s docs about Dynamic Children&lt;/a&gt; - and so &quot;clobbered&quot; must be an official term!&lt;/p&gt;

&lt;p&gt;The second reason why it&#39;s important is that component state can only be tracked with a component if the component itself can be tracked by React when dynamic elements move around. I&#39;m not going to dwell too long on this because it&#39;s only applicable if you are relying on dynamic components having state, which you shouldn&#39;t be since only the top-level component should be stateful (and any component that may be created as a dynamic child component should be stateless).&lt;/p&gt;

&lt;p&gt;For our purposes here, providing a unique key for each &lt;strong&gt;MessageHistory&lt;/strong&gt; row is easy because the &quot;GetMessages&quot; method in the API returns a set of tuples, where each pair is a combination of id for the message and the message itself. This was easy to implement with the in-memory message store that we&#39;re using for this sample app, but it&#39;s also often easy when persisting by sending the data over the wire to a database somewhere; it&#39;s common for the database to generate unique ids for each record, and this would be returned in the data from &quot;GetMessages&quot;.&lt;/p&gt;

&lt;p&gt;Now we have to return to the &lt;strong&gt;AppContainer&lt;/strong&gt; to tie everything together; we need to add the message history data to the &lt;strong&gt;AppContainer&lt;/strong&gt;&#39;s state, we need to read the message history after we save and we need to render the message history -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using Bridge.React;
using BridgeReactTutorial.API;
using BridgeReactTutorial.ViewModels;

namespace BridgeReactTutorial.Components
{
  public class AppContainer : Component&amp;lt;AppContainer.Props, AppContainer.State&amp;gt;
  {
    public AppContainer(AppContainer.Props props) : base(props) { }

    protected override State GetInitialState()
    {
      return new State
      {
        Message = new MessageDetails { Title = &quot;&quot;, Content = &quot;&quot; },
        IsSaveInProgress = false,
        MessageHistory = new Tuple&amp;lt;int, MessageDetails&amp;gt;[0]
      };
    }

    public override ReactElement Render()
    {
      return DOM.Div(null,
        new MessageEditor(new MessageEditor.Props
        {
          ClassName = &quot;message&quot;,
          Title = state.Message.Title,
          Content = state.Message.Content,
          OnChange = newMessage =&amp;gt; SetState(new State
          {
            Message = newMessage,
            IsSaveInProgress = state.IsSaveInProgress,
            MessageHistory = state.MessageHistory
          }),
          OnSave = async () =&amp;gt;
          {
            // Set SaveInProgress to true while the save operation is requested
            SetState(new State {
              Message = state.Message,
              IsSaveInProgress = true,
              MessageHistory = state.MessageHistory
            });
            await props.MessageApi.SaveMessage(state.Message);

            // After the save has completed, clear the message entry form and reset
            // SaveInProgress to false
            SetState(new State {
              Message = new MessageDetails { Title = &quot;&quot;, Content = &quot;&quot; },
              IsSaveInProgress = false,
              MessageHistory = state.MessageHistory
            });

            // Then re-load the message history state and re-render when that data arrives
            var allMessages = await props.MessageApi.GetMessages();
            SetState(new State {
              Message = state.Message,
              IsSaveInProgress = state.IsSaveInProgress,
              MessageHistory = allMessages
            });
          },
          Disabled = state.IsSaveInProgress
        }),
        new MessageHistory(new MessageHistory.Props
        {
          ClassName = &quot;history&quot;,
          Messages = state.MessageHistory
        })
      );
    }

    public class Props
    {
      public IReadAndWriteMessages MessageApi;
    }

    public class State
    {
      public MessageDetails Message;
      public bool IsSaveInProgress;
      public IEnumerable&amp;lt;Tuple&amp;lt;int, MessageDetails&amp;gt;&amp;gt; MessageHistory;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The logic in this component is getting more complicated now, which is down to the event-handling; what needs to happen when this happens and then this happens and then this happens (eg. the user clicks save, we initiate a save request, the API completes the request, we update the UI to clear the form and then start loading the updated message history, then we update the UI with the new message content).&lt;/p&gt;

&lt;p&gt;One of the goals going forward will be to separate out this logic, away from the React components. The reason that I&#39;ve made a couple of mentions of moving towards &quot;dumb components&quot; is that it makes unit testing much easier - everything outside of the React components will be simple C# / JavaScript code, which is always easier to test than UI elements, even when the UI is created using the React library. Another benefit of separating application logic from the UI components is that it makes both sides easier to reason about - and this is another theme that I&#39;ll be re-visiting during this mini-series.&lt;/p&gt;

&lt;p&gt;It&#39;s worth mentioning that, even though it&#39;s gotten more complicated, the &lt;strong&gt;AppContainer&lt;/strong&gt; (the only stateful component in the application) still adheres to the stateful component guidelines:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A stateful component&#39;s &quot;props&quot; data should &lt;em&gt;only&lt;/em&gt; consist of references to external dependencies&lt;/li&gt;
&lt;li&gt;A stateful component&#39;s &quot;state&quot; data should include &lt;em&gt;everything&lt;/em&gt; required to render the component tree, though the props may be required to deal with child components&#39; events&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;All&lt;/em&gt; of the data required to render the UI is present in the state. The props data is only required within &quot;Render&quot; in order to process some of the callbacks from the child components. Any changes that must then be reflected in the UI come through a call to SetState - at the point of the SetState-triggered re-render, all of the data required to generate the child components will, once again, be present entirely within the state data.&lt;/p&gt;

&lt;p&gt;To keep things look nice, add the following to &quot;styles.css&quot; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fieldset.history
{
  opacity: 1;
  transition: opacity .5s ease-in-out;
}
fieldset.history.zero-messages { opacity: 0; }
fieldset.history span.title
{
  padding: 0 8px;
  font-weight: bold;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will have the &lt;strong&gt;MessageHistory&lt;/strong&gt; invisible to begin with, fading in when the first message is available to display.&lt;/p&gt;

&lt;h3&gt;Coming in Part Two..&lt;/h3&gt;

&lt;p&gt;I think this makes a good point at which to draw the first part of this series to a close. To be honest, we haven&#39;t got very close at all yet to the &quot;The Dan Way&quot; of writing React applications - so far, it&#39;s been fairly straight-forward and in-line with the basic React guidelines from Facebook.&lt;/p&gt;

&lt;p&gt;Which isn&#39;t to save that we haven&#39;t covered a lot of good ground! This will serve as a good base from which we can improve things. But we haven&#39;t seen the &quot;Flux architecture&quot; at all yet, and have only hinted at why we would want it. I&#39;m not happy with how many of the properties on the various props, state and other data types are presented - one of my pet peeves with APIs is not knowing what can and can&#39;t be null; on the &lt;strong&gt;TextInput&lt;/strong&gt;&#39;s &lt;strong&gt;Props&lt;/strong&gt; class, the &quot;ClassName&quot; string &lt;em&gt;may&lt;/em&gt; be null but the &quot;OnChange&quot; callback must not be. These facts are not clear from just looking at the class. Similarly, it would be nice to know whether or not there are any guarantees about the &quot;Title&quot; and &quot;Content&quot; strings on the &lt;strong&gt;MessageDetails&lt;/strong&gt; class (is it ever really acceptable for them to be null?). Finally, the reading and writing of messages through the &lt;strong&gt;MessageApi&lt;/strong&gt; implementation we have here works fine for one person doing all the writing, but how could we deal with it if the &lt;strong&gt;MessageApi&lt;/strong&gt; simulated a server-based API that received new messages from &lt;em&gt;other&lt;/em&gt; uses, either through some sort of polling or through a push mechanism? This is an important question for systems that have to support multiple users.&lt;/p&gt;

&lt;p&gt;All of these questions will be answered in later posts, along with further advice to try to help you do what I think React does best - write code that is easier to reason about, and thus easier to read, maintain and extend.&lt;/p&gt;
</description>
			<pubDate>Tue, 15 Mar 2016 23:55:00 GMT</pubDate>
		</item>
		<item>
			<title>Easy &quot;PureComponent&quot; React performance boosts for Bridge.Net</title>
            <link>http://www.productiverage.com/easy-purecomponent-react-performance-boosts-for-bridgenet</link>
			<guid>http://www.productiverage.com/easy-purecomponent-react-performance-boosts-for-bridgenet</guid>
			<description>&lt;p&gt;React&#39;s great strength is that it makes creating UIs simple(r) because you can treat the view as a pure function - often, you essentially give a props reference into a top level component and it works out what to draw. Then, when something changes, you do the same again; trigger a full re-draw and rely upon React&#39;s Virtual DOM to work out what changed in an efficient manner and apply those changes to the browser DOM. The browser DOM is slow, which is why interactions with it should be minimised. The Virtual DOM is fast.&lt;/p&gt;

&lt;p&gt;The common pre-React way to deal with UIs was to have some code to render the UI in an initial state and then further code that would change the UI based upon user interactions. React reduces these two types of state-handling (initial-display and update-for-specific-interaction) into one (full re-render).&lt;/p&gt;

&lt;p&gt;And a lot of the time, the fast Virtual DOM performs quickly enough that you don&#39;t have to worry about what it&#39;s doing. But sometimes, you may have a UI that is so complicated that it&#39;s a lot of work for the Virtual DOM to calculate the diffs to apply to the browser DOM. Or you might have particularly demanding performance requirements, such as achieving 60 fps animations on mobile.&lt;/p&gt;

&lt;p&gt;Handily, React has a way for you to give it hints - namely the &lt;a href=&quot;https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate&quot;&gt;ShouldComponentUpdate&lt;/a&gt; method that components may implement. This method can look at the component&#39;s current props and state values and the &lt;em&gt;next&lt;/em&gt; props and state values and let React know if any changes are required. The method returns a boolean - false meaning &quot;no, I don&#39;t need to redraw, this data looks the same&quot; and true meaning &quot;yes, I need to redraw for this new data&quot;. The method is optional, if a component doesn&#39;t implement it then it&#39;s equivalent to it always returning true. Remember, if a component returns true for &quot;do I need to be redrawn?&quot;, the Virtual DOM is still what is responsible for dealing with the update - and it usually deals with it in a very fast and efficient manner. Returning true is not something to necessarily be worried about. However, if you &lt;em&gt;can&lt;/em&gt; identify cases where ShouldComponentUpdate can return false then you can save the Virtual DOM from working out whether that component &lt;em&gt;or any of its child components&lt;/em&gt; need to be redrawn. If this can be done high up in a deeply-nested component tree then it could save the Virtual DOM a lot of work.&lt;/p&gt;

&lt;p&gt;The problem is, though, that coming up with a mechanism to reliably and efficiently compare object references (ie. props and / or state) to determine whether they describe the same data is difficult to do in the general case.&lt;/p&gt;

&lt;p&gt;Let me paint a picture by describing a very simple example React application..&lt;/p&gt;

&lt;h3&gt;The Message Editor Example&lt;/h3&gt;

&lt;p&gt;Imagine an app that can read a list of messages from an API and allow the user of the app to edit these messages. Each message has &quot;Content&quot; and &quot;Author&quot; properties that are strings. Either of these values may be edited in the app. These messages are part of a message group that has a title - this also may be edited in the app.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(I didn&#39;t say that it was a useful or realistic app, it&#39;s just one to illustrate a point :)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The way that I like to create React apps is to categorise components as one of two things; a &quot;Container Component&quot; or a &quot;Presentation Component&quot;. Presentation Components should be state-less, they should just be handed a props reference and then go off and draw themselves. Any interactions that the user makes with this component or any of its child components are effectively passed up (via change handlers on the props reference) until it reaches a Container Component. The Container Component will translate these interaction into actions to send to the Dispatcher. Actions will be handled by a store (that will be listening out for Dispatcher actions that it&#39;s interested in). When a store handles an action, it emits a change event. The Container Component will be listening out for change events on stores that it is interested in - when this happens, the Container Component will trigger a re-render of itself by updating its state based upon data now available in the store(s) it cares about. This is a fairly standard Flux architecture and, I believe, the terms &quot;Container Component&quot; / &quot;Presentation Component are in reasonably common use (I didn&#39;t make them up, I just like the principle - one of the articles that I&#39;ve read that uses these descriptions is &lt;a href=&quot;https://medium.com/making-internets/component-brick-and-mortar-8bde51899b00#.6yi3i9hou&quot;&gt;Component Brick and Mortar: The React documentation I wish I had a year ago&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;So, for my example app, I might have a component hierarchy that looks this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AppContainer
  Title
    TextInput
      Input
  MessageList
    MessageRow
      TextInput
        Input
      TextInput
        Input
    MessageRow
      TextInput
        Input
      TextInput
        Input
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There will be as many &quot;MessageRow&quot; components as there are messages to edit. &lt;strong&gt;Input&lt;/strong&gt; is a standard React-rendered element and all of the others (&lt;strong&gt;AppContainer&lt;/strong&gt;, &lt;strong&gt;Title&lt;/strong&gt;, &lt;strong&gt;MessageList&lt;/strong&gt;, &lt;strong&gt;MessageRow&lt;/strong&gt; and &lt;strong&gt;TextInput&lt;/strong&gt;) are custom components.&lt;/p&gt;

&lt;p&gt;(Note: This is &lt;em&gt;not&lt;/em&gt; a sufficiently deeply-nested hierarchy that React would have any problems with rendering performance, it&#39;s intended to be &lt;em&gt;just&lt;/em&gt; complicated enough to demonstrate the point that I&#39;m working up to).&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;AppContainer&lt;/strong&gt; is the only &quot;Container Component&quot; and so is the only component that has a React state reference as well as props. A state reference is, essentially, what prevents a component from being what you might consider a &quot;pure function&quot; - where the props that are passed in are all that affects what is rendered out. React &quot;state&quot; is required to trigger a re-draw of the UI, but it should be present in as few places as possible - ie. there should only be one, or a small number of, top level component(s) that have state. Components that render &lt;em&gt;only&lt;/em&gt; according to their props data are much easier to reason about (and hence easier to write, extend and maintain).&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;https://www.nuget.org/packages/Bridge.React&quot;&gt;Bridge.NET React bindings&lt;/a&gt; NuGet package makes it simple to differentiate between stateful (ie. Container) components and stateless (ie. Presentation) components as it has both a &lt;strong&gt;Component&amp;lt;TProps, TState&amp;gt;&lt;/strong&gt; base class and a &lt;strong&gt;StatelessComponent&amp;lt;TProps&amp;gt;&lt;/strong&gt; base class - you derive from the appropriate one when you create custom components (for more details, see &lt;a href=&quot;http://www.productiverage.com/react-and-flux-with-bridgenet-redux&quot;&gt;React (and Flux) with Bridge.net - Redux&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To start with the simplest example, below is the &lt;strong&gt;TextInput&lt;/strong&gt; component. This just renders a text Input with a specified value and communicates up any requests to change that string value via an &quot;OnChange&quot; callback -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class TextInput : StatelessComponent&amp;lt;TextInput.Props&amp;gt;
{
  public TextInput(Props props) : base(props) { }

  public override ReactElement Render()
  {
    return DOM.Input(new InputAttributes
    {
      Type = InputType.Text,
      Value = props.Content,
      OnChange = OnTextChange
    });
  }

  private void OnTextChange(FormEvent&amp;lt;InputElement&amp;gt; e)
  {
    props.OnChange(e.CurrentTarget.Value);
  }

  public class Props
  {
    public string Content { get; set; }
    public Action&amp;lt;string&amp;gt; OnChange { get; set; }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is fairly easy to envisage how you might try to implement &quot;ShouldComponentUpdate&quot; here - given a &quot;this is the new props value&quot; reference (which gets passed into ShouldComponentUpdate as an argument called &quot;nextProps&quot;) and the current props reference, you need only  look at the &quot;Content&quot; and &quot;OnChange&quot; references on the current and next props and, if both Content/Content and OnChange/OnChange references are the same, then we can return false (meaning &quot;no, we do not need to re-draw this TextInput&quot;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Two things to note here: Firstly, it is not usually possible to directly compare the current props reference with the &quot;nextProps&quot; reference because it is common for the parent component to create a new props instance for each proposed re-render of a child component, rather than re-use a previous props instance - so the individual property values within the props references may all be consistent between the current props and nextProps, but the actual props references will usually be distinct. Secondly, the Bridge.NET React bindings only support React component life cycle method implementations on custom components derived from &lt;strong&gt;Component&amp;lt;TProps, TState&amp;gt;&lt;/strong&gt; classes and not those derived from &lt;strong&gt;StatelessComponent&amp;lt;TProps&amp;gt;&lt;/strong&gt;, so you couldn&#39;t actually write your own &quot;ShouldComponentUpdate&quot; for a &lt;strong&gt;StatelessComponent&lt;/strong&gt; - but that&#39;s not important here, we&#39;re just working through a thought experiment).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now let&#39;s move on to the &lt;strong&gt;MessageList&lt;/strong&gt; and &lt;strong&gt;MessageRow&lt;/strong&gt; components, since things get more complicated there -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MessageList : StatelessComponent&amp;lt;MessageList.Props&amp;gt;
{
  public MessageList(Props props) : base(props) { }

  public override ReactElement Render()
  {
    var messageRows = props.IdsAndMessages
      .Select(idAndMessage =&amp;gt; new MessageRow(new MessageRow.Props
      {
        Key = idAndMessage.Item1,
        Message = idAndMessage.Item2,
        OnChange = newMessage =&amp;gt; props.OnChange(idAndMessage.Item1, newMessage)
      }));
    return DOM.Div(
      new Attributes { ClassName = &quot;message-list&quot; },
      messageRows.ToChildComponentArray()
    );
  }

  public class Props
  {
    public Tuple&amp;lt;int, MessageEditState&amp;gt;[] IdsAndMessages;
    public Action&amp;lt;int, MessageEditState&amp;gt; OnChange;
  }
}

public class MessageRow : StatelessComponent&amp;lt;MessageRow.Props&amp;gt;
{
  public MessageRow(Props props) : base(props) { }

  public override ReactElement Render()
  {
    // Note that the &quot;Key&quot; value from the props reference does not explicitly need
    // to be mentioned here, the React bindings will deal with it (it is important
    // to give dynamic children components unique key values, but it is handled by
    // the bindings and the React library so long as a &quot;Key&quot; property is present
    // on the props)
    // - See https://facebook.github.io/react/docs/multiple-components.html for
    //   more details
    return DOM.Div(new Attributes { ClassName = &quot;message-row&quot; },
      new TextInput(new TextInput.Props
      {
        Content = props.Message.Content,
        OnChange = OnContentChange
      }),
      new TextInput(new TextInput.Props
      {
        Content = props.Message.Author,
        OnChange = OnAuthorChange
      })
    );
  }

  private void OnContentChange(string newContent)
  {
    props.OnChange(new MessageEditState
    {
      Content = newContent,
      Author = props.Message.Author
    });
  }
  private void OnAuthorChange(string newAuthor)
  {
    props.OnChange(new MessageEditState
    {
      Content = props.Message.Content,
      Author = newAuthor
    });
  }

  public class Props
  {
    public int Key;
    public MessageEditState Message;
    public Action&amp;lt;MessageEditState&amp;gt; OnChange;
  }
}

public class MessageEditState
{
  public string Content;
  public string Author;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the &lt;strong&gt;MessageList&lt;/strong&gt; component wanted to implement &quot;ShouldComponentUpdate&quot; then its job is more difficult as it has an array of message data to check. It could do one of several things - the first, and most obviously accurate, would be to perform a &quot;deep compare&quot; of the arrays from the current props and the &quot;nextProps&quot;; ensuring firstly that there are the same number of items in both and then comparing each &quot;Content&quot; and &quot;Author&quot; value in each item of the arrays. If everything matches up then the two arrays contain the same data and (so long as the &quot;OnChange&quot; callback hasn&#39;t changed) the component doesn&#39;t need to re-render. Avoiding re-rendering this component (and, subsequently, any of its child components) would be a big win because it accounts for a large portion of the total UI. Not re-rendering it would give the Virtual DOM much less work to do. But would a deep comparison of this type actually be any cheaper than letting the Virtual DOM do what it&#39;s designed to do?&lt;/p&gt;

&lt;p&gt;The second option is to presume that whoever created the props references would have re-used any &lt;strong&gt;MessageEditState&lt;/strong&gt; instances that haven&#39;t changed. So the array comparison could be reduced to ensuring that the current and next props references both have the same number of elements and then performing reference equality checks on each item.&lt;/p&gt;

&lt;p&gt;The third option is to presume that whoever created the props reference would have re-used the array itself if the data hadn&#39;t changed, meaning that a simple reference equality check could be performed on the current and next props&#39; arrays.&lt;/p&gt;

&lt;p&gt;The second and third options are both much cheaper than a full &quot;deep compare&quot; but they both rely upon the caller following some conventions. This is why I say that this is a difficult problem to solve for the general case.&lt;/p&gt;

&lt;h3&gt;Immutability to the rescue&lt;/h3&gt;

&lt;p&gt;There is actually another option to consider, the object models for the props data could be rewritten to use immutable types. These have the advantage that if you find that two references are equal then they are guaranteed to contain the same data. They also have the advantage that it&#39;s much more common to re-use instances to describe the same data - partly because there is some overhead to initialising immutable types and partly because there is no fear that &quot;if I give this reference to this function, I want to be sure that it can&#39;t change the data in &lt;em&gt;my&lt;/em&gt; reference while doing its work&quot; because it is &lt;em&gt;impossible&lt;/em&gt; to change an immutable reference&#39;s data. (I&#39;ve seen defensively-written code that clones mutable references that it passes into other functions, to be sure that no other code can change the data in the original reference - this is never required with immutable types).&lt;/p&gt;

&lt;p&gt;Conveniently, I&#39;ve recently written a library to use with Bridge.NET which I think makes creating and working with immutable types easier than C# makes it on its own. I wrote about it in &quot;&lt;a href=&quot;http://www.productiverage.com/frictionless-immutable-objects-in-bridge-c-sharp-javascript-applications&quot;&gt;Friction-less immutable objects in Bridge (C# / JavaScript) applications&lt;/a&gt;&quot; but the gist is that you re-write &lt;strong&gt;MessageEditState&lt;/strong&gt; as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// You need to pull in the &quot;ProductiveRage.Immutable&quot; NuGet package to use IAmImmutable
public class MessageEditState : IAmImmutable
{
  public MessageEditState(string content, string author)
  {
    this.CtorSet(_ =&amp;gt; _.Content, content);
    this.CtorSet(_ =&amp;gt; _.Author, author);
  }
  public string Content { get; private set; }
  public string Author { get; private set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&#39;s still a little more verbose than the mutable version, admittedly, but I&#39;m hoping to convince you that it&#39;s worth it (if you need convincing!) for the benefits that we&#39;ll get.&lt;/p&gt;

&lt;p&gt;When you have an instance of this new &lt;strong&gt;MessageEditState&lt;/strong&gt; class, if you need to change one of the properties, you don&#39;t have to call the constructor each time to get a new instance, you can use the &quot;With&quot; extension methods that may be called on any &lt;strong&gt;IAmImmutable&lt;/strong&gt; instance - eg.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var updatedMessage = message.With(_ =&amp;gt; _.Content, &quot;New information&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would mean that the change handlers from &lt;strong&gt;MessageRow&lt;/strong&gt; could be altered from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void OnContentChange(string newContent)
{
  props.OnChange(new MessageEditState
  {
    Content = newContent,
    Author = props.Message.Author
  });
}
private void OnAuthorChange(string newAuthor)
{
  props.OnChange(new MessageEditState
  {
    Content = props.Message.Content,
    Author = newAuthor
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and replaced with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void OnContentChange(string newContent)
{
  props.OnChange(props.Message.With(_ =&amp;gt; _.Content, newContent));
}
private void OnAuthorChange(string newAuthor)
{
  props.OnChange(props.Message.With(_ =&amp;gt; _.Author, newAuthor));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Immediately, the verbosity added to &lt;strong&gt;MessageEditState&lt;/strong&gt; is being offset with tidier code! (And it&#39;s nice not having to set both &quot;Content&quot; &lt;em&gt;and&lt;/em&gt; &quot;Author&quot; when only changing &lt;em&gt;one&lt;/em&gt; of them).&lt;/p&gt;

&lt;p&gt;The &quot;With&quot; method also has a small trick up its sleeve in that it won&#39;t return a new instance if the new property value is the same as the old property value. This is an eventuality that &lt;em&gt;could&lt;/em&gt; happen in the code above as an &quot;Input&quot; element rendered by React will raise an &quot;OnChange&quot; event for any action that &lt;em&gt;might&lt;/em&gt; have altered the text input&#39;s content. For example, if you had a text box with the value &quot;Hello&quot; in it and you selected all of that text and then pasted in text from the clipboard over the top of it, if the clipboard text was also &quot;Hello&quot; then the &quot;OnChange&quot; event will be raised, even though the actual value has not changed (it was &quot;Hello&quot; before and it&#39;s still &quot;Hello&quot; now). The &quot;With&quot; method will deal with this, though, and just pass the same instance straight back out. This is an illustration of the &quot;reuse of instances for unchanged data&quot; theme that I alluded to above.&lt;/p&gt;

&lt;p&gt;The next step would be to change the array type in the &lt;strong&gt;MessageList.Props&lt;/strong&gt; type from&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Tuple&amp;lt;int, MessageEditState&amp;gt;[] IdsAndMessages;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Set&amp;lt;Tuple&amp;lt;int, MessageEditState&amp;gt;&amp;gt; IdsAndMessages;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;Set&lt;/strong&gt; class is also in the &lt;a href=&quot;https://www.nuget.org/packages/ProductiveRage.Immutable&quot;&gt;ProductiveRage.Immutable&lt;/a&gt; NuGet package. It&#39;s basically an immutable &lt;strong&gt;IEnumerable&lt;/strong&gt; that may be used in Bridge.NET projects. A simple example of it in use is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Create a new set of values (the static &quot;Of&quot; method uses type inference to determine
// the type of &quot;T&quot; in the returned &quot;Set&amp;lt;T&amp;gt;&quot; - since 1, 2 and 3 are all ints, the
// &quot;numbers&quot; reference will be of type &quot;Set&amp;lt;int&amp;gt;&quot;)
var numbers = Set.Of(1, 2, 3);

// SetValue takes an index and a new value, so calling SetValue(2, 4) on a set
// containing 1, 2, 3 will return a new set containing the values 1, 2, 4
numbers = numbers.SetValue(2, 4);

// Calling SetValue(2, 4) on a set containing values 1, 2, 4 does not require any
// changes, so the input reference is passed straight back out
numbers = numbers.SetValue(2, 4);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As with &lt;strong&gt;IAmImmutable&lt;/strong&gt; instances we get two big benefits - we can rely on reference equality comparisons more often, since the data with any given reference can never change, and references will be reused in many cases if operations are requested that would not actually change the data. (It&#39;s worth noting that the guarantees fall apart if any property on an &lt;strong&gt;IAmImmutable&lt;/strong&gt; reference is a of a mutable type, similarly if a &lt;strong&gt;Set&lt;/strong&gt; has elements that are a mutable type, or that have nested properties that are of a mutable type.. but so long as immutability is used &quot;all the way down&quot; then all will be well).&lt;/p&gt;

&lt;p&gt;If this philosophy was followed, then suddenly the &quot;ShouldComponentUpdate&quot; implementation for the &lt;strong&gt;MessageList&lt;/strong&gt; component would be very easy to write - just perform reference equality comparisons on the &quot;IdsAndMessages&quot; and &quot;OnChange&quot; values on the current props and on the nextProps. While solving the problem for the general case is very difficult, solving it when you introduce some constraints (such as the use of immutable and persistent data types) can be very easy!&lt;/p&gt;

&lt;p&gt;If we &lt;em&gt;did&lt;/em&gt; implement this &lt;strong&gt;MessageList&lt;/strong&gt; &quot;ShouldComponentUpdate&quot; method, then we could be confident that when a user makes changes to the &quot;Title&quot; text input that the Virtual DOM would not have to work out whether the &lt;strong&gt;MessageList&lt;/strong&gt; or any of its child components had changed - because we&#39;d have told the Virtual DOM that they hadn&#39;t (because the &quot;IdsAndMessages&quot; and &quot;OnChange&quot; property references wouldn&#39;t have changed).&lt;/p&gt;

&lt;p&gt;We could take this a step further, though, and consider the idea of implementing &quot;ShouldComponentUpdate&quot; on other components - such as &lt;strong&gt;MessageRow&lt;/strong&gt;. If the user edits a text value within one row, then the &lt;strong&gt;MessageList&lt;/strong&gt; will have to perform some re-rendering work, since one of its child components needs to be re-rendered. But there&#39;s no need for any of the other rows to re-render, it could be &lt;em&gt;just&lt;/em&gt; the single row in which the change was requested by the user.&lt;/p&gt;

&lt;p&gt;So the &lt;strong&gt;MessageRow&lt;/strong&gt; could look at its props values and, if they haven&#39;t changed between the current props and the nextProps, then inform React (via &quot;ShouldComponentUpdate&quot;) that no re-render is required.&lt;/p&gt;

&lt;p&gt;And why not go even further and just do this on &lt;em&gt;all&lt;/em&gt; Presentation Components? The &lt;strong&gt;TextInput&lt;/strong&gt; could avoid the re-render of its child Input if the props&#39; &quot;Content&quot; and &quot;OnChange&quot; reference are not being updated.&lt;/p&gt;

&lt;h3&gt;Introducing the Bridge.React &quot;PureComponent&quot;&lt;/h3&gt;

&lt;p&gt;To make this easy, I&#39;ve added a new base class to the React bindings (available in 1.4 of &lt;a href=&quot;https://www.nuget.org/packages/Bridge.React&quot;&gt;Bridge.React&lt;/a&gt;); the &lt;strong&gt;PureComponent&amp;lt;TProps&amp;gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This, like the &lt;strong&gt;StatelessComponent&amp;lt;TProps&amp;gt;&lt;/strong&gt;, is very simple and does not support state and only allows the &quot;Render&quot; method to be implemented - no other React lifecycle functions (such &quot;ComponentWillMount&quot;, &quot;ShouldComponentUpdate&quot;, etc..) may be defined on components deriving from this class.&lt;/p&gt;

&lt;p&gt;The key difference is that it has its own &quot;ShouldComponentUpdate&quot; implementation that presumes that the props data is immutable and basically does what I&#39;ve been describing above automatically - when React checks &quot;ShouldComponentUpdate&quot;, it will look at the &quot;props&quot; and &quot;nextProps&quot; instances and compare their property values. (It also deals with the cases where one or both of them are null, in case you want components whose props reference is optional).&lt;/p&gt;

&lt;p&gt;This is not an original idea, by a long shot. I first became aware of people doing this in 2013 when I read &lt;a href=&quot;http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/&quot;&gt;The Future of JavaScript MVC Frameworks&lt;/a&gt;, which was talking about using &lt;a href=&quot;https://github.com/clojure/clojurescript&quot;&gt;ClojureScript&lt;/a&gt; and its React interface &quot;&lt;a href=&quot;https://github.com/omcljs/om&quot;&gt;Om&lt;/a&gt;&quot;. More recently, I was reading &lt;a href=&quot;http://benchling.engineering/performance-engineering-with-react/&quot;&gt;Performance Engineering with React (Part 1)&lt;/a&gt;, which talks about roughly the same subject but with vanilla JavaScript. And, of course, Facebook has long had its &lt;a href=&quot;https://facebook.github.io/react/docs/pure-render-mixin.html&quot;&gt;PureRenderMixin&lt;/a&gt; - though mixins can&#39;t be used with ES6 components (which seems to be the approach to writing components that Facebook is pushing at the moment).&lt;/p&gt;

&lt;p&gt;So, this is largely just making it easy it when writing React applications with &lt;em&gt;Bridge&lt;/em&gt;. However, using Bridge to do this &lt;em&gt;does&lt;/em&gt; give us some extra advantages (on top of the joy of being able to write React apps in C#!). In the code earlier (from the &lt;strong&gt;MessageRow&lt;/strong&gt; Render method) -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new TextInput(new TextInput.Props
{
  Content = props.Message.Content,
  OnChange = OnContentChange
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bridge will bind the &quot;OnContentChange&quot; method to the current &lt;strong&gt;MessageRow&lt;/strong&gt; instance so that when it is called by the &lt;strong&gt;TextInput&lt;/strong&gt;&#39;s &quot;OnChange&quot; event, &quot;this&quot; is the &lt;strong&gt;MessageRow&lt;/strong&gt; and not the &lt;strong&gt;TextInput&lt;/strong&gt; (which is important because OnContentChange needs to access the &quot;props&quot; reference scoped to the &lt;strong&gt;MessageRow&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;This introduces a potential wrinkle in our plan, though, as this binding process creates a new JavaScript method each time and means that each time the &lt;strong&gt;TextInput&lt;/strong&gt; is rendered, the &quot;OnChange&quot; reference is new. So if we try to perform simple reference equality checks on props values, then we won&#39;t find the current &quot;OnChange&quot; and the new &quot;OnChange&quot; to be the same.&lt;/p&gt;

&lt;p&gt;This problem is mentioned in the &quot;Performance Engineering&quot; article I linked above:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unfortunately, each call to Function.bind produces a new function.. No amount of prop checking will help, and your component will always re-render.&lt;/p&gt;
  
  &lt;p&gt;..&lt;/p&gt;
  
  &lt;p&gt;The simplest solution we&#39;ve found is to pass the unbound function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When using Bridge, we don&#39;t have the option of using an unbound function since the function-binding is automatically introduced by the C#-to-JavaScript translation process. And it&#39;s very convenient, so it&#39;s not something that I&#39;d ideally &lt;em&gt;like&lt;/em&gt; to have to workaround.&lt;/p&gt;

&lt;p&gt;Having a dig through Bridge&#39;s source code, though, revealed some useful information. When Bridge.fn.bind is called, it returns a new function (as just discussed).. but with some metadata attached to it. When it returns a new function, it sets two properties on it &quot;$scope&quot; and &quot;$method&quot;. The $scope reference is what &quot;this&quot; will be set to when the bound function is called and the $method reference is the original function that is being bound. This means that, when the props value comparisons are performed, if a value is a function and it the reference equality comparison fails, a fallback approach may be attempted - if both functions have $scope and $method references defined then compare them and, if they are both consistent between the function value on the current props and the function value on the nextProps, then consider the value to be unchanged.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;PureComponent&lt;/strong&gt;&#39;s &quot;ShouldComponentUpdate&quot; implementation deals with this automatically, so you don&#39;t have to worry about it.&lt;/p&gt;

&lt;p&gt;It&#39;s possibly worth noting that the &quot;Performance Engineering&quot; post did briefly consider something similar -&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another possibility we&#39;ve explored is using a custom bind function that stores metadata on the function itself, which in combination with a more advanced check function, could detect bound functions that haven&#39;t actually changed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Considering that Bridge automatically includes this additional metadata, it seemed to me to be sensible to use it.&lt;/p&gt;

&lt;p&gt;There&#39;s one other equality comparison that is supported; as well as simple referential equality and the function equality gymnastics described above, if both of the values are non-null and the first has an &quot;Equals&quot; function then this function will be considered. This means that any custom &quot;Equals&quot; implementations that you define on classes will be automatically taken into consideration by the &lt;strong&gt;PureComponent&lt;/strong&gt;&#39;s logic.&lt;/p&gt;

&lt;h3&gt;Another Bridge.NET bonus: Lambda support&lt;/h3&gt;

&lt;p&gt;When I started writing this post, there was going to be a section here with a warning about using lambdas as functions in props instances, rather than using named functions (which the examples thus far have done).&lt;/p&gt;

&lt;p&gt;As with bound functions, anywhere that an anonymous function is present in JavaScript, it will result in a new function value being created. If, for example, we change the &lt;strong&gt;MessageRow&lt;/strong&gt; class from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MessageRow : PureComponent&amp;lt;MessageRow.Props&amp;gt;
{
  public MessageRow(Props props) : base(props) { }

  public override ReactElement Render()
  {
    return DOM.Div(new Attributes { ClassName = &quot;message-row&quot; },
      new TextInput(new TextInput.Props
      {
        Content = props.Message.Content,
        OnChange = OnContentChange
      }),
      new TextInput(new TextInput.Props
      {
        Content = props.Message.Author,
        OnChange = OnAuthorChange
      })
    );
  }

  private void OnContentChange(string newContent)
  {
    props.OnChange(props.Message.With(_ =&amp;gt; _.Content, newContent));
  }
  private void OnAuthorChange(string newAuthor)
  {
    props.OnChange(props.Message.With(_ =&amp;gt; _.Author, newAuthor));
  }

  public class Props
  {
    public int Key;
    public MessageEditState Message;
    public Action&amp;lt;MessageEditState&amp;gt; OnChange;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MessageRow : PureComponent&amp;lt;MessageRow.Props&amp;gt;
{
  public MessageRow(Props props) : base(props) { }

  public override ReactElement Render()
  {
    return DOM.Div(new Attributes { ClassName = &quot;message-row&quot; },
      new TextInput(new TextInput.Props
      {
        Content = props.Message.Content,
        OnChange = newContent =&amp;gt;
          props.OnChange(props.Message.With(_ =&amp;gt; _.Content, newContent))
      }),
      new TextInput(new TextInput.Props
      {
        Content = props.Message.Author,
        OnChange = newAuthor =&amp;gt;
          props.OnChange(props.Message.With(_ =&amp;gt; _.Author, newAuthor))
      })
    );
  }

  public class Props
  {
    public int Key;
    public MessageEditState Message;
    public Action&amp;lt;MessageEditState&amp;gt; OnChange;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then there would be problems with the &quot;OnChange&quot; props values specified because each new lambda - eg..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OnChange = newContent =&amp;gt;
  props.OnChange(props.Message.With(_ =&amp;gt; _.Content, newContent))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would result in a new JavaScript function being passed to Bridge.fn.bind every time that it was called:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;onChange: Bridge.fn.bind(this, function (newContent) {
  this.getprops().onChange(
    ProductiveRage.Immutable.ImmutabilityHelpers.$with(
      this.getprops().message,
      function (_) { return _.getContent(); },
      newContent
    )
  );
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this would prevent the &lt;strong&gt;PureComponent&lt;/strong&gt;&#39;s &quot;ShouldComponentUpdate&quot; logic from being effective, since the $method values from the current props &quot;OnChange&quot; and the nextProps &quot;OnChange&quot; bound functions would always be different.&lt;/p&gt;

&lt;p&gt;I was quite disappointed when I realised this and was considering trying to come up with some sort of workaround - maybe calling &quot;toString&quot; on both $method values and comparing their implementations.. but I couldn&#39;t find definitive information about the performance implications of this and I wasn&#39;t looking forward to constructing my own suite of tests to investigate any potential performance impact of this across different browsers and different browser versions.&lt;/p&gt;

&lt;p&gt;My disappointment was two-fold: firstly, using the lambdas allows for more succinct code and less syntactic noise - since the types of the lambda&#39;s argument(s) and return value (if any) are inferred, rather than having to be explicitly typed out.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;newContent =&amp;gt; props.OnChange(props.Message.With(_ =&amp;gt; _.Content, newContent))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is clearly shorter than&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void OnContentChange(string newContent)
{
  props.OnChange(props.Message.With(_ =&amp;gt; _.Content, newContent));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other reason that I was deflated upon realising this was that it meant that the &quot;ShouldComponentUpdate&quot; implementation would, essentially, silently fail for components that used lambdas - &quot;ShouldComponentUpdate&quot; would return true in cases where I would like it to return false. There would be no compiler error and the UI code would still function, but it wouldn&#39;t be as efficient as it could be (the Virtual DOM would have to do more work than necessary).&lt;/p&gt;

&lt;p&gt;Instead, I had a bit of a crazy thought.. lambdas like this, that only need to access their own arguments and the &quot;this&quot; reference, could be &quot;lifted&quot; into named functions quite easily. Essentially, I&#39;m doing this manually by writing methods such as &quot;OnContentChange&quot;. But could the Bridge translator do something like this automatically - take those C# lambdas and convert them into named functions in JavaScript? That way, I would get the benefit of the succinct lambda format in C# &lt;em&gt;and&lt;/em&gt; the &lt;strong&gt;PureComponent&lt;/strong&gt; optimisations would work.&lt;/p&gt;

&lt;p&gt;Well, once again the Bridge.NET Team came through for me! I raised a &lt;a href=&quot;http://forums.bridge.net/forum/general/feature-requests/1515-open-921-lift-simple-anonymous-functions-into-named-functions-for-performance-wins&quot;&gt;Feature Request&lt;/a&gt; about this, explained what I&#39;d like in an ideal world (and why) and five days later there was a branch on GitHub where I could preview changes that did precisely what I wanted!&lt;/p&gt;

&lt;p&gt;This is not just an example of fantastic support from the Bridge Team, it is also, I believe, an incredible feature for Bridge and a triumph for writing front-end code in C#! Having this &quot;translation step&quot; from C# to JavaScript provides the opportunity for handy features to be included for free - earlier we saw how the insertion of Bridge.fn.bind calls by the translator meant that we had access to $method and $scope metadata (which side-steps one of the problems that were had by the author of &lt;a href=&quot;http://benchling.engineering/performance-engineering-with-react/&quot;&gt;Performance Engineering with React&lt;/a&gt;) but, here, the translation step can remove the performance overhead that anonymous functions were going to cause for our &quot;ShouldComponentUpdate&quot; implementation, without there being &lt;em&gt;any&lt;/em&gt; burden on the developer writing the C# code.&lt;/p&gt;

&lt;p&gt;It&#39;s also worth considering the fact that every allocation made in JavaScript is a reference that needs to be tidied up by the browser&#39;s garbage collector at some point. A big reason why judicious use of &quot;ShouldComponentUpdate&quot; can make UIs faster is that there is less work for the Virtual DOM to do, but it &lt;em&gt;also&lt;/em&gt; eases the load on the garbage collector because none of the memory allocations need to be made for child components of components that do not need to be re-rendered. Since anonymous JavaScript functions are created over and over again (every time that the section of code that declares the anonymous function is executed), lifting them into named functions means that there will be fewer allocations in your SPA and hence even less work for the garbage collector to do.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: As of the 11th of February 2016, this Bridge.NET improvement has not yet been made live - but their release cycles tend to be fairly short and so I don&#39;t imagine that it will be very long until it is included in an official release. If you were desperate to write any code with &lt;strong&gt;PureComponent&lt;/strong&gt; before then, you could either avoid lambdas in your C# code or you could use lambdas now, knowing that the &lt;strong&gt;PureComponent&lt;/strong&gt; won&#39;t be giving you the full benefit immediately - but that you WILL get the full benefit when the Bridge Team release the update.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;So it&#39;s an unequivocable success then??&lt;/h3&gt;

&lt;p&gt;Well, until it transpired that the Bridge translator would be altered to convert these sorts of lambdas into named functions, I was going to say &quot;this is good, but..&quot;. However, &lt;em&gt;with&lt;/em&gt; that change in sight, I&#39;m just going to say outright &quot;yes, and I&#39;m going to change all classes that derive from &lt;strong&gt;StatelessComponent&lt;/strong&gt; in my projects to derive from &lt;strong&gt;PureComponent&lt;/strong&gt;&quot;. This will work fine, so long as your props references are all immutable (meaning that they are immutable &lt;em&gt;all the way down&lt;/em&gt; - you shouldn&#39;t have, say, a props property that is an immutable &lt;strong&gt;Set&lt;/strong&gt; of references, but where those references have mutable properties).&lt;/p&gt;

&lt;p&gt;And, if you&#39;re not using immutable props types - sort yourself out! While a component is being rendered (according to the &lt;a href=&quot;https://facebook.github.io/react/docs/tutorial.html&quot;&gt;Facebook React Tutorial&lt;/a&gt;):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;props are immutable: they are passed from the parent and are &quot;owned&quot; by the parent&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, rather than having props only be immutable during component renders (by a convention that the React library enforces), why not go whole-hog and use fully immutable classes to describe your props types - that way props are &lt;em&gt;fully&lt;/em&gt; immutable and you can use the &lt;a href=&quot;https://www.nuget.org/packages/Bridge.React&quot;&gt;Bridge.React&lt;/a&gt;&#39;s &lt;strong&gt;PureComponent&lt;/strong&gt; to get performance boosts for free!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Now seems like a good time to remind you of my post &quot;&lt;a href=&quot;http://www.productiverage.com/frictionless-immutable-objects-in-bridge-c-sharp-javascript-applications&quot;&gt;Friction-less immutable objects in Bridge (C# / JavaScript) applications&lt;/a&gt;&quot;, which illustrates how to use the &lt;a href=&quot;https://www.nuget.org/packages/ProductiveRage.Immutable&quot;&gt;ProductiveRage.Immutable&lt;/a&gt; NuGet package to make defining immutable classes just that bit easier).&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;Related&quot;&gt;&lt;h3&gt;You may also be interested in&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.productiverage.com/frictionless-immutable-objects-in-bridge-c-sharp-javascript-applications&quot;&gt;Friction-less immutable objects in Bridge (C# / JavaScript) applications&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.productiverage.com/react-and-flux-with-bridgenet-redux&quot;&gt;React (and Flux) with Bridge.net - Redux&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
			<pubDate>Thu, 11 Feb 2016 20:11:00 GMT</pubDate>
		</item>

	</channel>

</rss>